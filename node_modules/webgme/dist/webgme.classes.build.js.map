{
  "version": 3,
  "file": "webgme.classes.build.js",
  "sources": [
    "../node_modules/requirejs/require.js",
    "client/bower_components/visionmedia-debug/dist/debug.js",
    "client/js/logger.js",
    "common/storage/constants.js",
    "client/bower_components/q/q.js",
    "common/storage/storageclasses/watchers.js",
    "common/storage/storageclasses/simpleapi.js",
    "common/storage/storageclasses/objectloaders.js",
    "common/util/assert.js",
    "common/util/canon.js",
    "client/bower_components/chance/chance.js",
    "common/util/random.js",
    "common/core/constants.js",
    "common/util/jsonPatcher.js",
    "common/storage/dataConverters.js",
    "common/regexp.js",
    "common/storage/util.js",
    "common/storage/project/cache.js",
    "common/storage/project/interface.js",
    "common/storage/project/branch.js",
    "common/storage/project/project.js",
    "common/util/sha1.js",
    "common/util/key.js",
    "common/storage/storageclasses/editorstorage.js",
    "common/util/url.js",
    "common/storage/socketio/browserclient.js",
    "common/EventDispatcher.js",
    "common/storage/socketio/websocket.js",
    "common/storage/browserstorage.js",
    "common/core/tasync.js",
    "common/core/corerel.js",
    "common/core/setcore.js",
    "common/core/guidcore.js",
    "common/core/nullpointercore.js",
    "common/core/coreunwrap.js",
    "common/core/coretype.js",
    "common/core/constraintcore.js",
    "common/core/coretree.js",
    "common/core/metacore.js",
    "common/core/coretreeloader.js",
    "common/core/corediff.js",
    "common/core/metacachecore.js",
    "common/core/mixincore.js",
    "common/core/metaquerycore.js",
    "common/core/librarycore.js",
    "common/core/core.js",
    "common/core/coreQ.js",
    "client/js/client/constants.js",
    "common/util/guid.js",
    "client/js/RegistryKeys.js",
    "client/js/client/gmeNodeGetter.js",
    "client/js/client/gmeNodeSetter.js",
    "client/bower_components/underscore/underscore.js",
    "common/Constants.js",
    "client/js/Constants.js",
    "client/js/client/libraries.js",
    "common/blob/BlobConfig.js",
    "common/blob/BlobMetadata.js",
    "common/blob/Artifact.js",
    "client/lib/superagent/superagent.js",
    "common/util/uint.js",
    "common/blob/BlobClient.js",
    "client/js/Utils/SaveToDisk.js",
    "client/js/client/stateloghelpers.js",
    "plugin/PluginNodeDescription.js",
    "plugin/PluginMessage.js",
    "plugin/PluginResult.js",
    "plugin/util.js",
    "plugin/managerbase.js",
    "client/js/client/pluginmanager.js",
    "client/js/client.js",
    "common/executor/ExecutorClient.js",
    "../utils/build/empty/empty.js",
    "common/util/util.js",
    "client/js/Utils/ComponentSettings.js",
    "client/js/Utils/InterpreterManager.js",
    "../teststorage/teststorage.js",
    "../utils/build/webgme.classes/webgme.classes.js"
  ],
  "names": [],
  "mappingsjvfhIA,ADiIA;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjgrKA,ADsKA;ACrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7QA,AD8QA;AC7QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzHA,AD0HA;ACzxgraA,ADsaA;ACraA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA,ADgEA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrglrTA,ADsTA;ACrvGA;AACA;AACA;AACA;AACA;AACA;ACLA,ADMA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA,ADuCA;ACtl2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA,ADwCA;ACvjvBA,ADkvBA;ACjvldA,ADmdA;ACldprrCA,ADsrCA;ACrrxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClxBA,AD6xBA;AC5xgvghr0BA,ADs0BA;ACrrPA,ADsPA;ACrtsCA,ADusCA;ACtspxPA,ADyPA;ACxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA,ADqBA;ACptegDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA,ADyDA;ACxtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA,ADmGA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnSA,ADoSA;ACnvgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA,ADwBA;ACvtlBA,ADulBA;ACtltDA,ADuDA;ACtvpHA,ADqHA;ACpnWA,ADoWA;ACnxhgjHA,ADkHA;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACphBriBtgDA,AjBugDA;AiBtgl
  "sourcesContent": [
    "/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.1.20 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/requirejs for details\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.1.20',\n        commentRegExp = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        ap = Array.prototype,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttp://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                each(globalDefQueue, function(queueItem) {\n                    var id = queueItem[0];\n                    if (typeof id === 'string') {\n                        context.defQueueMap[id] = true;\n                    }\n                    defQueue.push(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    // Only fetch if not already in the defQueue.\n                    if (!hasProp(context.defQueueMap, id)) {\n                        this.fetch();\n                    }\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                req.onResourceLoad(context, this.map, this.depMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n            context.defQueueMap = {};\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            defQueueMap: {},\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n                        delete context.defQueueMap[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n                context.defQueueMap = {};\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs ? url +\n                                        ((url.indexOf('?') === -1 ? '?' : '&') +\n                                         config.urlArgs) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/jrburke/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/jrburke/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation that a build has been done so that\n                //only one script needs to be loaded anyway. This may need to be\n                //reevaluated if other use cases become common.\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one.\n                if (!cfg.baseUrl) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, '')\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        if (context) {\n            context.defQueue.push([name, deps, callback]);\n            context.defQueueMap[name] = true;\n        } else {\n            globalDefQueue.push([name, deps, callback]);\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this));\n\ndefine(\"../node_modules/requirejs/require\", function(){});\n\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('debug',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.debug = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n},{\"ms\":2}],2:[function(require,module,exports){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n},{}],3:[function(require,module,exports){\n\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Use chrome.storage.local if we are in an app\n */\n\nvar storage;\n\nif (typeof chrome !== 'undefined' && typeof chrome.storage !== 'undefined')\n  storage = chrome.storage.local;\nelse\n  storage = localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      storage.removeItem('debug');\n    } else {\n      storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n},{\"./debug\":1}]},{},[3])(3)\n});\n",
    "/*globals define, debug*/\n/*jshint node:true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('js/logger',['debug'], function (_debug) {\n    'use strict';\n    // Separate namespaces using ',' a leading '-' will disable the namespace.\n    // Each part takes a regex.\n    //      ex: localStorage.debug = '*,-socket\\.io*,-engine\\.io*'\n    //      will log all but socket.io and engine.io\n    function createLogger(name, options) {\n        var log = typeof debug === 'undefined' ? _debug(name) : debug(name),\n            level,\n            levels = {\n                silly: 0,\n                input: 1,\n                verbose: 2,\n                prompt: 3,\n                debug: 4,\n                info: 5,\n                data: 6,\n                help: 7,\n                warn: 8,\n                error: 9\n            };\n        if (!options) {\n            throw new Error('options required in logger');\n        }\n        if (options.hasOwnProperty('level') === false) {\n            throw new Error('options.level required in logger');\n        }\n        level = levels[options.level];\n        if (typeof level === 'undefined') {\n            level = levels.info;\n        }\n\n        log.debug = function () {\n            if (log.enabled && level <= levels.debug) {\n                if (console.debug) {\n                    log.log = console.debug.bind(console);\n                } else {\n                    log.log = console.log.bind(console);\n                }\n                log.apply(this, arguments);\n            }\n        };\n        log.info = function () {\n            if (log.enabled && level <= levels.info) {\n                log.log = console.info.bind(console);\n                log.apply(this, arguments);\n            }\n        };\n        log.warn = function () {\n            if (log.enabled && level <= levels.warn) {\n                log.log = console.warn.bind(console);\n                log.apply(this, arguments);\n            }\n        };\n        log.error = function () {\n            if (log.enabled && level <= levels.error) {\n                log.log = console.error.bind(console);\n                log.apply(this, arguments);\n            } else {\n                console.error.apply(console, arguments);\n            }\n        };\n\n        log.fork = function (forkName, useForkName) {\n            forkName = useForkName ? forkName : name + ':' + forkName;\n            return createLogger(forkName, options);\n        };\n\n        log.forkWithOptions = function (_name, _options) {\n            return createLogger(_name, _options);\n        };\n\n        return log;\n    }\n\n    function createWithGmeConfig(name, gmeConfig) {\n        return createLogger(name, gmeConfig.client.log);\n    }\n\n    return {\n        create: createLogger,\n        createWithGmeConfig: createWithGmeConfig\n    };\n});\n",
    "/*globals define*/\n/*jshint node:true, browser: true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @module Storage\n */\n\n/**\n * @typedef {string} CommitHash - Unique SHA-1 hash for commit object.\n * @example\n * '#5496cf226542fcceccf89056f0d27564abc88c99'\n */\n\n/**\n * @typedef {object} CommitResult\n * @prop {module:Storage~CommitHash} hash - The commitHash for the commit.\n * @prop {string} status - 'SYNCED', 'FORKED', 'CANCELED', undefined\n *\n * @example\n * {\n *   status: 'SYNCED',\n *   hash: '#someHash'\n * }\n * @example\n * {\n *   hash: '<hash from makeCommit with no branch provided>'\n * }\n */\n\n/**\n * @typedef {object} CommitObject\n * @prop {module:Storage~CommitHash} _id - Hash of the commit object, a.k.a commitHash.\n * @prop {module:Core~ObjectHash} root - Hash of the associated root object, a.k.a. rootHash.\n * @prop {module:Storage~CommitHash[]} parents - Commits from where this commit evolved.\n * @prop {number} time - When the commit object was created (new Date()).getTime().\n * @prop {string} message - Commit message.\n * @prop {string[]} updater - Commit message.\n * @prop {string} type - 'commit'\n *\n * @example\n * {\n *   _id: '#5496cf226542fcceccf89056f0d27564abc88c99',\n *   root: '#04009ecd1e68117cd3e9d39c87aadd9ed1ee5cb3',\n *   parents: ['#87d9fd309ec6a5d84776d7731ce1f1ab2790aac2']\n *   updater: ['guest'],\n *   time: 1430169614741,\n *   message: \"createChildren({\\\"/1008889918/1998840078\\\":\\\"/1182870936/737997118/1736829087/1966323860\\\"})\",\n *   type: 'commit'\n * }\n */\n\n/**\n * @typedef {object} PatchObject\n * @prop {module:Core~ObjectHash} _id - Hash of the expected result object.\n * @prop {module:Core~ObjectHash} base - Hash of the base object where the patch should be applied.\n * @prop {string} type - 'patch'.\n * @prop {object} patch - The patch instructions (based on [RFC6902]{@link http://tools.ietf.org/html/rfc6902}).\n *\n * @example\n * {\n *   _id: '#5496cf226542fcceccf89056f0d27564abc88c99',\n *   base: '#04009ecd1e68117cd3e9d39c87aadd9ed1ee5cb3',\n *   type: 'patch',\n *   patch: [{op: 'add', path: '/atr/new', value: 'value'}]\n * }\n */\n\ndefine('common/storage/constants',[], function () {\n    'use strict';\n\n    return {\n        //Version\n        VERSION: '1.0.0',\n        // Database related\n        MONGO_ID: '_id',\n        PROJECT_INFO_ID: '*info*',\n        EMPTY_PROJECT_DATA: 'empty',\n        PROJECT_ID_SEP: '+',\n        PROJECT_DISPLAYED_NAME_SEP: '/',\n\n        // Socket IO\n        DATABASE_ROOM: 'database',\n        ROOM_DIVIDER: '%',\n        CONNECTED: 'CONNECTED',\n        DISCONNECTED: 'DISCONNECTED',\n        RECONNECTED: 'RECONNECTED',\n        INCOMPATIBLE_CONNECTION: 'INCOMPATIBLE_CONNECTION',\n        CONNECTION_ERROR: 'CONNECTION_ERROR',\n\n        // Branch commit status - this is the status returned after setting the hash of a branch\n        SYNCED: 'SYNCED', // The commitData was inserted in the database and the branchHash updated.\n        FORKED: 'FORKED', // The commitData was inserted in the database, but the branchHash NOT updated.\n        CANCELED: 'CANCELED', // The commitData was never inserted to the database.\n        MERGED: 'MERGED', // The commit was initially forked, but successfully merged.\n\n        BRANCH_STATUS: {\n            SYNC: 'SYNC',\n            AHEAD_SYNC: 'AHEAD_SYNC',\n            AHEAD_NOT_SYNC: 'AHEAD_NOT_SYNC',\n            PULLING: 'PULLING',\n            MERGING: 'MERGING',\n            ERROR: 'ERROR'\n        },\n\n        // Events\n        JWT_ABOUT_TO_EXPIRE: 'JWT_ABOUT_TO_EXPIRE',\n        JWT_EXPIRED: 'JWT_EXPIRED',\n\n        PROJECT_DELETED: 'PROJECT_DELETED',\n        PROJECT_CREATED: 'PROJECT_CREATED',\n\n        BRANCH_DELETED: 'BRANCH_DELETED',\n        BRANCH_CREATED: 'BRANCH_CREATED',\n        BRANCH_HASH_UPDATED: 'BRANCH_HASH_UPDATED',\n        TAG_DELETED: 'TAG_DELETED',\n        TAG_CREATED: 'TAG_CREATED',\n        COMMIT: 'COMMIT',\n\n        BRANCH_UPDATED: 'BRANCH_UPDATED',\n\n        NOTIFICATION: 'NOTIFICATION',\n        // Types of notifications\n        BRANCH_ROOM_SOCKETS: 'BRANCH_ROOM_SOCKETS',\n        PLUGIN_NOTIFICATION: 'PLUGIN_NOTIFICATION',\n        ADD_ON_NOTIFICATION: 'ADD_ON_NOTIFICATION',\n        CLIENT_STATE_NOTIFICATION: 'CLIENT_STATE_NOTIFICATION'\n    };\n});\n\n",
    "// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define('q',definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n * Provides watching-functionality of the database and specific projects.\n * Keeps a state of the registered watchers.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/storageclasses/watchers',['common/storage/constants', 'q'], function (CONSTANTS, Q) {\n    'use strict';\n\n    function StorageWatcher(webSocket, logger, gmeConfig) {\n        // watcher counters determining when to join/leave a room on the sever\n        this.watchers = {\n            database: 0,\n            projects: {}\n        };\n        this.webSocket = webSocket;\n        this.logger = this.logger || logger.fork('storage');\n        this.gmeConfig = gmeConfig;\n        this.logger.debug('StorageWatcher ctor');\n        this.connected = false;\n    }\n\n    StorageWatcher.prototype.watchDatabase = function (eventHandler, callback) {\n        var deferred = Q.defer();\n        this.logger.debug('watchDatabase - handler added');\n        this.webSocket.addEventListener(CONSTANTS.PROJECT_DELETED, eventHandler);\n        this.webSocket.addEventListener(CONSTANTS.PROJECT_CREATED, eventHandler);\n        this.watchers.database += 1;\n        this.logger.debug('Nbr of database watchers:', this.watchers.database);\n\n        if (this.watchers.database === 1) {\n            this.logger.debug('First watcher will enter database room.');\n            this.webSocket.watchDatabase({join: true}, function (err) {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    deferred.resolve();\n                }\n            });\n        } else {\n            deferred.resolve();\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    StorageWatcher.prototype.unwatchDatabase = function (eventHandler, callback) {\n        var deferred = Q.defer();\n\n        this.logger.debug('unwatchDatabase - handler will be removed');\n        this.logger.debug('Nbr of database watchers (before removal):', this.watchers.database);\n        this.webSocket.removeEventListener(CONSTANTS.PROJECT_DELETED, eventHandler);\n        this.webSocket.removeEventListener(CONSTANTS.PROJECT_CREATED, eventHandler);\n        this.watchers.database -= 1;\n\n        if (this.watchers.database === 0) {\n            this.logger.debug('No more watchers will exit database room.');\n            if (this.connected) {\n                this.webSocket.watchDatabase({join: false}, function (err) {\n                    if (err) {\n                        deferred.reject(err);\n                    } else {\n                        deferred.resolve();\n                    }\n                });\n            } else {\n                deferred.resolve();\n            }\n        } else if (this.watchers.database < 0) {\n            this.logger.error('Number of database watchers became negative!');\n            deferred.reject(new Error('Number of database watchers became negative!'));\n        } else {\n            deferred.resolve();\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    StorageWatcher.prototype.watchProject = function (projectId, eventHandler, callback) {\n        var deferred = Q.defer();\n\n        this.logger.debug('watchProject - handler added for project', projectId);\n        this.webSocket.addEventListener(CONSTANTS.BRANCH_DELETED + projectId, eventHandler);\n        this.webSocket.addEventListener(CONSTANTS.BRANCH_CREATED + projectId, eventHandler);\n        this.webSocket.addEventListener(CONSTANTS.BRANCH_HASH_UPDATED + projectId, eventHandler);\n\n        this.watchers.projects[projectId] = this.watchers.projects.hasOwnProperty(projectId) ?\n        this.watchers.projects[projectId] + 1 : 1;\n        this.logger.debug('Nbr of watchers for project:', projectId, this.watchers.projects[projectId]);\n        if (this.watchers.projects[projectId] === 1) {\n            this.logger.debug('First watcher will enter project room:', projectId);\n            this.webSocket.watchProject({projectId: projectId, join: true}, function (err) {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    deferred.resolve();\n                }\n            });\n        } else {\n            deferred.resolve();\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    StorageWatcher.prototype.unwatchProject = function (projectId, eventHandler, callback) {\n        var deferred = Q.defer();\n\n        this.logger.debug('unwatchProject - handler will be removed', projectId);\n        this.logger.debug('Nbr of database watchers (before removal):', projectId,\n            this.watchers.projects[projectId]);\n        this.webSocket.removeEventListener(CONSTANTS.BRANCH_DELETED + projectId, eventHandler);\n        this.webSocket.removeEventListener(CONSTANTS.BRANCH_CREATED + projectId, eventHandler);\n        this.webSocket.removeEventListener(CONSTANTS.BRANCH_HASH_UPDATED + projectId, eventHandler);\n\n        this.watchers.projects[projectId] = this.watchers.projects.hasOwnProperty(projectId) ?\n        this.watchers.projects[projectId] - 1 : -1;\n        if (this.watchers.projects[projectId] === 0) {\n            this.logger.debug('No more watchers will exit project room:', projectId);\n            delete this.watchers.projects[projectId];\n            if (this.connected) {\n                this.webSocket.watchProject({projectId: projectId, join: false}, function (err) {\n                    if (err) {\n                        deferred.reject(err);\n                    } else {\n                        deferred.resolve();\n                    }\n                });\n            } else {\n                deferred.resolve();\n            }\n        } else if (this.watchers.projects[projectId] < 0) {\n            this.logger.error('Number of project watchers became negative!:', projectId);\n            deferred.reject(new Error('Number of project watchers became negative!'));\n        } else {\n            deferred.resolve();\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    StorageWatcher.prototype._rejoinWatcherRooms = function (callback) {\n        var projectId,\n            promises = [];\n\n        this.logger.debug('rejoinWatcherRooms');\n        if (this.watchers.database > 0) {\n            this.logger.debug('Rejoining database room.');\n            promises.push(Q.ninvoke(this.webSocket, 'watchDatabase', {join: true}));\n        }\n\n        for (projectId in this.watchers.projects) {\n            if (this.watchers.projects.hasOwnProperty(projectId) && this.watchers.projects[projectId] > 0) {\n                this.logger.debug('Rejoining project room', projectId, this.watchers.projects[projectId]);\n                promises.push(Q.ninvoke(this.webSocket, 'watchProject', {projectId: projectId, join: true}));\n            }\n        }\n\n        return Q.all(promises).nodeify(callback);\n    };\n\n    return StorageWatcher;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n * TODO: Come up with an appropriate name for this.\n * TODO: Proper implementation needed, e.g. error handling.\n *\n * Provides REST-like functionality of the database.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/storageclasses/simpleapi',['common/storage/storageclasses/watchers'], function (StorageWatcher) {\n    'use strict';\n\n    /**\n     *\n     * @param webSocket\n     * @param logger\n     * @param gmeConfig\n     * @constructor\n     * @class\n     */\n    function StorageSimpleAPI(webSocket, logger, gmeConfig) {\n        // watcher counters determining when to join/leave a room on the sever\n        this.logger = this.logger || logger.fork('storage');\n        StorageWatcher.call(this, webSocket, logger, gmeConfig);\n        this.webSocket = webSocket;\n        this.gmeConfig = gmeConfig;\n        this.logger.debug('StorageSimpleAPI ctor');\n    }\n\n    StorageSimpleAPI.prototype = Object.create(StorageWatcher.prototype);\n    StorageSimpleAPI.prototype.constructor = StorageSimpleAPI;\n\n    /**\n     * Callback for getProjects.\n     *\n     * @callback StorageSimpleAPI~getProjectsCallback\n     * @param {string} err - error string.\n     * @param {{object[]} projects - All projects in the database.\n     * @example\n     * // projects is of the form\n     * // [{ name: 'projectId', read: true, write: false, delete: false} ]\n     */\n\n    /**\n     * Retrieves all the access info for all projects.\n     *\n     * @param {StorageSimpleAPI~getProjectsCallback} callback\n     */\n    StorageSimpleAPI.prototype.getProjects = function (options, callback) {\n        this.logger.debug('invoking getProjects', {metadata: options});\n        this.webSocket.getProjects(options, callback);\n    };\n\n    /**\n     * Callback for getProjectsAndBranches.\n     *\n     * @callback StorageSimpleAPI~getProjectsAndBranches\n     * @param {string} err - error string.\n     * @param {{object[]} projectsWithBranches - Projects the user has at least read-access to.\n     * @example\n     * // projectsWithBranches is of the form\n     * // [{\n     * //    name: 'projectId',\n     * //    read: true, //will always be true\n     * //    write: false,\n     * //    delete: false\n     * //    branches: {\n     * //      master: '#validHash',\n     * //      b1: '#validHashtoo'\n     * //    }\n     * // }]\n     */\n\n\n    StorageSimpleAPI.prototype.getBranches = function (projectId, callback) {\n        var data = {\n            projectId: projectId\n        };\n        this.logger.debug('invoking getBranches', {metadata: data});\n        this.webSocket.getBranches(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.getCommits = function (projectId, before, number, callback) {\n        var data = {\n            projectId: projectId,\n            before: before,\n            number: number\n        };\n        this.logger.debug('invoking getCommits', {metadata: data});\n        this.webSocket.getCommits(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.getHistory = function (projectId, start, number, callback) {\n        var data = {\n            projectId: projectId,\n            start: start,\n            number: number\n        };\n        this.logger.debug('invoking getHistory', {metadata: data});\n        this.webSocket.getHistory(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.getTags = function (projectId, callback) {\n        var data = {\n            projectId: projectId\n        };\n        this.logger.debug('invoking getTags', {metadata: data});\n        this.webSocket.getTags(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.getBranchHash = function (projectId, branchName, callback) {\n        var data = {\n            projectId: projectId,\n            branchName: branchName\n        };\n        this.logger.debug('invoking getBranchHash', {metadata: data});\n        this.webSocket.getBranchHash(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.getLatestCommitData = function (projectId, branchName, callback) {\n        var data = {\n            projectId: projectId,\n            branchName: branchName\n        };\n        this.logger.debug('invoking getLatestCommitData', {metadata: data});\n        this.webSocket.getLatestCommitData(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.getCommonAncestorCommit = function (projectId, commitA, commitB, callback) {\n        var data = {\n            commitA: commitA,\n            commitB: commitB,\n            projectId: projectId\n        };\n        this.logger.debug('invoking getCommonAncestorCommit', {metadata: data});\n        this.webSocket.getCommonAncestorCommit(data, callback);\n    };\n\n    // Setters\n    StorageSimpleAPI.prototype.createProject = function (projectName, ownerId, callback) {\n        var self = this,\n            data = {\n                projectName: projectName,\n                ownerId: ownerId\n            };\n\n        if (callback === undefined && typeof ownerId === 'function') {\n            callback = ownerId;\n            data.ownerId = undefined;\n        }\n\n        this.logger.debug('invoking createProject', {metadata: data});\n\n        this.webSocket.createProject(data, function (err, projectId) {\n            if (err) {\n                self.logger.error('cannot create project ', projectName, err);\n                callback(err);\n                return;\n            }\n            self.logger.debug('Project created, projectId', projectId);\n\n            callback(err, projectId);\n        });\n    };\n\n    StorageSimpleAPI.prototype.deleteProject = function (projectId, callback) {\n        var data = {\n            projectId: projectId\n        };\n        this.logger.debug('invoking deleteProject', {metadata: data});\n        this.webSocket.deleteProject(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.transferProject = function (projectId, newOwnerId, callback) {\n        var data = {\n            projectId: projectId,\n            newOwnerId: newOwnerId\n        };\n        this.logger.debug('invoking transferProject', {metadata: data});\n        this.webSocket.transferProject(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.duplicateProject = function (projectId, projectName, ownerId, callback) {\n        var data = {\n            projectId: projectId,\n            projectName: projectName,\n            ownerId: ownerId\n        };\n\n        if (callback === undefined && typeof ownerId === 'function') {\n            callback = ownerId;\n            data.ownerId = undefined;\n        }\n\n        this.logger.debug('invoking duplicateProject', {metadata: data});\n        this.webSocket.duplicateProject(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.setBranchHash = function (projectId, branchName, newHash, oldHash, callback) {\n        var data = {\n            projectId: projectId,\n            branchName: branchName,\n            newHash: newHash,\n            oldHash: oldHash\n        };\n        this.logger.debug('invoking setBranchHash', {metadata: data});\n        this.webSocket.setBranchHash(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.createBranch = function (projectId, branchName, newHash, callback) {\n        var data = {\n            projectId: projectId,\n            branchName: branchName,\n            newHash: newHash,\n            oldHash: ''\n        };\n        this.logger.debug('invoking createBranch', {metadata: data});\n        this.webSocket.setBranchHash(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.deleteBranch = function (projectId, branchName, oldHash, callback) {\n        var data = {\n            projectId: projectId,\n            branchName: branchName,\n            newHash: '',\n            oldHash: oldHash\n        };\n        this.logger.debug('invoking deleteBranch', {metadata: data});\n        this.webSocket.setBranchHash(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.createTag = function (projectId, tagName, commitHash, callback) {\n        var data = {\n            projectId: projectId,\n            tagName: tagName,\n            commitHash: commitHash\n        };\n        this.logger.debug('invoking createTag', {metadata: data});\n        this.webSocket.createTag(data, callback);\n    };\n\n    StorageSimpleAPI.prototype.deleteTag = function (projectId, tagName, callback) {\n        var data = {\n            projectId: projectId,\n            tagName: tagName\n        };\n        this.logger.debug('invoking deleteTag', {metadata: data});\n        this.webSocket.deleteTag(data, callback);\n    };\n\n    //temporary simple request and result functions\n    StorageSimpleAPI.prototype.simpleRequest = function (parameters, callback) {\n        this.logger.debug('invoking simpleRequest', {metadata: parameters});\n        this.webSocket.simpleRequest(parameters, callback);\n    };\n\n    StorageSimpleAPI.prototype.simpleQuery = function (workerId, parameters, callback) {\n        this.logger.debug('invoking simpleQuery; workerId, parameters', workerId, {metadata: parameters});\n        this.webSocket.simpleQuery(workerId, parameters, callback);\n    };\n\n    StorageSimpleAPI.prototype.sendNotification = function (data, callback) {\n        this.logger.debug('invoking sendNotification; ', {metadata: data});\n        this.webSocket.sendNotification(data, callback);\n    };\n\n    return StorageSimpleAPI;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n * Provides functionality (used by the project-cache) for loading objects.\n *\n * To avoid multiple round-trips to the server the loadObject requests are put in a bucket\n * that is loaded when the bucket is full (gmeConfig.storage.loadBucketSize) or when a\n * timeout is triggered (gmeConfig.storage.loadBucketTimer).\n *\n * N.B. when used directly, the user need to make sure that the same object (by hash) is not loaded within in the\n * same bucket, (see the project-cache for example).\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/storageclasses/objectloaders',['common/storage/storageclasses/simpleapi'], function (SimpleAPI) {\n    'use strict';\n\n    function StorageObjectLoaders(webSocket, logger, gmeConfig) {\n        // watcher counters determining when to join/leave a room on the sever\n        this.logger = this.logger || logger.fork('storage');\n        SimpleAPI.call(this, webSocket, logger, gmeConfig);\n        this.webSocket = webSocket;\n        this.gmeConfig = gmeConfig;\n        // Bucket for loading objects\n        this.loadBucket = [];\n        this.loadBucketSize = 0;\n        this.loadBucketTimer = null;\n        this.logger.debug('StorageObjectLoaders ctor');\n    }\n\n    StorageObjectLoaders.prototype = Object.create(SimpleAPI.prototype);\n    StorageObjectLoaders.prototype.constructor = StorageObjectLoaders;\n\n    // Getters\n    StorageObjectLoaders.prototype.loadObject = function (projectId, hash, callback) {\n        var self = this;\n        this.logger.debug('loadObject', projectId, hash);\n\n        self.loadBucket.push({projectId: projectId, hash: hash, cb: callback});\n        self.loadBucketSize += 1;\n\n        function resetBucketAndLoadObjects() {\n            var myBucket = self.loadBucket;\n            self.loadBucket = [];\n            self.loadBucketTimer = null;\n            self.loadBucketSize = 0;\n            self.loadObjects(projectId, myBucket);\n        }\n\n        if (self.loadBucketSize === 1) {\n            self.logger.debug('loadBucket was empty starting timer [ms]', self.gmeConfig.storage.loadBucketTimer);\n            self.loadBucketTimer = setTimeout(function () {\n                self.logger.debug('loadBucketTimer triggered, bucketSize:', self.loadBucketSize);\n                resetBucketAndLoadObjects();\n            }, self.gmeConfig.storage.loadBucketTimer);\n        }\n\n        if (self.loadBucketSize === self.gmeConfig.storage.loadBucketSize) {\n            self.logger.debug('loadBuckSize reached will loadObjects, bucketSize:', self.loadBucketSize);\n            clearTimeout(self.loadBucketTimer);\n            resetBucketAndLoadObjects();\n        }\n    };\n\n    StorageObjectLoaders.prototype.loadObjects = function (projectId, hashedObjects) {\n        var self = this,\n            hashes = {},\n            data,\n            i;\n        for (i = 0; i < hashedObjects.length; i++) {\n            hashes[hashedObjects[i].hash] = true;\n        }\n        hashes = Object.keys(hashes);\n        data = {\n            hashes: hashes,\n            projectId: projectId\n        };\n\n        this.webSocket.loadObjects(data, function (err, result) {\n            //if (err) {\n            //    throw new Error(err);\n            //}\n            self.logger.debug('loadObjects returned', {metadata: result});\n            for (i = 0; i < hashedObjects.length; i++) {\n                if (err) {\n                    hashedObjects[i].cb(err);\n                } else if (typeof result[hashedObjects[i].hash] === 'string') {\n                    self.logger.error(result[hashedObjects[i].hash]);\n                    hashedObjects[i].cb(new Error(result[hashedObjects[i].hash]));\n                } else {\n                    hashedObjects[i].cb(err, result[hashedObjects[i].hash]);\n                }\n            }\n        });\n    };\n\n    StorageObjectLoaders.prototype.loadPaths = function (projectId, pathsInfo, excludes, callback) {\n        var data = {\n            projectId: projectId,\n            pathsInfo: pathsInfo,\n            excludes: excludes\n        };\n\n        this.webSocket.loadPaths(data, callback);\n    };\n\n    return StorageObjectLoaders;\n});\n\n",
    "/*globals define*/\r\n/*jshint node: true, browser: true*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\n\r\ndefine('common/util/assert',[],function () {\r\n    'use strict';\r\n\r\n    var assert = function (cond, msg) {\r\n        if (!cond) {\r\n            var error = new Error(msg || 'ASSERT failed');\r\n\r\n            if (typeof TESTING === 'undefined') {\r\n                console.log('Throwing', error.stack);\r\n                console.log();\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return assert;\r\n});\r\n\n",
    "//jshint ignore: start\n/* 2012 David Chambers <dc@hashify.me>  */\ndefine('common/util/canon',[], function() {\n    var CANON = {},\n        keys, map, nativeMap, pad,\n        __slice = [].slice,\n        __hasProp = {}.hasOwnProperty;\n\n\n    CANON.stringify = (function() {\n        var canonicalize;\n        canonicalize = function(value) {\n            var pair, _ref;\n            switch (Object.prototype.toString.call(value)) {\n                case '[object Array]':\n                    return ['Array'].concat(__slice.call(map(value, canonicalize)));\n                case '[object Date]':\n                    return ['Date'].concat(isFinite(+value) ? value.getUTCFullYear() + '-' + pad(value.getUTCMonth() + 1) + '-' + pad(value.getUTCDate()) + 'T' + pad(value.getUTCHours()) + ':' + pad(value.getUTCMinutes()) + ':' + pad(value.getUTCSeconds()) + '.' + pad(value.getUTCMilliseconds(), 3) + 'Z' : null);\n                case '[object Function]':\n                    throw new TypeError('functions cannot be serialized');\n                    break;\n                case '[object Number]':\n                    if (isFinite(value)) {\n                        return value;\n                    } else {\n                        return ['Number', \"\" + value];\n                    }\n                    break;\n                case '[object Object]':\n                    pair = function(key) {\n                        return [key, canonicalize(value[key])];\n                    };\n                    return (_ref = ['Object']).concat.apply(_ref, map(keys(value).sort(), pair));\n                case '[object RegExp]':\n                    return ['RegExp', \"\" + value];\n                case '[object Undefined]':\n                    return ['Undefined'];\n                default:\n                    return value;\n            }\n        };\n        return function(value) {\n            return JSON.stringify(canonicalize(value));\n        };\n    })();\n\n    CANON.parse = (function() {\n        var canonicalize;\n        canonicalize = function(value) {\n            var element, elements, idx, object, what, _i, _ref;\n            if (Object.prototype.toString.call(value) !== '[object Array]') {\n                return value;\n            }\n            what = value[0], elements = 2 <= value.length ? __slice.call(value, 1) : [];\n            element = elements[0];\n            switch (what) {\n                case 'Array':\n                    return map(elements, canonicalize);\n                case 'Date':\n                    return new Date(element);\n                case 'Number':\n                    return +element;\n                case 'Object':\n                    object = {};\n                    for (idx = _i = 0, _ref = elements.length; _i < _ref; idx = _i += 2) {\n                        object[elements[idx]] = canonicalize(elements[idx + 1]);\n                    }\n                    return object;\n                case 'RegExp':\n                    return (function(func, args, ctor) {\n                        ctor.prototype = func.prototype;\n                        var child = new ctor, result = func.apply(child, args);\n                        return Object(result) === result ? result : child;\n                    })(RegExp, /^[/](.+)[/]([gimy]*)$/.exec(element).slice(1), function(){});\n                case 'Undefined':\n                    return void 0;\n                default:\n                    throw new Error('invalid input');\n            }\n        };\n        return function(string) {\n            return canonicalize(JSON.parse(string));\n        };\n    })();\n\n    nativeMap = Array.prototype.map;\n\n    map = function(array, iterator) {\n        var el, _i, _len, _results;\n        if (nativeMap && array.map === nativeMap) {\n            return array.map(iterator);\n        } else {\n            _results = [];\n            for (_i = 0, _len = array.length; _i < _len; _i++) {\n                el = array[_i];\n                _results.push(iterator(el));\n            }\n            return _results;\n        }\n    };\n\n    keys = Object.keys || function(object) {\n        var key, _results;\n        _results = [];\n        for (key in object) {\n            if (!__hasProp.call(object, key)) continue;\n            _results.push(key);\n        }\n        return _results;\n    };\n\n    pad = function(n, min) {\n        if (min == null) {\n            min = 2;\n        }\n        return (\"\" + (1000 + n)).substr(4 - min);\n    };\n\n    return CANON;\n\n});\n\n",
    "//  Chance.js 1.0.3\n//  http://chancejs.com\n//  (c) 2013 Victor Quinn\n//  Chance may be freely distributed or modified under the MIT license.\n\n(function () {\n\n    // Constants\n    var MAX_INT = 9007199254740992;\n    var MIN_INT = -MAX_INT;\n    var NUMBERS = '0123456789';\n    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';\n    var CHARS_UPPER = CHARS_LOWER.toUpperCase();\n    var HEX_POOL  = NUMBERS + \"abcdef\";\n\n    // Cached array helpers\n    var slice = Array.prototype.slice;\n\n    // Constructor\n    function Chance (seed) {\n        if (!(this instanceof Chance)) {\n            return seed == null ? new Chance() : new Chance(seed);\n        }\n\n        // if user has provided a function, use that as the generator\n        if (typeof seed === 'function') {\n            this.random = seed;\n            return this;\n        }\n\n        if (arguments.length) {\n            // set a starting value of zero so we can add to it\n            this.seed = 0;\n        }\n\n        // otherwise, leave this.seed blank so that MT will receive a blank\n\n        for (var i = 0; i < arguments.length; i++) {\n            var seedling = 0;\n            if (Object.prototype.toString.call(arguments[i]) === '[object String]') {\n                for (var j = 0; j < arguments[i].length; j++) {\n                    // create a numeric hash for each argument, add to seedling\n                    var hash = 0;\n                    for (var k = 0; k < arguments[i].length; k++) {\n                        hash = arguments[i].charCodeAt(k) + (hash << 6) + (hash << 16) - hash;\n                    }\n                    seedling += hash;\n                }\n            } else {\n                seedling = arguments[i];\n            }\n            this.seed += (arguments.length - i) * seedling;\n        }\n\n        // If no generator function was provided, use our MT\n        this.mt = this.mersenne_twister(this.seed);\n        this.bimd5 = this.blueimp_md5();\n        this.random = function () {\n            return this.mt.random(this.seed);\n        };\n\n        return this;\n    }\n\n    Chance.prototype.VERSION = \"1.0.3\";\n\n    // Random helper functions\n    function initOptions(options, defaults) {\n        options || (options = {});\n\n        if (defaults) {\n            for (var i in defaults) {\n                if (typeof options[i] === 'undefined') {\n                    options[i] = defaults[i];\n                }\n            }\n        }\n\n        return options;\n    }\n\n    function testRange(test, errorMessage) {\n        if (test) {\n            throw new RangeError(errorMessage);\n        }\n    }\n\n    /**\n     * Encode the input string with Base64.\n     */\n    var base64 = function() {\n        throw new Error('No Base64 encoder available.');\n    };\n\n    // Select proper Base64 encoder.\n    (function determineBase64Encoder() {\n        if (typeof btoa === 'function') {\n            base64 = btoa;\n        } else if (typeof Buffer === 'function') {\n            base64 = function(input) {\n                return new Buffer(input).toString('base64');\n            };\n        }\n    })();\n\n    // -- Basics --\n\n    /**\n     *  Return a random bool, either true or false\n     *\n     *  @param {Object} [options={ likelihood: 50 }] alter the likelihood of\n     *    receiving a true or false value back.\n     *  @throws {RangeError} if the likelihood is out of bounds\n     *  @returns {Bool} either true or false\n     */\n    Chance.prototype.bool = function (options) {\n        // likelihood of success (true)\n        options = initOptions(options, {likelihood : 50});\n\n        // Note, we could get some minor perf optimizations by checking range\n        // prior to initializing defaults, but that makes code a bit messier\n        // and the check more complicated as we have to check existence of\n        // the object then existence of the key before checking constraints.\n        // Since the options initialization should be minor computationally,\n        // decision made for code cleanliness intentionally. This is mentioned\n        // here as it's the first occurrence, will not be mentioned again.\n        testRange(\n            options.likelihood < 0 || options.likelihood > 100,\n            \"Chance: Likelihood accepts values from 0 to 100.\"\n        );\n\n        return this.random() * 100 < options.likelihood;\n    };\n\n    /**\n     *  Return a random character.\n     *\n     *  @param {Object} [options={}] can specify a character pool, only alpha,\n     *    only symbols, and casing (lower or upper)\n     *  @returns {String} a single random character\n     *  @throws {RangeError} Can only specify alpha or symbols, not both\n     */\n    Chance.prototype.character = function (options) {\n        options = initOptions(options);\n        testRange(\n            options.alpha && options.symbols,\n            \"Chance: Cannot specify both alpha and symbols.\"\n        );\n\n        var symbols = \"!@#$%^&*()[]\",\n            letters, pool;\n\n        if (options.casing === 'lower') {\n            letters = CHARS_LOWER;\n        } else if (options.casing === 'upper') {\n            letters = CHARS_UPPER;\n        } else {\n            letters = CHARS_LOWER + CHARS_UPPER;\n        }\n\n        if (options.pool) {\n            pool = options.pool;\n        } else if (options.alpha) {\n            pool = letters;\n        } else if (options.symbols) {\n            pool = symbols;\n        } else {\n            pool = letters + NUMBERS + symbols;\n        }\n\n        return pool.charAt(this.natural({max: (pool.length - 1)}));\n    };\n\n    // Note, wanted to use \"float\" or \"double\" but those are both JS reserved words.\n\n    // Note, fixed means N OR LESS digits after the decimal. This because\n    // It could be 14.9000 but in JavaScript, when this is cast as a number,\n    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are\n    // needed\n    /**\n     *  Return a random floating point number\n     *\n     *  @param {Object} [options={}] can specify a fixed precision, min, max\n     *  @returns {Number} a single floating point number\n     *  @throws {RangeError} Can only specify fixed or precision, not both. Also\n     *    min cannot be greater than max\n     */\n    Chance.prototype.floating = function (options) {\n        options = initOptions(options, {fixed : 4});\n        testRange(\n            options.fixed && options.precision,\n            \"Chance: Cannot specify both fixed and precision.\"\n        );\n\n        var num;\n        var fixed = Math.pow(10, options.fixed);\n\n        var max = MAX_INT / fixed;\n        var min = -max;\n\n        testRange(\n            options.min && options.fixed && options.min < min,\n            \"Chance: Min specified is out of range with fixed. Min should be, at least, \" + min\n        );\n        testRange(\n            options.max && options.fixed && options.max > max,\n            \"Chance: Max specified is out of range with fixed. Max should be, at most, \" + max\n        );\n\n        options = initOptions(options, { min : min, max : max });\n\n        // Todo - Make this work!\n        // options.precision = (typeof options.precision !== \"undefined\") ? options.precision : false;\n\n        num = this.integer({min: options.min * fixed, max: options.max * fixed});\n        var num_fixed = (num / fixed).toFixed(options.fixed);\n\n        return parseFloat(num_fixed);\n    };\n\n    /**\n     *  Return a random integer\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.integer({min: 1, max: 3});\n     *  would return either 1, 2, or 3.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max\n     *  @returns {Number} a single random integer number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    Chance.prototype.integer = function (options) {\n        // 9007199254740992 (2^53) is the max integer number in JavaScript\n        // See: http://vq.io/132sa2j\n        options = initOptions(options, {min: MIN_INT, max: MAX_INT});\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);\n    };\n\n    /**\n     *  Return a random natural\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.natural({min: 1, max: 3});\n     *  would return either 1, 2, or 3.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max\n     *  @returns {Number} a single random integer number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    Chance.prototype.natural = function (options) {\n        options = initOptions(options, {min: 0, max: MAX_INT});\n        testRange(options.min < 0, \"Chance: Min cannot be less than zero.\");\n        return this.integer(options);\n    };\n\n    /**\n     *  Return a random string\n     *\n     *  @param {Object} [options={}] can specify a length\n     *  @returns {String} a string of random length\n     *  @throws {RangeError} length cannot be less than zero\n     */\n    Chance.prototype.string = function (options) {\n        options = initOptions(options, { length: this.natural({min: 5, max: 20}) });\n        testRange(options.length < 0, \"Chance: Length cannot be less than zero.\");\n        var length = options.length,\n            text = this.n(this.character, length, options);\n\n        return text.join(\"\");\n    };\n\n    // -- End Basics --\n\n    // -- Helpers --\n\n    Chance.prototype.capitalize = function (word) {\n        return word.charAt(0).toUpperCase() + word.substr(1);\n    };\n\n    Chance.prototype.mixin = function (obj) {\n        for (var func_name in obj) {\n            Chance.prototype[func_name] = obj[func_name];\n        }\n        return this;\n    };\n\n    /**\n     *  Given a function that generates something random and a number of items to generate,\n     *    return an array of items where none repeat.\n     *\n     *  @param {Function} fn the function that generates something random\n     *  @param {Number} num number of terms to generate\n     *  @param {Object} options any options to pass on to the generator function\n     *  @returns {Array} an array of length `num` with every item generated by `fn` and unique\n     *\n     *  There can be more parameters after these. All additional parameters are provided to the given function\n     */\n    Chance.prototype.unique = function(fn, num, options) {\n        testRange(\n            typeof fn !== \"function\",\n            \"Chance: The first argument must be a function.\"\n        );\n\n        var comparator = function(arr, val) { return arr.indexOf(val) !== -1; };\n\n        if (options) {\n            comparator = options.comparator || comparator;\n        }\n\n        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);\n\n        while (arr.length < num) {\n            var clonedParams = JSON.parse(JSON.stringify(params));\n            result = fn.apply(this, clonedParams);\n            if (!comparator(arr, result)) {\n                arr.push(result);\n                // reset count when unique found\n                count = 0;\n            }\n\n            if (++count > MAX_DUPLICATES) {\n                throw new RangeError(\"Chance: num is likely too large for sample set\");\n            }\n        }\n        return arr;\n    };\n\n    /**\n     *  Gives an array of n random terms\n     *\n     *  @param {Function} fn the function that generates something random\n     *  @param {Number} n number of terms to generate\n     *  @returns {Array} an array of length `n` with items generated by `fn`\n     *\n     *  There can be more parameters after these. All additional parameters are provided to the given function\n     */\n    Chance.prototype.n = function(fn, n) {\n        testRange(\n            typeof fn !== \"function\",\n            \"Chance: The first argument must be a function.\"\n        );\n\n        if (typeof n === 'undefined') {\n            n = 1;\n        }\n        var i = n, arr = [], params = slice.call(arguments, 2);\n\n        // Providing a negative count should result in a noop.\n        i = Math.max( 0, i );\n\n        for (null; i--; null) {\n            arr.push(fn.apply(this, params));\n        }\n\n        return arr;\n    };\n\n    // H/T to SO for this one: http://vq.io/OtUrZ5\n    Chance.prototype.pad = function (number, width, pad) {\n        // Default pad to 0 if none provided\n        pad = pad || '0';\n        // Convert number to a string\n        number = number + '';\n        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;\n    };\n\n    // DEPRECATED on 2015-10-01\n    Chance.prototype.pick = function (arr, count) {\n        if (arr.length === 0) {\n            throw new RangeError(\"Chance: Cannot pick() from an empty array\");\n        }\n        if (!count || count === 1) {\n            return arr[this.natural({max: arr.length - 1})];\n        } else {\n            return this.shuffle(arr).slice(0, count);\n        }\n    };\n\n    // Given an array, returns a single random element\n    Chance.prototype.pickone = function (arr) {\n        if (arr.length === 0) {\n          throw new RangeError(\"Chance: Cannot pickone() from an empty array\");\n        }\n        return arr[this.natural({max: arr.length - 1})];\n    };\n\n    // Given an array, returns a random set with 'count' elements\n    Chance.prototype.pickset = function (arr, count) {\n        if (count === 0) {\n            return [];\n        }\n        if (arr.length === 0) {\n            throw new RangeError(\"Chance: Cannot pickset() from an empty array\");\n        }\n        if (count < 0) {\n            throw new RangeError(\"Chance: count must be positive number\");\n        }\n        if (!count || count === 1) {\n            return [ this.pickone(arr) ];\n        } else {\n            return this.shuffle(arr).slice(0, count);\n        }\n    };\n\n    Chance.prototype.shuffle = function (arr) {\n        var old_array = arr.slice(0),\n            new_array = [],\n            j = 0,\n            length = Number(old_array.length);\n\n        for (var i = 0; i < length; i++) {\n            // Pick a random index from the array\n            j = this.natural({max: old_array.length - 1});\n            // Add it to the new array\n            new_array[i] = old_array[j];\n            // Remove that element from the original array\n            old_array.splice(j, 1);\n        }\n\n        return new_array;\n    };\n\n    // Returns a single item from an array with relative weighting of odds\n    Chance.prototype.weighted = function (arr, weights, trim) {\n        if (arr.length !== weights.length) {\n            throw new RangeError(\"Chance: length of array and weights must match\");\n        }\n\n        // scan weights array and sum valid entries\n        var sum = 0;\n        var val;\n        for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n            val = weights[weightIndex];\n            if (val > 0) {\n                sum += val;\n            }\n        }\n\n        if (sum === 0) {\n            throw new RangeError(\"Chance: no valid entries in array weights\");\n        }\n\n        // select a value within range\n        var selected = this.random() * sum;\n\n        // find array entry corresponding to selected value\n        var total = 0;\n        var lastGoodIdx = -1;\n        var chosenIdx;\n        for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n            val = weights[weightIndex];\n            total += val;\n            if (val > 0) {\n                if (selected <= total) {\n                    chosenIdx = weightIndex;\n                    break;\n                }\n                lastGoodIdx = weightIndex;\n            }\n\n            // handle any possible rounding error comparison to ensure something is picked\n            if (weightIndex === (weights.length - 1)) {\n                chosenIdx = lastGoodIdx;\n            }\n        }\n\n        var chosen = arr[chosenIdx];\n        trim = (typeof trim === 'undefined') ? false : trim;\n        if (trim) {\n            arr.splice(chosenIdx, 1);\n            weights.splice(chosenIdx, 1);\n        }\n\n        return chosen;\n    };\n\n    // -- End Helpers --\n\n    // -- Text --\n\n    Chance.prototype.paragraph = function (options) {\n        options = initOptions(options);\n\n        var sentences = options.sentences || this.natural({min: 3, max: 7}),\n            sentence_array = this.n(this.sentence, sentences);\n\n        return sentence_array.join(' ');\n    };\n\n    // Could get smarter about this than generating random words and\n    // chaining them together. Such as: http://vq.io/1a5ceOh\n    Chance.prototype.sentence = function (options) {\n        options = initOptions(options);\n\n        var words = options.words || this.natural({min: 12, max: 18}),\n            punctuation = options.punctuation,\n            text, word_array = this.n(this.word, words);\n\n        text = word_array.join(' ');\n        \n        // Capitalize first letter of sentence\n        text = this.capitalize(text);\n        \n        // Make sure punctuation has a usable value\n        if (punctuation !== false && !/^[\\.\\?;!:]$/.test(punctuation)) {\n            punctuation = '.';\n        }\n        \n        // Add punctuation mark\n        if (punctuation) {\n            text += punctuation;\n        }\n\n        return text;\n    };\n\n    Chance.prototype.syllable = function (options) {\n        options = initOptions(options);\n\n        var length = options.length || this.natural({min: 2, max: 3}),\n            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones\n            vowels = 'aeiou', // vowels\n            all = consonants + vowels, // all\n            text = '',\n            chr;\n\n        // I'm sure there's a more elegant way to do this, but this works\n        // decently well.\n        for (var i = 0; i < length; i++) {\n            if (i === 0) {\n                // First character can be anything\n                chr = this.character({pool: all});\n            } else if (consonants.indexOf(chr) === -1) {\n                // Last character was a vowel, now we want a consonant\n                chr = this.character({pool: consonants});\n            } else {\n                // Last character was a consonant, now we want a vowel\n                chr = this.character({pool: vowels});\n            }\n\n            text += chr;\n        }\n\n        if (options.capitalize) {\n            text = this.capitalize(text);\n        }\n\n        return text;\n    };\n\n    Chance.prototype.word = function (options) {\n        options = initOptions(options);\n\n        testRange(\n            options.syllables && options.length,\n            \"Chance: Cannot specify both syllables AND length.\"\n        );\n\n        var syllables = options.syllables || this.natural({min: 1, max: 3}),\n            text = '';\n\n        if (options.length) {\n            // Either bound word by length\n            do {\n                text += this.syllable();\n            } while (text.length < options.length);\n            text = text.substring(0, options.length);\n        } else {\n            // Or by number of syllables\n            for (var i = 0; i < syllables; i++) {\n                text += this.syllable();\n            }\n        }\n\n        if (options.capitalize) {\n            text = this.capitalize(text);\n        }\n\n        return text;\n    };\n\n    // -- End Text --\n\n    // -- Person --\n\n    Chance.prototype.age = function (options) {\n        options = initOptions(options);\n        var ageRange;\n\n        switch (options.type) {\n            case 'child':\n                ageRange = {min: 1, max: 12};\n                break;\n            case 'teen':\n                ageRange = {min: 13, max: 19};\n                break;\n            case 'adult':\n                ageRange = {min: 18, max: 65};\n                break;\n            case 'senior':\n                ageRange = {min: 65, max: 100};\n                break;\n            case 'all':\n                ageRange = {min: 1, max: 100};\n                break;\n            default:\n                ageRange = {min: 18, max: 65};\n                break;\n        }\n\n        return this.natural(ageRange);\n    };\n\n    Chance.prototype.birthday = function (options) {\n        options = initOptions(options, {\n            year: (new Date().getFullYear() - this.age(options))\n        });\n\n        return this.date(options);\n    };\n\n    // CPF; ID to identify taxpayers in Brazil\n    Chance.prototype.cpf = function () {\n        var n = this.n(this.natural, 9, { max: 9 });\n        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;\n        d1 = 11 - (d1 % 11);\n        if (d1>=10) {\n            d1 = 0;\n        }\n        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;\n        d2 = 11 - (d2 % 11);\n        if (d2>=10) {\n            d2 = 0;\n        }\n        return ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;\n    };\n\n    // CNPJ: ID to identify companies in Brazil\n    Chance.prototype.cnpj = function () {\n        var n = this.n(this.natural, 12, { max: 12 });\n        var d1 = n[11]*2+n[10]*3+n[9]*4+n[8]*5+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\n        d1 = 11 - (d1 % 11);\n        if (d1<2) {\n            d1 = 0;\n        }\n        var d2 = d1*2+n[11]*3+n[10]*4+n[9]*5+n[8]*6+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\n        d2 = 11 - (d2 % 11);\n        if (d2<2) {\n            d2 = 0;\n        }\n        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/'+n[8]+n[9]+n[10]+n[11]+'-'+d1+d2;\n    };\n\n    Chance.prototype.first = function (options) {\n        options = initOptions(options, {gender: this.gender(), nationality: 'en'});\n        return this.pick(this.get(\"firstNames\")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);\n    };\n\n    Chance.prototype.gender = function () {\n        return this.pick(['Male', 'Female']);\n    };\n\n    Chance.prototype.last = function (options) {\n        options = initOptions(options, {nationality: 'en'});\n        return this.pick(this.get(\"lastNames\")[options.nationality.toLowerCase()]);\n    };\n    \n    Chance.prototype.israelId=function(){\n        var x=this.string({pool: '0123456789',length:8});\n        var y=0;\n        for (var i=0;i<x.length;i++){\n            var thisDigit=  x[i] *  (i/2===parseInt(i/2) ? 1 : 2);\n            thisDigit=this.pad(thisDigit,2).toString();\n            thisDigit=parseInt(thisDigit[0]) + parseInt(thisDigit[1]);\n            y=y+thisDigit;\n        }\n        x=x+(10-parseInt(y.toString().slice(-1))).toString().slice(-1);\n        return x;\n    };\n\n    Chance.prototype.mrz = function (options) {\n        var checkDigit = function (input) {\n            var alpha = \"<ABCDEFGHIJKLMNOPQRSTUVWXYXZ\".split(''),\n                multipliers = [ 7, 3, 1 ],\n                runningTotal = 0;\n\n            if (typeof input !== 'string') {\n                input = input.toString();\n            }\n\n            input.split('').forEach(function(character, idx) {\n                var pos = alpha.indexOf(character);\n\n                if(pos !== -1) {\n                    character = pos === 0 ? 0 : pos + 9;\n                } else {\n                    character = parseInt(character, 10);\n                }\n                character *= multipliers[idx % multipliers.length];\n                runningTotal += character;\n            });\n            return runningTotal % 10;\n        };\n        var generate = function (opts) {\n            var pad = function (length) {\n                return new Array(length + 1).join('<');\n            };\n            var number = [ 'P<',\n                           opts.issuer,\n                           opts.last.toUpperCase(),\n                           '<<',\n                           opts.first.toUpperCase(),\n                           pad(39 - (opts.last.length + opts.first.length + 2)),\n                           opts.passportNumber,\n                           checkDigit(opts.passportNumber),\n                           opts.nationality,\n                           opts.dob,\n                           checkDigit(opts.dob),\n                           opts.gender,\n                           opts.expiry,\n                           checkDigit(opts.expiry),\n                           pad(14),\n                           checkDigit(pad(14)) ].join('');\n\n            return number +\n                (checkDigit(number.substr(44, 10) +\n                            number.substr(57, 7) +\n                            number.substr(65, 7)));\n        };\n\n        var that = this;\n\n        options = initOptions(options, {\n            first: this.first(),\n            last: this.last(),\n            passportNumber: this.integer({min: 100000000, max: 999999999}),\n            dob: (function () {\n                var date = that.birthday({type: 'adult'});\n                return [date.getFullYear().toString().substr(2),\n                        that.pad(date.getMonth() + 1, 2),\n                        that.pad(date.getDate(), 2)].join('');\n            }()),\n            expiry: (function () {\n                var date = new Date();\n                return [(date.getFullYear() + 5).toString().substr(2),\n                        that.pad(date.getMonth() + 1, 2),\n                        that.pad(date.getDate(), 2)].join('');\n            }()),\n            gender: this.gender() === 'Female' ? 'F': 'M',\n            issuer: 'GBR',\n            nationality: 'GBR'\n        });\n        return generate (options);\n    };\n\n    Chance.prototype.name = function (options) {\n        options = initOptions(options);\n\n        var first = this.first(options),\n            last = this.last(options),\n            name;\n\n        if (options.middle) {\n            name = first + ' ' + this.first(options) + ' ' + last;\n        } else if (options.middle_initial) {\n            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;\n        } else {\n            name = first + ' ' + last;\n        }\n\n        if (options.prefix) {\n            name = this.prefix(options) + ' ' + name;\n        }\n\n        if (options.suffix) {\n            name = name + ' ' + this.suffix(options);\n        }\n\n        return name;\n    };\n\n    // Return the list of available name prefixes based on supplied gender.\n    // @todo introduce internationalization\n    Chance.prototype.name_prefixes = function (gender) {\n        gender = gender || \"all\";\n        gender = gender.toLowerCase();\n\n        var prefixes = [\n            { name: 'Doctor', abbreviation: 'Dr.' }\n        ];\n\n        if (gender === \"male\" || gender === \"all\") {\n            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });\n        }\n\n        if (gender === \"female\" || gender === \"all\") {\n            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });\n            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });\n        }\n\n        return prefixes;\n    };\n\n    // Alias for name_prefix\n    Chance.prototype.prefix = function (options) {\n        return this.name_prefix(options);\n    };\n\n    Chance.prototype.name_prefix = function (options) {\n        options = initOptions(options, { gender: \"all\" });\n        return options.full ?\n            this.pick(this.name_prefixes(options.gender)).name :\n            this.pick(this.name_prefixes(options.gender)).abbreviation;\n    };\n\n    Chance.prototype.ssn = function (options) {\n        options = initOptions(options, {ssnFour: false, dashes: true});\n        var ssn_pool = \"1234567890\",\n            ssn,\n            dash = options.dashes ? '-' : '';\n\n        if(!options.ssnFour) {\n            ssn = this.string({pool: ssn_pool, length: 3}) + dash +\n            this.string({pool: ssn_pool, length: 2}) + dash +\n            this.string({pool: ssn_pool, length: 4});\n        } else {\n            ssn = this.string({pool: ssn_pool, length: 4});\n        }\n        return ssn;\n    };\n\n    // Return the list of available name suffixes\n    // @todo introduce internationalization\n    Chance.prototype.name_suffixes = function () {\n        var suffixes = [\n            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },\n            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },\n            { name: 'Esquire', abbreviation: 'Esq.' },\n            { name: 'Junior', abbreviation: 'Jr.' },\n            { name: 'Juris Doctor', abbreviation: 'J.D.' },\n            { name: 'Master of Arts', abbreviation: 'M.A.' },\n            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },\n            { name: 'Master of Science', abbreviation: 'M.S.' },\n            { name: 'Medical Doctor', abbreviation: 'M.D.' },\n            { name: 'Senior', abbreviation: 'Sr.' },\n            { name: 'The Third', abbreviation: 'III' },\n            { name: 'The Fourth', abbreviation: 'IV' },\n            { name: 'Bachelor of Engineering', abbreviation: 'B.E' },\n            { name: 'Bachelor of Technology', abbreviation: 'B.TECH' }\n        ];\n        return suffixes;\n    };\n\n    // Alias for name_suffix\n    Chance.prototype.suffix = function (options) {\n        return this.name_suffix(options);\n    };\n\n    Chance.prototype.name_suffix = function (options) {\n        options = initOptions(options);\n        return options.full ?\n            this.pick(this.name_suffixes()).name :\n            this.pick(this.name_suffixes()).abbreviation;\n    };\n\n    Chance.prototype.nationalities = function () {\n        return this.get(\"nationalities\");\n    };\n\n    // Generate random nationality based on json list\n    Chance.prototype.nationality = function () {\n        var nationality = this.pick(this.nationalities());\n        return nationality.name;\n    };\n\n    // -- End Person --\n\n    // -- Mobile --\n    // Android GCM Registration ID\n    Chance.prototype.android_id = function () {\n        return \"APA91\" + this.string({ pool: \"0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\", length: 178 });\n    };\n\n    // Apple Push Token\n    Chance.prototype.apple_token = function () {\n        return this.string({ pool: \"abcdef1234567890\", length: 64 });\n    };\n\n    // Windows Phone 8 ANID2\n    Chance.prototype.wp8_anid2 = function () {\n        return base64( this.hash( { length : 32 } ) );\n    };\n\n    // Windows Phone 7 ANID\n    Chance.prototype.wp7_anid = function () {\n        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });\n    };\n\n    // BlackBerry Device PIN\n    Chance.prototype.bb_pin = function () {\n        return this.hash({ length: 8 });\n    };\n\n    // -- End Mobile --\n\n    // -- Web --\n    Chance.prototype.avatar = function (options) {\n        var url = null;\n        var URL_BASE = '//www.gravatar.com/avatar/';\n        var PROTOCOLS = {\n            http: 'http',\n            https: 'https'\n        };\n        var FILE_TYPES = {\n            bmp: 'bmp',\n            gif: 'gif',\n            jpg: 'jpg',\n            png: 'png'\n        };\n        var FALLBACKS = {\n            '404': '404', // Return 404 if not found\n            mm: 'mm', // Mystery man\n            identicon: 'identicon', // Geometric pattern based on hash\n            monsterid: 'monsterid', // A generated monster icon\n            wavatar: 'wavatar', // A generated face\n            retro: 'retro', // 8-bit icon\n            blank: 'blank' // A transparent png\n        };\n        var RATINGS = {\n            g: 'g',\n            pg: 'pg',\n            r: 'r',\n            x: 'x'\n        };\n        var opts = {\n            protocol: null,\n            email: null,\n            fileExtension: null,\n            size: null,\n            fallback: null,\n            rating: null\n        };\n\n        if (!options) {\n            // Set to a random email\n            opts.email = this.email();\n            options = {};\n        }\n        else if (typeof options === 'string') {\n            opts.email = options;\n            options = {};\n        }\n        else if (typeof options !== 'object') {\n            return null;\n        }\n        else if (options.constructor === 'Array') {\n            return null;\n        }\n\n        opts = initOptions(options, opts);\n\n        if (!opts.email) {\n            // Set to a random email\n            opts.email = this.email();\n        }\n\n        // Safe checking for params\n        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ':' : '';\n        opts.size = parseInt(opts.size, 0) ? opts.size : '';\n        opts.rating = RATINGS[opts.rating] ? opts.rating : '';\n        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : '';\n        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : '';\n\n        url =\n            opts.protocol +\n            URL_BASE +\n            this.bimd5.md5(opts.email) +\n            (opts.fileExtension ? '.' + opts.fileExtension : '') +\n            (opts.size || opts.rating || opts.fallback ? '?' : '') +\n            (opts.size ? '&s=' + opts.size.toString() : '') +\n            (opts.rating ? '&r=' + opts.rating : '') +\n            (opts.fallback ? '&d=' + opts.fallback : '')\n            ;\n\n        return url;\n    };\n\n    /**\n     * #Description:\n     * ===============================================\n     * Generate random color value base on color type:\n     * -> hex\n     * -> rgb\n     * -> rgba\n     * -> 0x\n     * -> named color\n     *\n     * #Examples: \n     * ===============================================\n     * * Geerate random hex color\n     * chance.color() => '#79c157' / 'rgb(110,52,164)' / '0x67ae0b' / '#e2e2e2' / '#29CFA7'\n     * \n     * * Generate Hex based color value\n     * chance.color({format: 'hex'})    => '#d67118'\n     *\n     * * Generate simple rgb value\n     * chance.color({format: 'rgb'})    => 'rgb(110,52,164)'\n     *\n     * * Generate Ox based color value\n     * chance.color({format: '0x'})     => '0x67ae0b' \n     *\n     * * Generate graiscale based value\n     * chance.color({grayscale: true})  => '#e2e2e2'\n     *\n     * * Return valide color name\n     * chance.color({format: 'name'})   => 'red'\n     * \n     * * Make color uppercase\n     * chance.color({casing: 'upper'})  => '#29CFA7'\n     *\n     * @param  [object] options\n     * @return [string] color value\n     */\n    Chance.prototype.color = function (options) {\n\n        function gray(value, delimiter) {\n            return [value, value, value].join(delimiter || '');\n        }\n\n        function rgb(hasAlpha) {\n\n            var rgbValue    = (hasAlpha)    ? 'rgba' : 'rgb'; \n            var alphaChanal = (hasAlpha)    ? (',' + this.floating({min:0, max:1})) : \"\";\n            var colorValue  = (isGrayscale) ? (gray(this.natural({max: 255}), ',')) : (this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.natural({max: 255}));\n\n            return rgbValue + '(' + colorValue + alphaChanal + ')';\n        }\n\n        function hex(start, end, withHash) {\n\n            var simbol = (withHash) ? \"#\" : \"\";\n            var expression  = (isGrayscale ? gray(this.hash({length: start})) : this.hash({length: end})); \n            return simbol + expression;\n        }\n\n        options = initOptions(options, {\n            format: this.pick(['hex', 'shorthex', 'rgb', 'rgba', '0x', 'name']),\n            grayscale: false,\n            casing: 'lower'\n        });\n\n        var isGrayscale = options.grayscale;\n        var colorValue;\n\n        if (options.format === 'hex') {\n            colorValue =  hex.call(this, 2, 6, true);\n        }\n        else if (options.format === 'shorthex') {\n            colorValue = hex.call(this, 1, 3, true);\n        } \n        else if (options.format === 'rgb') {\n            colorValue = rgb.call(this, false);\n        } \n        else if (options.format === 'rgba') {\n            colorValue = rgb.call(this, true);\n        } \n        else if (options.format === '0x') {\n            colorValue = '0x' + hex.call(this, 2, 6);\n        } \n        else if(options.format === 'name') {\n            return this.pick(this.get(\"colorNames\"));\n        }\n        else {\n            throw new RangeError('Invalid format provided. Please provide one of \"hex\", \"shorthex\", \"rgb\", \"rgba\", \"0x\" or \"name\".');\n        }\n\n        if (options.casing === 'upper' ) {\n            colorValue = colorValue.toUpperCase();\n        }\n\n        return colorValue;\n    };\n\n    Chance.prototype.domain = function (options) {\n        options = initOptions(options);\n        return this.word() + '.' + (options.tld || this.tld());\n    };\n\n    Chance.prototype.email = function (options) {\n        options = initOptions(options);\n        return this.word({length: options.length}) + '@' + (options.domain || this.domain());\n    };\n\n    Chance.prototype.fbid = function () {\n        return parseInt('10000' + this.natural({max: 100000000000}), 10);\n    };\n\n    Chance.prototype.google_analytics = function () {\n        var account = this.pad(this.natural({max: 999999}), 6);\n        var property = this.pad(this.natural({max: 99}), 2);\n\n        return 'UA-' + account + '-' + property;\n    };\n\n    Chance.prototype.hashtag = function () {\n        return '#' + this.word();\n    };\n\n    Chance.prototype.ip = function () {\n        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy\n        // this should probably be updated to account for that rare as it may be\n        return this.natural({min: 1, max: 254}) + '.' +\n               this.natural({max: 255}) + '.' +\n               this.natural({max: 255}) + '.' +\n               this.natural({min: 1, max: 254});\n    };\n\n    Chance.prototype.ipv6 = function () {\n        var ip_addr = this.n(this.hash, 8, {length: 4});\n\n        return ip_addr.join(\":\");\n    };\n\n    Chance.prototype.klout = function () {\n        return this.natural({min: 1, max: 99});\n    };\n\n    Chance.prototype.semver = function (options) {\n        options = initOptions(options, { include_prerelease: true });\n\n        var range = this.pickone([\"^\", \"~\", \"<\", \">\", \"<=\", \">=\", \"=\"]);\n        if (options.range) {\n            range = options.range;\n        }\n\n        var prerelease = \"\";\n        if (options.include_prerelease) {\n            prerelease = this.weighted([\"\", \"-dev\", \"-beta\", \"-alpha\"], [50, 10, 5, 1]);\n        }\n        return range + this.rpg('3d10').join('.') + prerelease;\n    };\n\n    Chance.prototype.tlds = function () {\n        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'bq', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss', 'st', 'su', 'sv', 'sx', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tp', 'tr', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug', 'uk', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'];\n    };\n\n    Chance.prototype.tld = function () {\n        return this.pick(this.tlds());\n    };\n\n    Chance.prototype.twitter = function () {\n        return '@' + this.word();\n    };\n\n    Chance.prototype.url = function (options) {\n        options = initOptions(options, { protocol: \"http\", domain: this.domain(options), domain_prefix: \"\", path: this.word(), extensions: []});\n\n        var extension = options.extensions.length > 0 ? \".\" + this.pick(options.extensions) : \"\";\n        var domain = options.domain_prefix ? options.domain_prefix + \".\" + options.domain : options.domain;\n\n        return options.protocol + \"://\" + domain + \"/\" + options.path + extension;\n    };\n\n    // -- End Web --\n\n    // -- Location --\n\n    Chance.prototype.address = function (options) {\n        options = initOptions(options);\n        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);\n    };\n\n    Chance.prototype.altitude = function (options) {\n        options = initOptions(options, {fixed: 5, min: 0, max: 8848});\n        return this.floating({\n            min: options.min,\n            max: options.max,\n            fixed: options.fixed\n        });\n    };\n\n    Chance.prototype.areacode = function (options) {\n        options = initOptions(options, {parens : true});\n        // Don't want area codes to start with 1, or have a 9 as the second digit\n        var areacode = this.natural({min: 2, max: 9}).toString() +\n                this.natural({min: 0, max: 8}).toString() +\n                this.natural({min: 0, max: 9}).toString();\n\n        return options.parens ? '(' + areacode + ')' : areacode;\n    };\n\n    Chance.prototype.city = function () {\n        return this.capitalize(this.word({syllables: 3}));\n    };\n\n    Chance.prototype.coordinates = function (options) {\n        return this.latitude(options) + ', ' + this.longitude(options);\n    };\n\n    Chance.prototype.countries = function () {\n        return this.get(\"countries\");\n    };\n\n    Chance.prototype.country = function (options) {\n        options = initOptions(options);\n        var country = this.pick(this.countries());\n        return options.full ? country.name : country.abbreviation;\n    };\n\n    Chance.prototype.depth = function (options) {\n        options = initOptions(options, {fixed: 5, min: -10994, max: 0});\n        return this.floating({\n            min: options.min,\n            max: options.max,\n            fixed: options.fixed\n        });\n    };\n\n    Chance.prototype.geohash = function (options) {\n        options = initOptions(options, { length: 7 });\n        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });\n    };\n\n    Chance.prototype.geojson = function (options) {\n        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);\n    };\n\n    Chance.prototype.latitude = function (options) {\n        options = initOptions(options, {fixed: 5, min: -90, max: 90});\n        return this.floating({min: options.min, max: options.max, fixed: options.fixed});\n    };\n\n    Chance.prototype.longitude = function (options) {\n        options = initOptions(options, {fixed: 5, min: -180, max: 180});\n        return this.floating({min: options.min, max: options.max, fixed: options.fixed});\n    };\n\n    Chance.prototype.phone = function (options) {\n        var self = this,\n            numPick,\n            ukNum = function (parts) {\n                var section = [];\n                //fills the section part of the phone number with random numbers.\n                parts.sections.forEach(function(n) {\n                    section.push(self.string({ pool: '0123456789', length: n}));\n                });\n                return parts.area + section.join(' ');\n            };\n        options = initOptions(options, {\n            formatted: true,\n            country: 'us',\n            mobile: false\n        });\n        if (!options.formatted) {\n            options.parens = false;\n        }\n        var phone;\n        switch (options.country) {\n            case 'fr':\n                if (!options.mobile) {\n                    numPick = this.pick([\n                        // Valid zone and département codes.\n                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),\n                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),\n                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),\n                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),\n                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),\n                        '09' + self.string({ pool: '0123456789', length: 8}),\n                    ]);\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\n                } else {\n                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\n                }\n                break;\n            case 'uk':\n                if (!options.mobile) {\n                    numPick = this.pick([\n                        //valid area codes of major cities/counties followed by random numbers in required format.\n                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },\n                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },\n                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },\n                        { area: '024 7', sections: [3,4] },\n                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },\n                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [5] },\n                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [5] },\n                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [5] },\n                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [5] },\n                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [5] },\n                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [5] },\n                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [5] },\n                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [5] }\n                    ]);\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');\n                } else {\n                    numPick = this.pick([\n                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },\n                        { area: '07624 ', sections: [6] }\n                    ]);\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');\n                }\n                break;\n            case 'us':\n                var areacode = this.areacode(options).toString();\n                var exchange = this.natural({ min: 2, max: 9 }).toString() +\n                    this.natural({ min: 0, max: 9 }).toString() +\n                    this.natural({ min: 0, max: 9 }).toString();\n                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}\n                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;\n        }\n        return phone;\n    };\n\n    Chance.prototype.postal = function () {\n        // Postal District\n        var pd = this.character({pool: \"XVTSRPNKLMHJGECBA\"});\n        // Forward Sortation Area (FSA)\n        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"});\n        // Local Delivery Unut (LDU)\n        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"}) + this.natural({max: 9});\n\n        return fsa + \" \" + ldu;\n    };\n\n    Chance.prototype.provinces = function (options) {\n        options = initOptions(options, { country: 'ca' });\n        return this.get(\"provinces\")[options.country.toLowerCase()];\n    };\n\n    Chance.prototype.province = function (options) {\n        return (options && options.full) ?\n            this.pick(this.provinces(options)).name :\n            this.pick(this.provinces(options)).abbreviation;\n    };\n\n    Chance.prototype.state = function (options) {\n        return (options && options.full) ?\n            this.pick(this.states(options)).name :\n            this.pick(this.states(options)).abbreviation;\n    };\n\n    Chance.prototype.states = function (options) {\n        options = initOptions(options, { country: 'us', us_states_and_dc: true } );\n\n        var states;\n\n        switch (options.country.toLowerCase()) {\n            case 'us':\n                var us_states_and_dc = this.get(\"us_states_and_dc\"),\n                    territories = this.get(\"territories\"),\n                    armed_forces = this.get(\"armed_forces\");\n\n                states = [];\n\n                if (options.us_states_and_dc) {\n                    states = states.concat(us_states_and_dc);\n                }\n                if (options.territories) {\n                    states = states.concat(territories);\n                }\n                if (options.armed_forces) {\n                    states = states.concat(armed_forces);\n                }\n                break;\n            case 'it':\n                states = this.get(\"country_regions\")[options.country.toLowerCase()];\n        }\n\n        return states;\n    };\n\n    Chance.prototype.street = function (options) {\n        options = initOptions(options, { country: 'us', syllables: 2 });\n        var     street;\n\n        switch (options.country.toLowerCase()) {\n            case 'us':\n                street = this.word({ syllables: options.syllables });\n                street = this.capitalize(street);\n                street += ' ';\n                street += options.short_suffix ?\n                    this.street_suffix(options).abbreviation :\n                    this.street_suffix(options).name;\n                break;\n            case 'it':\n                street = this.word({ syllables: options.syllables });\n                street = this.capitalize(street);\n                street = (options.short_suffix ?\n                    this.street_suffix(options).abbreviation :\n                    this.street_suffix(options).name) + \" \" + street;\n                break;\n        }\n        return street;\n    };\n\n    Chance.prototype.street_suffix = function (options) {\n        options = initOptions(options, { country: 'us' });\n        return this.pick(this.street_suffixes(options));\n    };\n\n    Chance.prototype.street_suffixes = function (options) {\n        options = initOptions(options, { country: 'us' });\n        // These are the most common suffixes.\n        return this.get(\"street_suffixes\")[options.country.toLowerCase()];\n    };\n\n    // Note: only returning US zip codes, internationalization will be a whole\n    // other beast to tackle at some point.\n    Chance.prototype.zip = function (options) {\n        var zip = this.n(this.natural, 5, {max: 9});\n\n        if (options && options.plusfour === true) {\n            zip.push('-');\n            zip = zip.concat(this.n(this.natural, 4, {max: 9}));\n        }\n\n        return zip.join(\"\");\n    };\n\n    // -- End Location --\n\n    // -- Time\n\n    Chance.prototype.ampm = function () {\n        return this.bool() ? 'am' : 'pm';\n    };\n\n    Chance.prototype.date = function (options) {\n        var date_string, date;\n\n        // If interval is specified we ignore preset\n        if(options && (options.min || options.max)) {\n            options = initOptions(options, {\n                american: true,\n                string: false\n            });\n            var min = typeof options.min !== \"undefined\" ? options.min.getTime() : 1;\n            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1\n            var max = typeof options.max !== \"undefined\" ? options.max.getTime() : 8640000000000000;\n\n            date = new Date(this.natural({min: min, max: max}));\n        } else {\n            var m = this.month({raw: true});\n            var daysInMonth = m.days;\n\n            if(options && options.month) {\n                // Mod 12 to allow months outside range of 0-11 (not encouraged, but also not prevented).\n                daysInMonth = this.get('months')[((options.month % 12) + 12) % 12].days;\n            }\n\n            options = initOptions(options, {\n                year: parseInt(this.year(), 10),\n                // Necessary to subtract 1 because Date() 0-indexes month but not day or year\n                // for some reason.\n                month: m.numeric - 1,\n                day: this.natural({min: 1, max: daysInMonth}),\n                hour: this.hour(),\n                minute: this.minute(),\n                second: this.second(),\n                millisecond: this.millisecond(),\n                american: true,\n                string: false\n            });\n\n            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);\n        }\n\n        if (options.american) {\n            // Adding 1 to the month is necessary because Date() 0-indexes\n            // months but not day for some odd reason.\n            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n        } else {\n            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n        }\n\n        return options.string ? date_string : date;\n    };\n\n    Chance.prototype.hammertime = function (options) {\n        return this.date(options).getTime();\n    };\n\n    Chance.prototype.hour = function (options) {\n        options = initOptions(options, {\n            min: options && options.twentyfour ? 0 : 1,\n            max: options && options.twentyfour ? 23 : 12\n        });\n\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\n        testRange(options.twentyfour && options.max > 23, \"Chance: Max cannot be greater than 23 for twentyfour option.\");\n        testRange(!options.twentyfour && options.max > 12, \"Chance: Max cannot be greater than 12.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        return this.natural({min: options.min, max: options.max});\n    };\n\n    Chance.prototype.millisecond = function () {\n        return this.natural({max: 999});\n    };\n\n    Chance.prototype.minute = Chance.prototype.second = function (options) {\n        options = initOptions(options, {min: 0, max: 59});\n\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\n        testRange(options.max > 59, \"Chance: Max cannot be greater than 59.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        return this.natural({min: options.min, max: options.max});\n    };\n\n    Chance.prototype.month = function (options) {\n        options = initOptions(options, {min: 1, max: 12});\n\n        testRange(options.min < 1, \"Chance: Min cannot be less than 1.\");\n        testRange(options.max > 12, \"Chance: Max cannot be greater than 12.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        var month = this.pick(this.months().slice(options.min - 1, options.max));\n        return options.raw ? month : month.name;\n    };\n\n    Chance.prototype.months = function () {\n        return this.get(\"months\");\n    };\n\n    Chance.prototype.second = function () {\n        return this.natural({max: 59});\n    };\n\n    Chance.prototype.timestamp = function () {\n        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});\n    };\n\n    Chance.prototype.weekday = function (options) {\n        options = initOptions(options, {weekday_only: false});\n        var weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n        if (!options.weekday_only) {\n            weekdays.push(\"Saturday\");\n            weekdays.push(\"Sunday\");\n        }\n        return this.pickone(weekdays);\n    };\n\n    Chance.prototype.year = function (options) {\n        // Default to current year as min if none specified\n        options = initOptions(options, {min: new Date().getFullYear()});\n\n        // Default to one century after current year as max if none specified\n        options.max = (typeof options.max !== \"undefined\") ? options.max : options.min + 100;\n\n        return this.natural(options).toString();\n    };\n\n    // -- End Time\n\n    // -- Finance --\n\n    Chance.prototype.cc = function (options) {\n        options = initOptions(options);\n\n        var type, number, to_generate;\n\n        type = (options.type) ?\n                    this.cc_type({ name: options.type, raw: true }) :\n                    this.cc_type({ raw: true });\n\n        number = type.prefix.split(\"\");\n        to_generate = type.length - type.prefix.length - 1;\n\n        // Generates n - 1 digits\n        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));\n\n        // Generates the last digit according to Luhn algorithm\n        number.push(this.luhn_calculate(number.join(\"\")));\n\n        return number.join(\"\");\n    };\n\n    Chance.prototype.cc_types = function () {\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\n        return this.get(\"cc_types\");\n    };\n\n    Chance.prototype.cc_type = function (options) {\n        options = initOptions(options);\n        var types = this.cc_types(),\n            type = null;\n\n        if (options.name) {\n            for (var i = 0; i < types.length; i++) {\n                // Accept either name or short_name to specify card type\n                if (types[i].name === options.name || types[i].short_name === options.name) {\n                    type = types[i];\n                    break;\n                }\n            }\n            if (type === null) {\n                throw new RangeError(\"Credit card type '\" + options.name + \"'' is not supported\");\n            }\n        } else {\n            type = this.pick(types);\n        }\n\n        return options.raw ? type : type.name;\n    };\n\n    //return all world currency by ISO 4217\n    Chance.prototype.currency_types = function () {\n        return this.get(\"currency_types\");\n    };\n\n    //return random world currency by ISO 4217\n    Chance.prototype.currency = function () {\n        return this.pick(this.currency_types());\n    };\n\n    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code\n    Chance.prototype.currency_pair = function (returnAsString) {\n        var currencies = this.unique(this.currency, 2, {\n            comparator: function(arr, val) {\n\n                return arr.reduce(function(acc, item) {\n                    // If a match has been found, short circuit check and just return\n                    return acc || (item.code === val.code);\n                }, false);\n            }\n        });\n\n        if (returnAsString) {\n            return currencies[0].code + '/' + currencies[1].code;\n        } else {\n            return currencies;\n        }\n    };\n\n    Chance.prototype.dollar = function (options) {\n        // By default, a somewhat more sane max for dollar than all available numbers\n        options = initOptions(options, {max : 10000, min : 0});\n\n        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),\n            cents = dollar.split('.')[1];\n\n        if (cents === undefined) {\n            dollar += '.00';\n        } else if (cents.length < 2) {\n            dollar = dollar + '0';\n        }\n\n        if (dollar < 0) {\n            return '-$' + dollar.replace('-', '');\n        } else {\n            return '$' + dollar;\n        }\n    };\n\n    Chance.prototype.euro = function (options) {\n        return Number(this.dollar(options).replace(\"$\", \"\")).toLocaleString() + \"€\";\n    };\n\n    Chance.prototype.exp = function (options) {\n        options = initOptions(options);\n        var exp = {};\n\n        exp.year = this.exp_year();\n\n        // If the year is this year, need to ensure month is greater than the\n        // current month or this expiration will not be valid\n        if (exp.year === (new Date().getFullYear()).toString()) {\n            exp.month = this.exp_month({future: true});\n        } else {\n            exp.month = this.exp_month();\n        }\n\n        return options.raw ? exp : exp.month + '/' + exp.year;\n    };\n\n    Chance.prototype.exp_month = function (options) {\n        options = initOptions(options);\n        var month, month_int,\n            // Date object months are 0 indexed\n            curMonth = new Date().getMonth() + 1;\n\n        if (options.future && (curMonth !== 12)) {\n            do {\n                month = this.month({raw: true}).numeric;\n                month_int = parseInt(month, 10);\n            } while (month_int <= curMonth);\n        } else {\n            month = this.month({raw: true}).numeric;\n        }\n\n        return month;\n    };\n\n    Chance.prototype.exp_year = function () {\n        var curMonth = new Date().getMonth() + 1,\n            curYear = new Date().getFullYear();\n\n        return this.year({min: ((curMonth === 12) ? (curYear + 1) : curYear), max: (curYear + 10)});\n    };\n\n    Chance.prototype.vat = function (options) {\n        options = initOptions(options, { country: 'it' });\n        switch (options.country.toLowerCase()) {\n            case 'it':\n                return this.it_vat();\n        }\n    };\n\n    // -- End Finance\n\n    // -- Regional\n\n    Chance.prototype.it_vat = function () {\n        var it_vat = this.natural({min: 1, max: 1800000});\n\n        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: 'it' })).code, 3);\n        return it_vat + this.luhn_calculate(it_vat);\n    };\n\n    /*\n     * this generator is written following the official algorithm\n     * all data can be passed explicitely or randomized by calling chance.cf() without options\n     * the code does not check that the input data is valid (it goes beyond the scope of the generator)\n     *\n     * @param  [Object] options = { first: first name,\n     *                              last: last name,\n     *                              gender: female|male,\n                                    birthday: JavaScript date object,\n                                    city: string(4), 1 letter + 3 numbers\n                                   }\n     * @return [string] codice fiscale\n     *\n    */\n    Chance.prototype.cf = function (options) {\n        options = options || {};\n        var gender = !!options.gender ? options.gender : this.gender(),\n            first = !!options.first ? options.first : this.first( { gender: gender, nationality: 'it'} ),\n            last = !!options.last ? options.last : this.last( { nationality: 'it'} ),\n            birthday = !!options.birthday ? options.birthday : this.birthday(),\n            city = !!options.city ? options.city : this.pickone(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'Z']) + this.pad(this.natural({max:999}), 3),\n            cf = [],\n            name_generator = function(name, isLast) {\n                var temp,\n                    return_value = [];\n\n                if (name.length < 3) {\n                    return_value = name.split(\"\").concat(\"XXX\".split(\"\")).splice(0,3);\n                }\n                else {\n                    temp = name.toUpperCase().split('').map(function(c){\n                        return (\"BCDFGHJKLMNPRSTVWZ\".indexOf(c) !== -1) ? c : undefined;\n                    }).join('');\n                    if (temp.length > 3) {\n                        if (isLast) {\n                            temp = temp.substr(0,3);\n                        } else {                        \n                            temp = temp[0] + temp.substr(2,2);\n                        }\n                    }\n                    if (temp.length < 3) {\n                        return_value = temp;\n                        temp = name.toUpperCase().split('').map(function(c){\n                            return (\"AEIOU\".indexOf(c) !== -1) ? c : undefined;\n                        }).join('').substr(0, 3 - return_value.length);\n                    }\n                    return_value = return_value + temp;\n                }\n\n                return return_value;\n            },\n            date_generator = function(birthday, gender, that) {\n                var lettermonths = ['A', 'B', 'C', 'D', 'E', 'H', 'L', 'M', 'P', 'R', 'S', 'T'];\n\n                return  birthday.getFullYear().toString().substr(2) + \n                        lettermonths[birthday.getMonth()] +\n                        that.pad(birthday.getDate() + ((gender.toLowerCase() === \"female\") ? 40 : 0), 2);\n            },\n            checkdigit_generator = function(cf) {\n                var range1 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                    range2 = \"ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                    evens  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                    odds   = \"BAKPLCQDREVOSFTGUHMINJWZYX\",\n                    digit  = 0;\n\n\n                for(var i = 0; i < 15; i++) {\n                    if (i % 2 !== 0) {\n                        digit += evens.indexOf(range2[range1.indexOf(cf[i])]);\n                    }\n                    else {\n                        digit +=  odds.indexOf(range2[range1.indexOf(cf[i])]);\n                    }\n                }\n                return evens[digit % 26];\n            };\n\n        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split(\"\")).join(\"\");\n        cf += checkdigit_generator(cf.toUpperCase(), this);\n\n        return cf.toUpperCase();\n    };\n\n    Chance.prototype.pl_pesel = function () {\n        var number = this.natural({min: 1, max: 9999999999});\n        var arr = this.pad(number, 10).split('');\n        for (var i = 0; i < arr.length; i++) {\n            arr[i] = parseInt(arr[i]);\n        }\n\n        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;\n        if(controlNumber !== 0) {\n            controlNumber = 10 - controlNumber;\n        }\n\n        return arr.join('') + controlNumber;\n    };\n\n    Chance.prototype.pl_nip = function () {\n        var number = this.natural({min: 1, max: 999999999});\n        var arr = this.pad(number, 9).split('');\n        for (var i = 0; i < arr.length; i++) {\n            arr[i] = parseInt(arr[i]);\n        }\n\n        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;\n        if(controlNumber === 10) {\n            return this.pl_nip();\n        }\n\n        return arr.join('') + controlNumber;\n    };\n\n    Chance.prototype.pl_regon = function () {\n        var number = this.natural({min: 1, max: 99999999});\n        var arr = this.pad(number, 8).split('');\n        for (var i = 0; i < arr.length; i++) {\n            arr[i] = parseInt(arr[i]);\n        }\n\n        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;\n        if(controlNumber === 10) {\n            controlNumber = 0;\n        }\n\n        return arr.join('') + controlNumber;\n    };\n\n    // -- End Regional\n\n    // -- Miscellaneous --\n\n    // Dice - For all the board game geeks out there, myself included ;)\n    function diceFn (range) {\n        return function () {\n            return this.natural(range);\n        };\n    }\n    Chance.prototype.d4 = diceFn({min: 1, max: 4});\n    Chance.prototype.d6 = diceFn({min: 1, max: 6});\n    Chance.prototype.d8 = diceFn({min: 1, max: 8});\n    Chance.prototype.d10 = diceFn({min: 1, max: 10});\n    Chance.prototype.d12 = diceFn({min: 1, max: 12});\n    Chance.prototype.d20 = diceFn({min: 1, max: 20});\n    Chance.prototype.d30 = diceFn({min: 1, max: 30});\n    Chance.prototype.d100 = diceFn({min: 1, max: 100});\n\n    Chance.prototype.rpg = function (thrown, options) {\n        options = initOptions(options);\n        if (!thrown) {\n            throw new RangeError(\"A type of die roll must be included\");\n        } else {\n            var bits = thrown.toLowerCase().split(\"d\"),\n                rolls = [];\n\n            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {\n                throw new Error(\"Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die\");\n            }\n            for (var i = bits[0]; i > 0; i--) {\n                rolls[i - 1] = this.natural({min: 1, max: bits[1]});\n            }\n            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;\n        }\n    };\n\n    // Guid\n    Chance.prototype.guid = function (options) {\n        options = initOptions(options, { version: 5 });\n\n        var guid_pool = \"abcdef1234567890\",\n            variant_pool = \"ab89\",\n            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +\n                   this.string({ pool: guid_pool, length: 4 }) + '-' +\n                   // The Version\n                   options.version +\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\n                   // The Variant\n                   this.string({ pool: variant_pool, length: 1 }) +\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\n                   this.string({ pool: guid_pool, length: 12 });\n        return guid;\n    };\n\n    // Hash\n    Chance.prototype.hash = function (options) {\n        options = initOptions(options, {length : 40, casing: 'lower'});\n        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;\n        return this.string({pool: pool, length: options.length});\n    };\n\n    Chance.prototype.luhn_check = function (num) {\n        var str = num.toString();\n        var checkDigit = +str.substring(str.length - 1);\n        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));\n    };\n\n    Chance.prototype.luhn_calculate = function (num) {\n        var digits = num.toString().split(\"\").reverse();\n        var sum = 0;\n        var digit;\n\n        for (var i = 0, l = digits.length; l > i; ++i) {\n            digit = +digits[i];\n            if (i % 2 === 0) {\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            sum += digit;\n        }\n        return (sum * 9) % 10;\n    };\n\n    // MD5 Hash\n    Chance.prototype.md5 = function(options) {\n        var opts = { str: '', key: null, raw: false };\n\n        if (!options) {\n            opts.str = this.string();\n            options = {};\n        }\n        else if (typeof options === 'string') {\n            opts.str = options;\n            options = {};\n        }\n        else if (typeof options !== 'object') {\n            return null;\n        }\n        else if(options.constructor === 'Array') {\n            return null;\n        }\n\n        opts = initOptions(options, opts);\n\n        if(!opts.str){\n            throw new Error('A parameter is required to return an md5 hash.');\n        }\n\n        return this.bimd5.md5(opts.str, opts.key, opts.raw);\n    };\n\n    /**\n     * #Description:\n     * =====================================================\n     * Generate random file name with extention\n     *\n     * The argument provide extention type \n     * -> raster \n     * -> vector\n     * -> 3d\n     * -> document\n     *\n     * If noting is provided the function return random file name with random \n     * extention type of any kind\n     *\n     * The user can validate the file name length range \n     * If noting provided the generated file name is radom\n     *\n     * #Extention Pool :\n     * * Currently the supported extentions are \n     *  -> some of the most popular raster image extentions\n     *  -> some of the most popular vector image extentions\n     *  -> some of the most popular 3d image extentions\n     *  -> some of the most popular document extentions\n     * \n     * #Examples :\n     * =====================================================\n     *\n     * Return random file name with random extention. The file extention\n     * is provided by a predifined collection of extentions. More abouth the extention\n     * pool can be fond in #Extention Pool section\n     * \n     * chance.file()                        \n     * => dsfsdhjf.xml\n     *\n     * In order to generate a file name with sspecific length, specify the \n     * length property and integer value. The extention is going to be random\n     *  \n     * chance.file({length : 10})           \n     * => asrtineqos.pdf\n     *\n     * In order to geerate file with extention form some of the predifined groups\n     * of the extention pool just specify the extenton pool category in fileType property\n     *  \n     * chance.file({fileType : 'raster'})   \n     * => dshgssds.psd\n     *\n     * You can provide specific extention for your files\n     * chance.file({extention : 'html'})    \n     * => djfsd.html\n     *\n     * Or you could pass custom collection of extentons bt array or by object\n     * chance.file({extentions : [...]})    \n     * => dhgsdsd.psd\n     *  \n     * chance.file({extentions : { key : [...], key : [...]}})\n     * => djsfksdjsd.xml\n     * \n     * @param  [collection] options \n     * @return [string]\n     * \n     */\n    Chance.prototype.file = function(options) {\n        \n        var fileOptions = options || {};\n        var poolCollectionKey = \"fileExtension\";\n        var typeRange   = Object.keys(this.get(\"fileExtension\"));//['raster', 'vector', '3d', 'document'];\n        var fileName;\n        var fileExtention;\n\n        // Generate random file name \n        fileName = this.word({length : fileOptions.length});\n\n        // Generate file by specific extention provided by the user\n        if(fileOptions.extention) {\n\n            fileExtention = fileOptions.extention;\n            return (fileName + '.' + fileExtention);\n        }\n\n        // Generate file by specific axtention collection\n        if(fileOptions.extentions) {\n\n            if(Array.isArray(fileOptions.extentions)) {\n\n                fileExtention = this.pickone(fileOptions.extentions);\n                return (fileName + '.' + fileExtention);\n            }\n            else if(fileOptions.extentions.constructor === Object) {\n                \n                var extentionObjectCollection = fileOptions.extentions;\n                var keys = Object.keys(extentionObjectCollection);\n\n                fileExtention = this.pickone(extentionObjectCollection[this.pickone(keys)]);\n                return (fileName + '.' + fileExtention);\n            }\n\n            throw new Error(\"Expect collection of type Array or Object to be passed as an argument \");\n        } \n\n        // Generate file extention based on specific file type\n        if(fileOptions.fileType) {\n\n            var fileType = fileOptions.fileType;\n            if(typeRange.indexOf(fileType) !== -1) {\n\n                fileExtention = this.pickone(this.get(poolCollectionKey)[fileType]);\n                return (fileName + '.' + fileExtention);\n            }\n\n            throw new Error(\"Expect file type value to be 'raster', 'vector', '3d' or 'document' \");\n        }\n\n        // Generate random file name if no extenton options are passed\n        fileExtention = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);\n        return (fileName + '.' + fileExtention);\n    };     \n\n    var data = {\n\n        firstNames: {\n            \"male\": {\n                \"en\": [\"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\", \"Christopher\", \"Daniel\", \"Matthew\", \"George\", \"Donald\", \"Anthony\", \"Paul\", \"Mark\", \"Edward\", \"Steven\", \"Kenneth\", \"Andrew\", \"Brian\", \"Joshua\", \"Kevin\", \"Ronald\", \"Timothy\", \"Jason\", \"Jeffrey\", \"Frank\", \"Gary\", \"Ryan\", \"Nicholas\", \"Eric\", \"Stephen\", \"Jacob\", \"Larry\", \"Jonathan\", \"Scott\", \"Raymond\", \"Justin\", \"Brandon\", \"Gregory\", \"Samuel\", \"Benjamin\", \"Patrick\", \"Jack\", \"Henry\", \"Walter\", \"Dennis\", \"Jerry\", \"Alexander\", \"Peter\", \"Tyler\", \"Douglas\", \"Harold\", \"Aaron\", \"Jose\", \"Adam\", \"Arthur\", \"Zachary\", \"Carl\", \"Nathan\", \"Albert\", \"Kyle\", \"Lawrence\", \"Joe\", \"Willie\", \"Gerald\", \"Roger\", \"Keith\", \"Jeremy\", \"Terry\", \"Harry\", \"Ralph\", \"Sean\", \"Jesse\", \"Roy\", \"Louis\", \"Billy\", \"Austin\", \"Bruce\", \"Eugene\", \"Christian\", \"Bryan\", \"Wayne\", \"Russell\", \"Howard\", \"Fred\", \"Ethan\", \"Jordan\", \"Philip\", \"Alan\", \"Juan\", \"Randy\", \"Vincent\", \"Bobby\", \"Dylan\", \"Johnny\", \"Phillip\", \"Victor\", \"Clarence\", \"Ernest\", \"Martin\", \"Craig\", \"Stanley\", \"Shawn\", \"Travis\", \"Bradley\", \"Leonard\", \"Earl\", \"Gabriel\", \"Jimmy\", \"Francis\", \"Todd\", \"Noah\", \"Danny\", \"Dale\", \"Cody\", \"Carlos\", \"Allen\", \"Frederick\", \"Logan\", \"Curtis\", \"Alex\", \"Joel\", \"Luis\", \"Norman\", \"Marvin\", \"Glenn\", \"Tony\", \"Nathaniel\", \"Rodney\", \"Melvin\", \"Alfred\", \"Steve\", \"Cameron\", \"Chad\", \"Edwin\", \"Caleb\", \"Evan\", \"Antonio\", \"Lee\", \"Herbert\", \"Jeffery\", \"Isaac\", \"Derek\", \"Ricky\", \"Marcus\", \"Theodore\", \"Elijah\", \"Luke\", \"Jesus\", \"Eddie\", \"Troy\", \"Mike\", \"Dustin\", \"Ray\", \"Adrian\", \"Bernard\", \"Leroy\", \"Angel\", \"Randall\", \"Wesley\", \"Ian\", \"Jared\", \"Mason\", \"Hunter\", \"Calvin\", \"Oscar\", \"Clifford\", \"Jay\", \"Shane\", \"Ronnie\", \"Barry\", \"Lucas\", \"Corey\", \"Manuel\", \"Leo\", \"Tommy\", \"Warren\", \"Jackson\", \"Isaiah\", \"Connor\", \"Don\", \"Dean\", \"Jon\", \"Julian\", \"Miguel\", \"Bill\", \"Lloyd\", \"Charlie\", \"Mitchell\", \"Leon\", \"Jerome\", \"Darrell\", \"Jeremiah\", \"Alvin\", \"Brett\", \"Seth\", \"Floyd\", \"Jim\", \"Blake\", \"Micheal\", \"Gordon\", \"Trevor\", \"Lewis\", \"Erik\", \"Edgar\", \"Vernon\", \"Devin\", \"Gavin\", \"Jayden\", \"Chris\", \"Clyde\", \"Tom\", \"Derrick\", \"Mario\", \"Brent\", \"Marc\", \"Herman\", \"Chase\", \"Dominic\", \"Ricardo\", \"Franklin\", \"Maurice\", \"Max\", \"Aiden\", \"Owen\", \"Lester\", \"Gilbert\", \"Elmer\", \"Gene\", \"Francisco\", \"Glen\", \"Cory\", \"Garrett\", \"Clayton\", \"Sam\", \"Jorge\", \"Chester\", \"Alejandro\", \"Jeff\", \"Harvey\", \"Milton\", \"Cole\", \"Ivan\", \"Andre\", \"Duane\", \"Landon\"],\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163\n                \"it\": [\"Adolfo\", \"Alberto\", \"Aldo\", \"Alessandro\", \"Alessio\", \"Alfredo\", \"Alvaro\", \"Andrea\", \"Angelo\", \"Angiolo\", \"Antonino\", \"Antonio\", \"Attilio\", \"Benito\", \"Bernardo\", \"Bruno\", \"Carlo\", \"Cesare\", \"Christian\", \"Claudio\", \"Corrado\", \"Cosimo\", \"Cristian\", \"Cristiano\", \"Daniele\", \"Dario\", \"David\", \"Davide\", \"Diego\", \"Dino\", \"Domenico\", \"Duccio\", \"Edoardo\", \"Elia\", \"Elio\", \"Emanuele\", \"Emiliano\", \"Emilio\", \"Enrico\", \"Enzo\", \"Ettore\", \"Fabio\", \"Fabrizio\", \"Federico\", \"Ferdinando\", \"Fernando\", \"Filippo\", \"Francesco\", \"Franco\", \"Gabriele\", \"Giacomo\", \"Giampaolo\", \"Giampiero\", \"Giancarlo\", \"Gianfranco\", \"Gianluca\", \"Gianmarco\", \"Gianni\", \"Gino\", \"Giorgio\", \"Giovanni\", \"Giuliano\", \"Giulio\", \"Giuseppe\", \"Graziano\", \"Gregorio\", \"Guido\", \"Iacopo\", \"Jacopo\", \"Lapo\", \"Leonardo\", \"Lorenzo\", \"Luca\", \"Luciano\", \"Luigi\", \"Manuel\", \"Marcello\", \"Marco\", \"Marino\", \"Mario\", \"Massimiliano\", \"Massimo\", \"Matteo\", \"Mattia\", \"Maurizio\", \"Mauro\", \"Michele\", \"Mirko\", \"Mohamed\", \"Nello\", \"Neri\", \"Niccolò\", \"Nicola\", \"Osvaldo\", \"Otello\", \"Paolo\", \"Pier Luigi\", \"Piero\", \"Pietro\", \"Raffaele\", \"Remo\", \"Renato\", \"Renzo\", \"Riccardo\", \"Roberto\", \"Rolando\", \"Romano\", \"Salvatore\", \"Samuele\", \"Sandro\", \"Sergio\", \"Silvano\", \"Simone\", \"Stefano\", \"Thomas\", \"Tommaso\", \"Ubaldo\", \"Ugo\", \"Umberto\", \"Valerio\", \"Valter\", \"Vasco\", \"Vincenzo\", \"Vittorio\"]\n            },\n            \"female\": {\n                \"en\": [\"Mary\", \"Emma\", \"Elizabeth\", \"Minnie\", \"Margaret\", \"Ida\", \"Alice\", \"Bertha\", \"Sarah\", \"Annie\", \"Clara\", \"Ella\", \"Florence\", \"Cora\", \"Martha\", \"Laura\", \"Nellie\", \"Grace\", \"Carrie\", \"Maude\", \"Mabel\", \"Bessie\", \"Jennie\", \"Gertrude\", \"Julia\", \"Hattie\", \"Edith\", \"Mattie\", \"Rose\", \"Catherine\", \"Lillian\", \"Ada\", \"Lillie\", \"Helen\", \"Jessie\", \"Louise\", \"Ethel\", \"Lula\", \"Myrtle\", \"Eva\", \"Frances\", \"Lena\", \"Lucy\", \"Edna\", \"Maggie\", \"Pearl\", \"Daisy\", \"Fannie\", \"Josephine\", \"Dora\", \"Rosa\", \"Katherine\", \"Agnes\", \"Marie\", \"Nora\", \"May\", \"Mamie\", \"Blanche\", \"Stella\", \"Ellen\", \"Nancy\", \"Effie\", \"Sallie\", \"Nettie\", \"Della\", \"Lizzie\", \"Flora\", \"Susie\", \"Maud\", \"Mae\", \"Etta\", \"Harriet\", \"Sadie\", \"Caroline\", \"Katie\", \"Lydia\", \"Elsie\", \"Kate\", \"Susan\", \"Mollie\", \"Alma\", \"Addie\", \"Georgia\", \"Eliza\", \"Lulu\", \"Nannie\", \"Lottie\", \"Amanda\", \"Belle\", \"Charlotte\", \"Rebecca\", \"Ruth\", \"Viola\", \"Olive\", \"Amelia\", \"Hannah\", \"Jane\", \"Virginia\", \"Emily\", \"Matilda\", \"Irene\", \"Kathryn\", \"Esther\", \"Willie\", \"Henrietta\", \"Ollie\", \"Amy\", \"Rachel\", \"Sara\", \"Estella\", \"Theresa\", \"Augusta\", \"Ora\", \"Pauline\", \"Josie\", \"Lola\", \"Sophia\", \"Leona\", \"Anne\", \"Mildred\", \"Ann\", \"Beulah\", \"Callie\", \"Lou\", \"Delia\", \"Eleanor\", \"Barbara\", \"Iva\", \"Louisa\", \"Maria\", \"Mayme\", \"Evelyn\", \"Estelle\", \"Nina\", \"Betty\", \"Marion\", \"Bettie\", \"Dorothy\", \"Luella\", \"Inez\", \"Lela\", \"Rosie\", \"Allie\", \"Millie\", \"Janie\", \"Cornelia\", \"Victoria\", \"Ruby\", \"Winifred\", \"Alta\", \"Celia\", \"Christine\", \"Beatrice\", \"Birdie\", \"Harriett\", \"Mable\", \"Myra\", \"Sophie\", \"Tillie\", \"Isabel\", \"Sylvia\", \"Carolyn\", \"Isabelle\", \"Leila\", \"Sally\", \"Ina\", \"Essie\", \"Bertie\", \"Nell\", \"Alberta\", \"Katharine\", \"Lora\", \"Rena\", \"Mina\", \"Rhoda\", \"Mathilda\", \"Abbie\", \"Eula\", \"Dollie\", \"Hettie\", \"Eunice\", \"Fanny\", \"Ola\", \"Lenora\", \"Adelaide\", \"Christina\", \"Lelia\", \"Nelle\", \"Sue\", \"Johanna\", \"Lilly\", \"Lucinda\", \"Minerva\", \"Lettie\", \"Roxie\", \"Cynthia\", \"Helena\", \"Hilda\", \"Hulda\", \"Bernice\", \"Genevieve\", \"Jean\", \"Cordelia\", \"Marian\", \"Francis\", \"Jeanette\", \"Adeline\", \"Gussie\", \"Leah\", \"Lois\", \"Lura\", \"Mittie\", \"Hallie\", \"Isabella\", \"Olga\", \"Phoebe\", \"Teresa\", \"Hester\", \"Lida\", \"Lina\", \"Winnie\", \"Claudia\", \"Marguerite\", \"Vera\", \"Cecelia\", \"Bess\", \"Emilie\", \"John\", \"Rosetta\", \"Verna\", \"Myrtie\", \"Cecilia\", \"Elva\", \"Olivia\", \"Ophelia\", \"Georgie\", \"Elnora\", \"Violet\", \"Adele\", \"Lily\", \"Linnie\", \"Loretta\", \"Madge\", \"Polly\", \"Virgie\", \"Eugenia\", \"Lucile\", \"Lucille\", \"Mabelle\", \"Rosalie\"],\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162\n                \"it\": [\"Ada\", \"Adriana\", \"Alessandra\", \"Alessia\", \"Alice\", \"Angela\", \"Anna\", \"Anna Maria\", \"Annalisa\", \"Annita\", \"Annunziata\", \"Antonella\", \"Arianna\", \"Asia\", \"Assunta\", \"Aurora\", \"Barbara\", \"Beatrice\", \"Benedetta\", \"Bianca\", \"Bruna\", \"Camilla\", \"Carla\", \"Carlotta\", \"Carmela\", \"Carolina\", \"Caterina\", \"Catia\", \"Cecilia\", \"Chiara\", \"Cinzia\", \"Clara\", \"Claudia\", \"Costanza\", \"Cristina\", \"Daniela\", \"Debora\", \"Diletta\", \"Dina\", \"Donatella\", \"Elena\", \"Eleonora\", \"Elisa\", \"Elisabetta\", \"Emanuela\", \"Emma\", \"Eva\", \"Federica\", \"Fernanda\", \"Fiorella\", \"Fiorenza\", \"Flora\", \"Franca\", \"Francesca\", \"Gabriella\", \"Gaia\", \"Gemma\", \"Giada\", \"Gianna\", \"Gina\", \"Ginevra\", \"Giorgia\", \"Giovanna\", \"Giulia\", \"Giuliana\", \"Giuseppa\", \"Giuseppina\", \"Grazia\", \"Graziella\", \"Greta\", \"Ida\", \"Ilaria\", \"Ines\", \"Iolanda\", \"Irene\", \"Irma\", \"Isabella\", \"Jessica\", \"Laura\", \"Leda\", \"Letizia\", \"Licia\", \"Lidia\", \"Liliana\", \"Lina\", \"Linda\", \"Lisa\", \"Livia\", \"Loretta\", \"Luana\", \"Lucia\", \"Luciana\", \"Lucrezia\", \"Luisa\", \"Manuela\", \"Mara\", \"Marcella\", \"Margherita\", \"Maria\", \"Maria Cristina\", \"Maria Grazia\", \"Maria Luisa\", \"Maria Pia\", \"Maria Teresa\", \"Marina\", \"Marisa\", \"Marta\", \"Martina\", \"Marzia\", \"Matilde\", \"Melissa\", \"Michela\", \"Milena\", \"Mirella\", \"Monica\", \"Natalina\", \"Nella\", \"Nicoletta\", \"Noemi\", \"Olga\", \"Paola\", \"Patrizia\", \"Piera\", \"Pierina\", \"Raffaella\", \"Rebecca\", \"Renata\", \"Rina\", \"Rita\", \"Roberta\", \"Rosa\", \"Rosanna\", \"Rossana\", \"Rossella\", \"Sabrina\", \"Sandra\", \"Sara\", \"Serena\", \"Silvana\", \"Silvia\", \"Simona\", \"Simonetta\", \"Sofia\", \"Sonia\", \"Stefania\", \"Susanna\", \"Teresa\", \"Tina\", \"Tiziana\", \"Tosca\", \"Valentina\", \"Valeria\", \"Vanda\", \"Vanessa\", \"Vanna\", \"Vera\", \"Veronica\", \"Vilma\", \"Viola\", \"Virginia\", \"Vittoria\"]\n            }\n        },\n\n        lastNames: {\n            \"en\": ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)\n            \"it\": [\"Acciai\", \"Aglietti\", \"Agostini\", \"Agresti\", \"Ahmed\", \"Aiazzi\", \"Albanese\", \"Alberti\", \"Alessi\", \"Alfani\", \"Alinari\", \"Alterini\", \"Amato\", \"Ammannati\", \"Ancillotti\", \"Andrei\", \"Andreini\", \"Andreoni\", \"Angeli\", \"Anichini\", \"Antonelli\", \"Antonini\", \"Arena\", \"Ariani\", \"Arnetoli\", \"Arrighi\", \"Baccani\", \"Baccetti\", \"Bacci\", \"Bacherini\", \"Badii\", \"Baggiani\", \"Baglioni\", \"Bagni\", \"Bagnoli\", \"Baldassini\", \"Baldi\", \"Baldini\", \"Ballerini\", \"Balli\", \"Ballini\", \"Balloni\", \"Bambi\", \"Banchi\", \"Bandinelli\", \"Bandini\", \"Bani\", \"Barbetti\", \"Barbieri\", \"Barchielli\", \"Bardazzi\", \"Bardelli\", \"Bardi\", \"Barducci\", \"Bargellini\", \"Bargiacchi\", \"Barni\", \"Baroncelli\", \"Baroncini\", \"Barone\", \"Baroni\", \"Baronti\", \"Bartalesi\", \"Bartoletti\", \"Bartoli\", \"Bartolini\", \"Bartoloni\", \"Bartolozzi\", \"Basagni\", \"Basile\", \"Bassi\", \"Batacchi\", \"Battaglia\", \"Battaglini\", \"Bausi\", \"Becagli\", \"Becattini\", \"Becchi\", \"Becucci\", \"Bellandi\", \"Bellesi\", \"Belli\", \"Bellini\", \"Bellucci\", \"Bencini\", \"Benedetti\", \"Benelli\", \"Beni\", \"Benini\", \"Bensi\", \"Benucci\", \"Benvenuti\", \"Berlincioni\", \"Bernacchioni\", \"Bernardi\", \"Bernardini\", \"Berni\", \"Bernini\", \"Bertelli\", \"Berti\", \"Bertini\", \"Bessi\", \"Betti\", \"Bettini\", \"Biagi\", \"Biagini\", \"Biagioni\", \"Biagiotti\", \"Biancalani\", \"Bianchi\", \"Bianchini\", \"Bianco\", \"Biffoli\", \"Bigazzi\", \"Bigi\", \"Biliotti\", \"Billi\", \"Binazzi\", \"Bindi\", \"Bini\", \"Biondi\", \"Bizzarri\", \"Bocci\", \"Bogani\", \"Bolognesi\", \"Bonaiuti\", \"Bonanni\", \"Bonciani\", \"Boncinelli\", \"Bondi\", \"Bonechi\", \"Bongini\", \"Boni\", \"Bonini\", \"Borchi\", \"Boretti\", \"Borghi\", \"Borghini\", \"Borgioli\", \"Borri\", \"Borselli\", \"Boschi\", \"Bottai\", \"Bracci\", \"Braccini\", \"Brandi\", \"Braschi\", \"Bravi\", \"Brazzini\", \"Breschi\", \"Brilli\", \"Brizzi\", \"Brogelli\", \"Brogi\", \"Brogioni\", \"Brunelli\", \"Brunetti\", \"Bruni\", \"Bruno\", \"Brunori\", \"Bruschi\", \"Bucci\", \"Bucciarelli\", \"Buccioni\", \"Bucelli\", \"Bulli\", \"Burberi\", \"Burchi\", \"Burgassi\", \"Burroni\", \"Bussotti\", \"Buti\", \"Caciolli\", \"Caiani\", \"Calabrese\", \"Calamai\", \"Calamandrei\", \"Caldini\", \"Calo'\", \"Calonaci\", \"Calosi\", \"Calvelli\", \"Cambi\", \"Camiciottoli\", \"Cammelli\", \"Cammilli\", \"Campolmi\", \"Cantini\", \"Capanni\", \"Capecchi\", \"Caponi\", \"Cappelletti\", \"Cappelli\", \"Cappellini\", \"Cappugi\", \"Capretti\", \"Caputo\", \"Carbone\", \"Carboni\", \"Cardini\", \"Carlesi\", \"Carletti\", \"Carli\", \"Caroti\", \"Carotti\", \"Carrai\", \"Carraresi\", \"Carta\", \"Caruso\", \"Casalini\", \"Casati\", \"Caselli\", \"Casini\", \"Castagnoli\", \"Castellani\", \"Castelli\", \"Castellucci\", \"Catalano\", \"Catarzi\", \"Catelani\", \"Cavaciocchi\", \"Cavallaro\", \"Cavallini\", \"Cavicchi\", \"Cavini\", \"Ceccarelli\", \"Ceccatelli\", \"Ceccherelli\", \"Ceccherini\", \"Cecchi\", \"Cecchini\", \"Cecconi\", \"Cei\", \"Cellai\", \"Celli\", \"Cellini\", \"Cencetti\", \"Ceni\", \"Cenni\", \"Cerbai\", \"Cesari\", \"Ceseri\", \"Checcacci\", \"Checchi\", \"Checcucci\", \"Cheli\", \"Chellini\", \"Chen\", \"Cheng\", \"Cherici\", \"Cherubini\", \"Chiaramonti\", \"Chiarantini\", \"Chiarelli\", \"Chiari\", \"Chiarini\", \"Chiarugi\", \"Chiavacci\", \"Chiesi\", \"Chimenti\", \"Chini\", \"Chirici\", \"Chiti\", \"Ciabatti\", \"Ciampi\", \"Cianchi\", \"Cianfanelli\", \"Cianferoni\", \"Ciani\", \"Ciapetti\", \"Ciappi\", \"Ciardi\", \"Ciatti\", \"Cicali\", \"Ciccone\", \"Cinelli\", \"Cini\", \"Ciobanu\", \"Ciolli\", \"Cioni\", \"Cipriani\", \"Cirillo\", \"Cirri\", \"Ciucchi\", \"Ciuffi\", \"Ciulli\", \"Ciullini\", \"Clemente\", \"Cocchi\", \"Cognome\", \"Coli\", \"Collini\", \"Colombo\", \"Colzi\", \"Comparini\", \"Conforti\", \"Consigli\", \"Conte\", \"Conti\", \"Contini\", \"Coppini\", \"Coppola\", \"Corsi\", \"Corsini\", \"Corti\", \"Cortini\", \"Cosi\", \"Costa\", \"Costantini\", \"Costantino\", \"Cozzi\", \"Cresci\", \"Crescioli\", \"Cresti\", \"Crini\", \"Curradi\", \"D'Agostino\", \"D'Alessandro\", \"D'Amico\", \"D'Angelo\", \"Daddi\", \"Dainelli\", \"Dallai\", \"Danti\", \"Davitti\", \"De Angelis\", \"De Luca\", \"De Marco\", \"De Rosa\", \"De Santis\", \"De Simone\", \"De Vita\", \"Degl'Innocenti\", \"Degli Innocenti\", \"Dei\", \"Del Lungo\", \"Del Re\", \"Di Marco\", \"Di Stefano\", \"Dini\", \"Diop\", \"Dobre\", \"Dolfi\", \"Donati\", \"Dondoli\", \"Dong\", \"Donnini\", \"Ducci\", \"Dumitru\", \"Ermini\", \"Esposito\", \"Evangelisti\", \"Fabbri\", \"Fabbrini\", \"Fabbrizzi\", \"Fabbroni\", \"Fabbrucci\", \"Fabiani\", \"Facchini\", \"Faggi\", \"Fagioli\", \"Failli\", \"Faini\", \"Falciani\", \"Falcini\", \"Falcone\", \"Fallani\", \"Falorni\", \"Falsini\", \"Falugiani\", \"Fancelli\", \"Fanelli\", \"Fanetti\", \"Fanfani\", \"Fani\", \"Fantappie'\", \"Fantechi\", \"Fanti\", \"Fantini\", \"Fantoni\", \"Farina\", \"Fattori\", \"Favilli\", \"Fedi\", \"Fei\", \"Ferrante\", \"Ferrara\", \"Ferrari\", \"Ferraro\", \"Ferretti\", \"Ferri\", \"Ferrini\", \"Ferroni\", \"Fiaschi\", \"Fibbi\", \"Fiesoli\", \"Filippi\", \"Filippini\", \"Fini\", \"Fioravanti\", \"Fiore\", \"Fiorentini\", \"Fiorini\", \"Fissi\", \"Focardi\", \"Foggi\", \"Fontana\", \"Fontanelli\", \"Fontani\", \"Forconi\", \"Formigli\", \"Forte\", \"Forti\", \"Fortini\", \"Fossati\", \"Fossi\", \"Francalanci\", \"Franceschi\", \"Franceschini\", \"Franchi\", \"Franchini\", \"Franci\", \"Francini\", \"Francioni\", \"Franco\", \"Frassineti\", \"Frati\", \"Fratini\", \"Frilli\", \"Frizzi\", \"Frosali\", \"Frosini\", \"Frullini\", \"Fusco\", \"Fusi\", \"Gabbrielli\", \"Gabellini\", \"Gagliardi\", \"Galanti\", \"Galardi\", \"Galeotti\", \"Galletti\", \"Galli\", \"Gallo\", \"Gallori\", \"Gambacciani\", \"Gargani\", \"Garofalo\", \"Garuglieri\", \"Gashi\", \"Gasperini\", \"Gatti\", \"Gelli\", \"Gensini\", \"Gentile\", \"Gentili\", \"Geri\", \"Gerini\", \"Gheri\", \"Ghini\", \"Giachetti\", \"Giachi\", \"Giacomelli\", \"Gianassi\", \"Giani\", \"Giannelli\", \"Giannetti\", \"Gianni\", \"Giannini\", \"Giannoni\", \"Giannotti\", \"Giannozzi\", \"Gigli\", \"Giordano\", \"Giorgetti\", \"Giorgi\", \"Giovacchini\", \"Giovannelli\", \"Giovannetti\", \"Giovannini\", \"Giovannoni\", \"Giuliani\", \"Giunti\", \"Giuntini\", \"Giusti\", \"Gonnelli\", \"Goretti\", \"Gori\", \"Gradi\", \"Gramigni\", \"Grassi\", \"Grasso\", \"Graziani\", \"Grazzini\", \"Greco\", \"Grifoni\", \"Grillo\", \"Grimaldi\", \"Grossi\", \"Gualtieri\", \"Guarducci\", \"Guarino\", \"Guarnieri\", \"Guasti\", \"Guerra\", \"Guerri\", \"Guerrini\", \"Guidi\", \"Guidotti\", \"He\", \"Hoxha\", \"Hu\", \"Huang\", \"Iandelli\", \"Ignesti\", \"Innocenti\", \"Jin\", \"La Rosa\", \"Lai\", \"Landi\", \"Landini\", \"Lanini\", \"Lapi\", \"Lapini\", \"Lari\", \"Lascialfari\", \"Lastrucci\", \"Latini\", \"Lazzeri\", \"Lazzerini\", \"Lelli\", \"Lenzi\", \"Leonardi\", \"Leoncini\", \"Leone\", \"Leoni\", \"Lepri\", \"Li\", \"Liao\", \"Lin\", \"Linari\", \"Lippi\", \"Lisi\", \"Livi\", \"Lombardi\", \"Lombardini\", \"Lombardo\", \"Longo\", \"Lopez\", \"Lorenzi\", \"Lorenzini\", \"Lorini\", \"Lotti\", \"Lu\", \"Lucchesi\", \"Lucherini\", \"Lunghi\", \"Lupi\", \"Madiai\", \"Maestrini\", \"Maffei\", \"Maggi\", \"Maggini\", \"Magherini\", \"Magini\", \"Magnani\", \"Magnelli\", \"Magni\", \"Magnolfi\", \"Magrini\", \"Malavolti\", \"Malevolti\", \"Manca\", \"Mancini\", \"Manetti\", \"Manfredi\", \"Mangani\", \"Mannelli\", \"Manni\", \"Mannini\", \"Mannucci\", \"Manuelli\", \"Manzini\", \"Marcelli\", \"Marchese\", \"Marchetti\", \"Marchi\", \"Marchiani\", \"Marchionni\", \"Marconi\", \"Marcucci\", \"Margheri\", \"Mari\", \"Mariani\", \"Marilli\", \"Marinai\", \"Marinari\", \"Marinelli\", \"Marini\", \"Marino\", \"Mariotti\", \"Marsili\", \"Martelli\", \"Martinelli\", \"Martini\", \"Martino\", \"Marzi\", \"Masi\", \"Masini\", \"Masoni\", \"Massai\", \"Materassi\", \"Mattei\", \"Matteini\", \"Matteucci\", \"Matteuzzi\", \"Mattioli\", \"Mattolini\", \"Matucci\", \"Mauro\", \"Mazzanti\", \"Mazzei\", \"Mazzetti\", \"Mazzi\", \"Mazzini\", \"Mazzocchi\", \"Mazzoli\", \"Mazzoni\", \"Mazzuoli\", \"Meacci\", \"Mecocci\", \"Meini\", \"Melani\", \"Mele\", \"Meli\", \"Mengoni\", \"Menichetti\", \"Meoni\", \"Merlini\", \"Messeri\", \"Messina\", \"Meucci\", \"Miccinesi\", \"Miceli\", \"Micheli\", \"Michelini\", \"Michelozzi\", \"Migliori\", \"Migliorini\", \"Milani\", \"Miniati\", \"Misuri\", \"Monaco\", \"Montagnani\", \"Montagni\", \"Montanari\", \"Montelatici\", \"Monti\", \"Montigiani\", \"Montini\", \"Morandi\", \"Morandini\", \"Morelli\", \"Moretti\", \"Morganti\", \"Mori\", \"Morini\", \"Moroni\", \"Morozzi\", \"Mugnai\", \"Mugnaini\", \"Mustafa\", \"Naldi\", \"Naldini\", \"Nannelli\", \"Nanni\", \"Nannini\", \"Nannucci\", \"Nardi\", \"Nardini\", \"Nardoni\", \"Natali\", \"Ndiaye\", \"Nencetti\", \"Nencini\", \"Nencioni\", \"Neri\", \"Nesi\", \"Nesti\", \"Niccolai\", \"Niccoli\", \"Niccolini\", \"Nigi\", \"Nistri\", \"Nocentini\", \"Noferini\", \"Novelli\", \"Nucci\", \"Nuti\", \"Nutini\", \"Oliva\", \"Olivieri\", \"Olmi\", \"Orlandi\", \"Orlandini\", \"Orlando\", \"Orsini\", \"Ortolani\", \"Ottanelli\", \"Pacciani\", \"Pace\", \"Paci\", \"Pacini\", \"Pagani\", \"Pagano\", \"Paggetti\", \"Pagliai\", \"Pagni\", \"Pagnini\", \"Paladini\", \"Palagi\", \"Palchetti\", \"Palloni\", \"Palmieri\", \"Palumbo\", \"Pampaloni\", \"Pancani\", \"Pandolfi\", \"Pandolfini\", \"Panerai\", \"Panichi\", \"Paoletti\", \"Paoli\", \"Paolini\", \"Papi\", \"Papini\", \"Papucci\", \"Parenti\", \"Parigi\", \"Parisi\", \"Parri\", \"Parrini\", \"Pasquini\", \"Passeri\", \"Pecchioli\", \"Pecorini\", \"Pellegrini\", \"Pepi\", \"Perini\", \"Perrone\", \"Peruzzi\", \"Pesci\", \"Pestelli\", \"Petri\", \"Petrini\", \"Petrucci\", \"Pettini\", \"Pezzati\", \"Pezzatini\", \"Piani\", \"Piazza\", \"Piazzesi\", \"Piazzini\", \"Piccardi\", \"Picchi\", \"Piccini\", \"Piccioli\", \"Pieraccini\", \"Pieraccioni\", \"Pieralli\", \"Pierattini\", \"Pieri\", \"Pierini\", \"Pieroni\", \"Pietrini\", \"Pini\", \"Pinna\", \"Pinto\", \"Pinzani\", \"Pinzauti\", \"Piras\", \"Pisani\", \"Pistolesi\", \"Poggesi\", \"Poggi\", \"Poggiali\", \"Poggiolini\", \"Poli\", \"Pollastri\", \"Porciani\", \"Pozzi\", \"Pratellesi\", \"Pratesi\", \"Prosperi\", \"Pruneti\", \"Pucci\", \"Puccini\", \"Puccioni\", \"Pugi\", \"Pugliese\", \"Puliti\", \"Querci\", \"Quercioli\", \"Raddi\", \"Radu\", \"Raffaelli\", \"Ragazzini\", \"Ranfagni\", \"Ranieri\", \"Rastrelli\", \"Raugei\", \"Raveggi\", \"Renai\", \"Renzi\", \"Rettori\", \"Ricci\", \"Ricciardi\", \"Ridi\", \"Ridolfi\", \"Rigacci\", \"Righi\", \"Righini\", \"Rinaldi\", \"Risaliti\", \"Ristori\", \"Rizzo\", \"Rocchi\", \"Rocchini\", \"Rogai\", \"Romagnoli\", \"Romanelli\", \"Romani\", \"Romano\", \"Romei\", \"Romeo\", \"Romiti\", \"Romoli\", \"Romolini\", \"Rontini\", \"Rosati\", \"Roselli\", \"Rosi\", \"Rossetti\", \"Rossi\", \"Rossini\", \"Rovai\", \"Ruggeri\", \"Ruggiero\", \"Russo\", \"Sabatini\", \"Saccardi\", \"Sacchetti\", \"Sacchi\", \"Sacco\", \"Salerno\", \"Salimbeni\", \"Salucci\", \"Salvadori\", \"Salvestrini\", \"Salvi\", \"Salvini\", \"Sanesi\", \"Sani\", \"Sanna\", \"Santi\", \"Santini\", \"Santoni\", \"Santoro\", \"Santucci\", \"Sardi\", \"Sarri\", \"Sarti\", \"Sassi\", \"Sbolci\", \"Scali\", \"Scarpelli\", \"Scarselli\", \"Scopetani\", \"Secci\", \"Selvi\", \"Senatori\", \"Senesi\", \"Serafini\", \"Sereni\", \"Serra\", \"Sestini\", \"Sguanci\", \"Sieni\", \"Signorini\", \"Silvestri\", \"Simoncini\", \"Simonetti\", \"Simoni\", \"Singh\", \"Sodi\", \"Soldi\", \"Somigli\", \"Sorbi\", \"Sorelli\", \"Sorrentino\", \"Sottili\", \"Spina\", \"Spinelli\", \"Staccioli\", \"Staderini\", \"Stefanelli\", \"Stefani\", \"Stefanini\", \"Stella\", \"Susini\", \"Tacchi\", \"Tacconi\", \"Taddei\", \"Tagliaferri\", \"Tamburini\", \"Tanganelli\", \"Tani\", \"Tanini\", \"Tapinassi\", \"Tarchi\", \"Tarchiani\", \"Targioni\", \"Tassi\", \"Tassini\", \"Tempesti\", \"Terzani\", \"Tesi\", \"Testa\", \"Testi\", \"Tilli\", \"Tinti\", \"Tirinnanzi\", \"Toccafondi\", \"Tofanari\", \"Tofani\", \"Tognaccini\", \"Tonelli\", \"Tonini\", \"Torelli\", \"Torrini\", \"Tosi\", \"Toti\", \"Tozzi\", \"Trambusti\", \"Trapani\", \"Tucci\", \"Turchi\", \"Ugolini\", \"Ulivi\", \"Valente\", \"Valenti\", \"Valentini\", \"Vangelisti\", \"Vanni\", \"Vannini\", \"Vannoni\", \"Vannozzi\", \"Vannucchi\", \"Vannucci\", \"Ventura\", \"Venturi\", \"Venturini\", \"Vestri\", \"Vettori\", \"Vichi\", \"Viciani\", \"Vieri\", \"Vigiani\", \"Vignoli\", \"Vignolini\", \"Vignozzi\", \"Villani\", \"Vinci\", \"Visani\", \"Vitale\", \"Vitali\", \"Viti\", \"Viviani\", \"Vivoli\", \"Volpe\", \"Volpi\", \"Wang\", \"Wu\", \"Xu\", \"Yang\", \"Ye\", \"Zagli\", \"Zani\", \"Zanieri\", \"Zanobini\", \"Zecchi\", \"Zetti\", \"Zhang\", \"Zheng\", \"Zhou\", \"Zhu\", \"Zingoni\", \"Zini\", \"Zoppi\"]\n        },\n\n        // Data taken from https://github.com/umpirsky/country-list/blob/master/country/cldr/en_US/country.json\n        countries: [{\"name\":\"Afghanistan\",\"abbreviation\":\"AF\"},{\"name\":\"Albania\",\"abbreviation\":\"AL\"},{\"name\":\"Algeria\",\"abbreviation\":\"DZ\"},{\"name\":\"American Samoa\",\"abbreviation\":\"AS\"},{\"name\":\"Andorra\",\"abbreviation\":\"AD\"},{\"name\":\"Angola\",\"abbreviation\":\"AO\"},{\"name\":\"Anguilla\",\"abbreviation\":\"AI\"},{\"name\":\"Antarctica\",\"abbreviation\":\"AQ\"},{\"name\":\"Antigua and Barbuda\",\"abbreviation\":\"AG\"},{\"name\":\"Argentina\",\"abbreviation\":\"AR\"},{\"name\":\"Armenia\",\"abbreviation\":\"AM\"},{\"name\":\"Aruba\",\"abbreviation\":\"AW\"},{\"name\":\"Australia\",\"abbreviation\":\"AU\"},{\"name\":\"Austria\",\"abbreviation\":\"AT\"},{\"name\":\"Azerbaijan\",\"abbreviation\":\"AZ\"},{\"name\":\"Bahamas\",\"abbreviation\":\"BS\"},{\"name\":\"Bahrain\",\"abbreviation\":\"BH\"},{\"name\":\"Bangladesh\",\"abbreviation\":\"BD\"},{\"name\":\"Barbados\",\"abbreviation\":\"BB\"},{\"name\":\"Belarus\",\"abbreviation\":\"BY\"},{\"name\":\"Belgium\",\"abbreviation\":\"BE\"},{\"name\":\"Belize\",\"abbreviation\":\"BZ\"},{\"name\":\"Benin\",\"abbreviation\":\"BJ\"},{\"name\":\"Bermuda\",\"abbreviation\":\"BM\"},{\"name\":\"Bhutan\",\"abbreviation\":\"BT\"},{\"name\":\"Bolivia\",\"abbreviation\":\"BO\"},{\"name\":\"Bosnia and Herzegovina\",\"abbreviation\":\"BA\"},{\"name\":\"Botswana\",\"abbreviation\":\"BW\"},{\"name\":\"Bouvet Island\",\"abbreviation\":\"BV\"},{\"name\":\"Brazil\",\"abbreviation\":\"BR\"},{\"name\":\"British Antarctic Territory\",\"abbreviation\":\"BQ\"},{\"name\":\"British Indian Ocean Territory\",\"abbreviation\":\"IO\"},{\"name\":\"British Virgin Islands\",\"abbreviation\":\"VG\"},{\"name\":\"Brunei\",\"abbreviation\":\"BN\"},{\"name\":\"Bulgaria\",\"abbreviation\":\"BG\"},{\"name\":\"Burkina Faso\",\"abbreviation\":\"BF\"},{\"name\":\"Burundi\",\"abbreviation\":\"BI\"},{\"name\":\"Cambodia\",\"abbreviation\":\"KH\"},{\"name\":\"Cameroon\",\"abbreviation\":\"CM\"},{\"name\":\"Canada\",\"abbreviation\":\"CA\"},{\"name\":\"Canton and Enderbury Islands\",\"abbreviation\":\"CT\"},{\"name\":\"Cape Verde\",\"abbreviation\":\"CV\"},{\"name\":\"Cayman Islands\",\"abbreviation\":\"KY\"},{\"name\":\"Central African Republic\",\"abbreviation\":\"CF\"},{\"name\":\"Chad\",\"abbreviation\":\"TD\"},{\"name\":\"Chile\",\"abbreviation\":\"CL\"},{\"name\":\"China\",\"abbreviation\":\"CN\"},{\"name\":\"Christmas Island\",\"abbreviation\":\"CX\"},{\"name\":\"Cocos [Keeling] Islands\",\"abbreviation\":\"CC\"},{\"name\":\"Colombia\",\"abbreviation\":\"CO\"},{\"name\":\"Comoros\",\"abbreviation\":\"KM\"},{\"name\":\"Congo - Brazzaville\",\"abbreviation\":\"CG\"},{\"name\":\"Congo - Kinshasa\",\"abbreviation\":\"CD\"},{\"name\":\"Cook Islands\",\"abbreviation\":\"CK\"},{\"name\":\"Costa Rica\",\"abbreviation\":\"CR\"},{\"name\":\"Croatia\",\"abbreviation\":\"HR\"},{\"name\":\"Cuba\",\"abbreviation\":\"CU\"},{\"name\":\"Cyprus\",\"abbreviation\":\"CY\"},{\"name\":\"Czech Republic\",\"abbreviation\":\"CZ\"},{\"name\":\"Côte d’Ivoire\",\"abbreviation\":\"CI\"},{\"name\":\"Denmark\",\"abbreviation\":\"DK\"},{\"name\":\"Djibouti\",\"abbreviation\":\"DJ\"},{\"name\":\"Dominica\",\"abbreviation\":\"DM\"},{\"name\":\"Dominican Republic\",\"abbreviation\":\"DO\"},{\"name\":\"Dronning Maud Land\",\"abbreviation\":\"NQ\"},{\"name\":\"East Germany\",\"abbreviation\":\"DD\"},{\"name\":\"Ecuador\",\"abbreviation\":\"EC\"},{\"name\":\"Egypt\",\"abbreviation\":\"EG\"},{\"name\":\"El Salvador\",\"abbreviation\":\"SV\"},{\"name\":\"Equatorial Guinea\",\"abbreviation\":\"GQ\"},{\"name\":\"Eritrea\",\"abbreviation\":\"ER\"},{\"name\":\"Estonia\",\"abbreviation\":\"EE\"},{\"name\":\"Ethiopia\",\"abbreviation\":\"ET\"},{\"name\":\"Falkland Islands\",\"abbreviation\":\"FK\"},{\"name\":\"Faroe Islands\",\"abbreviation\":\"FO\"},{\"name\":\"Fiji\",\"abbreviation\":\"FJ\"},{\"name\":\"Finland\",\"abbreviation\":\"FI\"},{\"name\":\"France\",\"abbreviation\":\"FR\"},{\"name\":\"French Guiana\",\"abbreviation\":\"GF\"},{\"name\":\"French Polynesia\",\"abbreviation\":\"PF\"},{\"name\":\"French Southern Territories\",\"abbreviation\":\"TF\"},{\"name\":\"French Southern and Antarctic Territories\",\"abbreviation\":\"FQ\"},{\"name\":\"Gabon\",\"abbreviation\":\"GA\"},{\"name\":\"Gambia\",\"abbreviation\":\"GM\"},{\"name\":\"Georgia\",\"abbreviation\":\"GE\"},{\"name\":\"Germany\",\"abbreviation\":\"DE\"},{\"name\":\"Ghana\",\"abbreviation\":\"GH\"},{\"name\":\"Gibraltar\",\"abbreviation\":\"GI\"},{\"name\":\"Greece\",\"abbreviation\":\"GR\"},{\"name\":\"Greenland\",\"abbreviation\":\"GL\"},{\"name\":\"Grenada\",\"abbreviation\":\"GD\"},{\"name\":\"Guadeloupe\",\"abbreviation\":\"GP\"},{\"name\":\"Guam\",\"abbreviation\":\"GU\"},{\"name\":\"Guatemala\",\"abbreviation\":\"GT\"},{\"name\":\"Guernsey\",\"abbreviation\":\"GG\"},{\"name\":\"Guinea\",\"abbreviation\":\"GN\"},{\"name\":\"Guinea-Bissau\",\"abbreviation\":\"GW\"},{\"name\":\"Guyana\",\"abbreviation\":\"GY\"},{\"name\":\"Haiti\",\"abbreviation\":\"HT\"},{\"name\":\"Heard Island and McDonald Islands\",\"abbreviation\":\"HM\"},{\"name\":\"Honduras\",\"abbreviation\":\"HN\"},{\"name\":\"Hong Kong SAR China\",\"abbreviation\":\"HK\"},{\"name\":\"Hungary\",\"abbreviation\":\"HU\"},{\"name\":\"Iceland\",\"abbreviation\":\"IS\"},{\"name\":\"India\",\"abbreviation\":\"IN\"},{\"name\":\"Indonesia\",\"abbreviation\":\"ID\"},{\"name\":\"Iran\",\"abbreviation\":\"IR\"},{\"name\":\"Iraq\",\"abbreviation\":\"IQ\"},{\"name\":\"Ireland\",\"abbreviation\":\"IE\"},{\"name\":\"Isle of Man\",\"abbreviation\":\"IM\"},{\"name\":\"Israel\",\"abbreviation\":\"IL\"},{\"name\":\"Italy\",\"abbreviation\":\"IT\"},{\"name\":\"Jamaica\",\"abbreviation\":\"JM\"},{\"name\":\"Japan\",\"abbreviation\":\"JP\"},{\"name\":\"Jersey\",\"abbreviation\":\"JE\"},{\"name\":\"Johnston Island\",\"abbreviation\":\"JT\"},{\"name\":\"Jordan\",\"abbreviation\":\"JO\"},{\"name\":\"Kazakhstan\",\"abbreviation\":\"KZ\"},{\"name\":\"Kenya\",\"abbreviation\":\"KE\"},{\"name\":\"Kiribati\",\"abbreviation\":\"KI\"},{\"name\":\"Kuwait\",\"abbreviation\":\"KW\"},{\"name\":\"Kyrgyzstan\",\"abbreviation\":\"KG\"},{\"name\":\"Laos\",\"abbreviation\":\"LA\"},{\"name\":\"Latvia\",\"abbreviation\":\"LV\"},{\"name\":\"Lebanon\",\"abbreviation\":\"LB\"},{\"name\":\"Lesotho\",\"abbreviation\":\"LS\"},{\"name\":\"Liberia\",\"abbreviation\":\"LR\"},{\"name\":\"Libya\",\"abbreviation\":\"LY\"},{\"name\":\"Liechtenstein\",\"abbreviation\":\"LI\"},{\"name\":\"Lithuania\",\"abbreviation\":\"LT\"},{\"name\":\"Luxembourg\",\"abbreviation\":\"LU\"},{\"name\":\"Macau SAR China\",\"abbreviation\":\"MO\"},{\"name\":\"Macedonia\",\"abbreviation\":\"MK\"},{\"name\":\"Madagascar\",\"abbreviation\":\"MG\"},{\"name\":\"Malawi\",\"abbreviation\":\"MW\"},{\"name\":\"Malaysia\",\"abbreviation\":\"MY\"},{\"name\":\"Maldives\",\"abbreviation\":\"MV\"},{\"name\":\"Mali\",\"abbreviation\":\"ML\"},{\"name\":\"Malta\",\"abbreviation\":\"MT\"},{\"name\":\"Marshall Islands\",\"abbreviation\":\"MH\"},{\"name\":\"Martinique\",\"abbreviation\":\"MQ\"},{\"name\":\"Mauritania\",\"abbreviation\":\"MR\"},{\"name\":\"Mauritius\",\"abbreviation\":\"MU\"},{\"name\":\"Mayotte\",\"abbreviation\":\"YT\"},{\"name\":\"Metropolitan France\",\"abbreviation\":\"FX\"},{\"name\":\"Mexico\",\"abbreviation\":\"MX\"},{\"name\":\"Micronesia\",\"abbreviation\":\"FM\"},{\"name\":\"Midway Islands\",\"abbreviation\":\"MI\"},{\"name\":\"Moldova\",\"abbreviation\":\"MD\"},{\"name\":\"Monaco\",\"abbreviation\":\"MC\"},{\"name\":\"Mongolia\",\"abbreviation\":\"MN\"},{\"name\":\"Montenegro\",\"abbreviation\":\"ME\"},{\"name\":\"Montserrat\",\"abbreviation\":\"MS\"},{\"name\":\"Morocco\",\"abbreviation\":\"MA\"},{\"name\":\"Mozambique\",\"abbreviation\":\"MZ\"},{\"name\":\"Myanmar [Burma]\",\"abbreviation\":\"MM\"},{\"name\":\"Namibia\",\"abbreviation\":\"NA\"},{\"name\":\"Nauru\",\"abbreviation\":\"NR\"},{\"name\":\"Nepal\",\"abbreviation\":\"NP\"},{\"name\":\"Netherlands\",\"abbreviation\":\"NL\"},{\"name\":\"Netherlands Antilles\",\"abbreviation\":\"AN\"},{\"name\":\"Neutral Zone\",\"abbreviation\":\"NT\"},{\"name\":\"New Caledonia\",\"abbreviation\":\"NC\"},{\"name\":\"New Zealand\",\"abbreviation\":\"NZ\"},{\"name\":\"Nicaragua\",\"abbreviation\":\"NI\"},{\"name\":\"Niger\",\"abbreviation\":\"NE\"},{\"name\":\"Nigeria\",\"abbreviation\":\"NG\"},{\"name\":\"Niue\",\"abbreviation\":\"NU\"},{\"name\":\"Norfolk Island\",\"abbreviation\":\"NF\"},{\"name\":\"North Korea\",\"abbreviation\":\"KP\"},{\"name\":\"North Vietnam\",\"abbreviation\":\"VD\"},{\"name\":\"Northern Mariana Islands\",\"abbreviation\":\"MP\"},{\"name\":\"Norway\",\"abbreviation\":\"NO\"},{\"name\":\"Oman\",\"abbreviation\":\"OM\"},{\"name\":\"Pacific Islands Trust Territory\",\"abbreviation\":\"PC\"},{\"name\":\"Pakistan\",\"abbreviation\":\"PK\"},{\"name\":\"Palau\",\"abbreviation\":\"PW\"},{\"name\":\"Palestinian Territories\",\"abbreviation\":\"PS\"},{\"name\":\"Panama\",\"abbreviation\":\"PA\"},{\"name\":\"Panama Canal Zone\",\"abbreviation\":\"PZ\"},{\"name\":\"Papua New Guinea\",\"abbreviation\":\"PG\"},{\"name\":\"Paraguay\",\"abbreviation\":\"PY\"},{\"name\":\"People's Democratic Republic of Yemen\",\"abbreviation\":\"YD\"},{\"name\":\"Peru\",\"abbreviation\":\"PE\"},{\"name\":\"Philippines\",\"abbreviation\":\"PH\"},{\"name\":\"Pitcairn Islands\",\"abbreviation\":\"PN\"},{\"name\":\"Poland\",\"abbreviation\":\"PL\"},{\"name\":\"Portugal\",\"abbreviation\":\"PT\"},{\"name\":\"Puerto Rico\",\"abbreviation\":\"PR\"},{\"name\":\"Qatar\",\"abbreviation\":\"QA\"},{\"name\":\"Romania\",\"abbreviation\":\"RO\"},{\"name\":\"Russia\",\"abbreviation\":\"RU\"},{\"name\":\"Rwanda\",\"abbreviation\":\"RW\"},{\"name\":\"Réunion\",\"abbreviation\":\"RE\"},{\"name\":\"Saint Barthélemy\",\"abbreviation\":\"BL\"},{\"name\":\"Saint Helena\",\"abbreviation\":\"SH\"},{\"name\":\"Saint Kitts and Nevis\",\"abbreviation\":\"KN\"},{\"name\":\"Saint Lucia\",\"abbreviation\":\"LC\"},{\"name\":\"Saint Martin\",\"abbreviation\":\"MF\"},{\"name\":\"Saint Pierre and Miquelon\",\"abbreviation\":\"PM\"},{\"name\":\"Saint Vincent and the Grenadines\",\"abbreviation\":\"VC\"},{\"name\":\"Samoa\",\"abbreviation\":\"WS\"},{\"name\":\"San Marino\",\"abbreviation\":\"SM\"},{\"name\":\"Saudi Arabia\",\"abbreviation\":\"SA\"},{\"name\":\"Senegal\",\"abbreviation\":\"SN\"},{\"name\":\"Serbia\",\"abbreviation\":\"RS\"},{\"name\":\"Serbia and Montenegro\",\"abbreviation\":\"CS\"},{\"name\":\"Seychelles\",\"abbreviation\":\"SC\"},{\"name\":\"Sierra Leone\",\"abbreviation\":\"SL\"},{\"name\":\"Singapore\",\"abbreviation\":\"SG\"},{\"name\":\"Slovakia\",\"abbreviation\":\"SK\"},{\"name\":\"Slovenia\",\"abbreviation\":\"SI\"},{\"name\":\"Solomon Islands\",\"abbreviation\":\"SB\"},{\"name\":\"Somalia\",\"abbreviation\":\"SO\"},{\"name\":\"South Africa\",\"abbreviation\":\"ZA\"},{\"name\":\"South Georgia and the South Sandwich Islands\",\"abbreviation\":\"GS\"},{\"name\":\"South Korea\",\"abbreviation\":\"KR\"},{\"name\":\"Spain\",\"abbreviation\":\"ES\"},{\"name\":\"Sri Lanka\",\"abbreviation\":\"LK\"},{\"name\":\"Sudan\",\"abbreviation\":\"SD\"},{\"name\":\"Suriname\",\"abbreviation\":\"SR\"},{\"name\":\"Svalbard and Jan Mayen\",\"abbreviation\":\"SJ\"},{\"name\":\"Swaziland\",\"abbreviation\":\"SZ\"},{\"name\":\"Sweden\",\"abbreviation\":\"SE\"},{\"name\":\"Switzerland\",\"abbreviation\":\"CH\"},{\"name\":\"Syria\",\"abbreviation\":\"SY\"},{\"name\":\"São Tomé and Príncipe\",\"abbreviation\":\"ST\"},{\"name\":\"Taiwan\",\"abbreviation\":\"TW\"},{\"name\":\"Tajikistan\",\"abbreviation\":\"TJ\"},{\"name\":\"Tanzania\",\"abbreviation\":\"TZ\"},{\"name\":\"Thailand\",\"abbreviation\":\"TH\"},{\"name\":\"Timor-Leste\",\"abbreviation\":\"TL\"},{\"name\":\"Togo\",\"abbreviation\":\"TG\"},{\"name\":\"Tokelau\",\"abbreviation\":\"TK\"},{\"name\":\"Tonga\",\"abbreviation\":\"TO\"},{\"name\":\"Trinidad and Tobago\",\"abbreviation\":\"TT\"},{\"name\":\"Tunisia\",\"abbreviation\":\"TN\"},{\"name\":\"Turkey\",\"abbreviation\":\"TR\"},{\"name\":\"Turkmenistan\",\"abbreviation\":\"TM\"},{\"name\":\"Turks and Caicos Islands\",\"abbreviation\":\"TC\"},{\"name\":\"Tuvalu\",\"abbreviation\":\"TV\"},{\"name\":\"U.S. Minor Outlying Islands\",\"abbreviation\":\"UM\"},{\"name\":\"U.S. Miscellaneous Pacific Islands\",\"abbreviation\":\"PU\"},{\"name\":\"U.S. Virgin Islands\",\"abbreviation\":\"VI\"},{\"name\":\"Uganda\",\"abbreviation\":\"UG\"},{\"name\":\"Ukraine\",\"abbreviation\":\"UA\"},{\"name\":\"Union of Soviet Socialist Republics\",\"abbreviation\":\"SU\"},{\"name\":\"United Arab Emirates\",\"abbreviation\":\"AE\"},{\"name\":\"United Kingdom\",\"abbreviation\":\"GB\"},{\"name\":\"United States\",\"abbreviation\":\"US\"},{\"name\":\"Unknown or Invalid Region\",\"abbreviation\":\"ZZ\"},{\"name\":\"Uruguay\",\"abbreviation\":\"UY\"},{\"name\":\"Uzbekistan\",\"abbreviation\":\"UZ\"},{\"name\":\"Vanuatu\",\"abbreviation\":\"VU\"},{\"name\":\"Vatican City\",\"abbreviation\":\"VA\"},{\"name\":\"Venezuela\",\"abbreviation\":\"VE\"},{\"name\":\"Vietnam\",\"abbreviation\":\"VN\"},{\"name\":\"Wake Island\",\"abbreviation\":\"WK\"},{\"name\":\"Wallis and Futuna\",\"abbreviation\":\"WF\"},{\"name\":\"Western Sahara\",\"abbreviation\":\"EH\"},{\"name\":\"Yemen\",\"abbreviation\":\"YE\"},{\"name\":\"Zambia\",\"abbreviation\":\"ZM\"},{\"name\":\"Zimbabwe\",\"abbreviation\":\"ZW\"},{\"name\":\"Åland Islands\",\"abbreviation\":\"AX\"}],\n\n        provinces: {\n            \"ca\": [\n                {name: 'Alberta', abbreviation: 'AB'},\n                {name: 'British Columbia', abbreviation: 'BC'},\n                {name: 'Manitoba', abbreviation: 'MB'},\n                {name: 'New Brunswick', abbreviation: 'NB'},\n                {name: 'Newfoundland and Labrador', abbreviation: 'NL'},\n                {name: 'Nova Scotia', abbreviation: 'NS'},\n                {name: 'Ontario', abbreviation: 'ON'},\n                {name: 'Prince Edward Island', abbreviation: 'PE'},\n                {name: 'Quebec', abbreviation: 'QC'},\n                {name: 'Saskatchewan', abbreviation: 'SK'},\n\n                // The case could be made that the following are not actually provinces\n                // since they are technically considered \"territories\" however they all\n                // look the same on an envelope!\n                {name: 'Northwest Territories', abbreviation: 'NT'},\n                {name: 'Nunavut', abbreviation: 'NU'},\n                {name: 'Yukon', abbreviation: 'YT'}\n            ],\n            \"it\": [\n                { name: \"Agrigento\", abbreviation: \"AG\", code: 84 },\n                { name: \"Alessandria\", abbreviation: \"AL\", code: 6 },\n                { name: \"Ancona\", abbreviation: \"AN\", code: 42 },\n                { name: \"Aosta\", abbreviation: \"AO\", code: 7 },\n                { name: \"L'Aquila\", abbreviation: \"AQ\", code: 66 },\n                { name: \"Arezzo\", abbreviation: \"AR\", code: 51 },\n                { name: \"Ascoli-Piceno\", abbreviation: \"AP\", code: 44 },\n                { name: \"Asti\", abbreviation: \"AT\", code: 5 },\n                { name: \"Avellino\", abbreviation: \"AV\", code: 64 },\n                { name: \"Bari\", abbreviation: \"BA\", code: 72 },\n                { name: \"Barletta-Andria-Trani\", abbreviation: \"BT\", code: 72 },\n                { name: \"Belluno\", abbreviation: \"BL\", code: 25 },\n                { name: \"Benevento\", abbreviation: \"BN\", code: 62 },\n                { name: \"Bergamo\", abbreviation: \"BG\", code: 16 },\n                { name: \"Biella\", abbreviation: \"BI\", code: 96 },\n                { name: \"Bologna\", abbreviation: \"BO\", code: 37 },\n                { name: \"Bolzano\", abbreviation: \"BZ\", code: 21 },\n                { name: \"Brescia\", abbreviation: \"BS\", code: 17 },\n                { name: \"Brindisi\", abbreviation: \"BR\", code: 74 },\n                { name: \"Cagliari\", abbreviation: \"CA\", code: 92 },\n                { name: \"Caltanissetta\", abbreviation: \"CL\", code: 85 },\n                { name: \"Campobasso\", abbreviation: \"CB\", code: 70 },\n                { name: \"Carbonia Iglesias\", abbreviation: \"CI\", code: 70 },\n                { name: \"Caserta\", abbreviation: \"CE\", code: 61 },\n                { name: \"Catania\", abbreviation: \"CT\", code: 87 },\n                { name: \"Catanzaro\", abbreviation: \"CZ\", code: 79 },\n                { name: \"Chieti\", abbreviation: \"CH\", code: 69 },\n                { name: \"Como\", abbreviation: \"CO\", code: 13 },\n                { name: \"Cosenza\", abbreviation: \"CS\", code: 78 },\n                { name: \"Cremona\", abbreviation: \"CR\", code: 19 },\n                { name: \"Crotone\", abbreviation: \"KR\", code: 101 },\n                { name: \"Cuneo\", abbreviation: \"CN\", code: 4 },\n                { name: \"Enna\", abbreviation: \"EN\", code: 86 },\n                { name: \"Fermo\", abbreviation: \"FM\", code: 86 },\n                { name: \"Ferrara\", abbreviation: \"FE\", code: 38 },\n                { name: \"Firenze\", abbreviation: \"FI\", code: 48 },\n                { name: \"Foggia\", abbreviation: \"FG\", code: 71 },\n                { name: \"Forli-Cesena\", abbreviation: \"FC\", code: 71 },\n                { name: \"Frosinone\", abbreviation: \"FR\", code: 60 },\n                { name: \"Genova\", abbreviation: \"GE\", code: 10 },\n                { name: \"Gorizia\", abbreviation: \"GO\", code: 31 },\n                { name: \"Grosseto\", abbreviation: \"GR\", code: 53 },\n                { name: \"Imperia\", abbreviation: \"IM\", code: 8 },\n                { name: \"Isernia\", abbreviation: \"IS\", code: 94 },\n                { name: \"La-Spezia\", abbreviation: \"SP\", code: 66 },\n                { name: \"Latina\", abbreviation: \"LT\", code: 59 },\n                { name: \"Lecce\", abbreviation: \"LE\", code: 75 },\n                { name: \"Lecco\", abbreviation: \"LC\", code: 97 },\n                { name: \"Livorno\", abbreviation: \"LI\", code: 49 },\n                { name: \"Lodi\", abbreviation: \"LO\", code: 98 },\n                { name: \"Lucca\", abbreviation: \"LU\", code: 46 },\n                { name: \"Macerata\", abbreviation: \"MC\", code: 43 },\n                { name: \"Mantova\", abbreviation: \"MN\", code: 20 },\n                { name: \"Massa-Carrara\", abbreviation: \"MS\", code: 45 },\n                { name: \"Matera\", abbreviation: \"MT\", code: 77 },\n                { name: \"Medio Campidano\", abbreviation: \"VS\", code: 77 },\n                { name: \"Messina\", abbreviation: \"ME\", code: 83 },\n                { name: \"Milano\", abbreviation: \"MI\", code: 15 },\n                { name: \"Modena\", abbreviation: \"MO\", code: 36 },\n                { name: \"Monza-Brianza\", abbreviation: \"MB\", code: 36 },\n                { name: \"Napoli\", abbreviation: \"NA\", code: 63 },\n                { name: \"Novara\", abbreviation: \"NO\", code: 3 },\n                { name: \"Nuoro\", abbreviation: \"NU\", code: 91 },\n                { name: \"Ogliastra\", abbreviation: \"OG\", code: 91 },\n                { name: \"Olbia Tempio\", abbreviation: \"OT\", code: 91 },\n                { name: \"Oristano\", abbreviation: \"OR\", code: 95 },\n                { name: \"Padova\", abbreviation: \"PD\", code: 28 },\n                { name: \"Palermo\", abbreviation: \"PA\", code: 82 },\n                { name: \"Parma\", abbreviation: \"PR\", code: 34 },\n                { name: \"Pavia\", abbreviation: \"PV\", code: 18 },\n                { name: \"Perugia\", abbreviation: \"PG\", code: 54 },\n                { name: \"Pesaro-Urbino\", abbreviation: \"PU\", code: 41 },\n                { name: \"Pescara\", abbreviation: \"PE\", code: 68 },\n                { name: \"Piacenza\", abbreviation: \"PC\", code: 33 },\n                { name: \"Pisa\", abbreviation: \"PI\", code: 50 },\n                { name: \"Pistoia\", abbreviation: \"PT\", code: 47 },\n                { name: \"Pordenone\", abbreviation: \"PN\", code: 93 },\n                { name: \"Potenza\", abbreviation: \"PZ\", code: 76 },\n                { name: \"Prato\", abbreviation: \"PO\", code: 100 },\n                { name: \"Ragusa\", abbreviation: \"RG\", code: 88 },\n                { name: \"Ravenna\", abbreviation: \"RA\", code: 39 },\n                { name: \"Reggio-Calabria\", abbreviation: \"RC\", code: 35 },\n                { name: \"Reggio-Emilia\", abbreviation: \"RE\", code: 35 },\n                { name: \"Rieti\", abbreviation: \"RI\", code: 57 },\n                { name: \"Rimini\", abbreviation: \"RN\", code: 99 },\n                { name: \"Roma\", abbreviation: \"Roma\", code: 58 },\n                { name: \"Rovigo\", abbreviation: \"RO\", code: 29 },\n                { name: \"Salerno\", abbreviation: \"SA\", code: 65 },\n                { name: \"Sassari\", abbreviation: \"SS\", code: 90 },\n                { name: \"Savona\", abbreviation: \"SV\", code: 9 },\n                { name: \"Siena\", abbreviation: \"SI\", code: 52 },\n                { name: \"Siracusa\", abbreviation: \"SR\", code: 89 },\n                { name: \"Sondrio\", abbreviation: \"SO\", code: 14 },\n                { name: \"Taranto\", abbreviation: \"TA\", code: 73 },\n                { name: \"Teramo\", abbreviation: \"TE\", code: 67 },\n                { name: \"Terni\", abbreviation: \"TR\", code: 55 },\n                { name: \"Torino\", abbreviation: \"TO\", code: 1 },\n                { name: \"Trapani\", abbreviation: \"TP\", code: 81 },\n                { name: \"Trento\", abbreviation: \"TN\", code: 22 },\n                { name: \"Treviso\", abbreviation: \"TV\", code: 26 },\n                { name: \"Trieste\", abbreviation: \"TS\", code: 32 },\n                { name: \"Udine\", abbreviation: \"UD\", code: 30 },\n                { name: \"Varese\", abbreviation: \"VA\", code: 12 },\n                { name: \"Venezia\", abbreviation: \"VE\", code: 27 },\n                { name: \"Verbania\", abbreviation: \"VB\", code: 27 },\n                { name: \"Vercelli\", abbreviation: \"VC\", code: 2 },\n                { name: \"Verona\", abbreviation: \"VR\", code: 23 },\n                { name: \"Vibo-Valentia\", abbreviation: \"VV\", code: 102 },\n                { name: \"Vicenza\", abbreviation: \"VI\", code: 24 },\n                { name: \"Viterbo\", abbreviation: \"VT\", code: 56 }   \n            ]\n        },\n\n            // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json\n        nationalities: [\n           {name: 'Afghan'},\n           {name: 'Albanian'},\n           {name: 'Algerian'},\n           {name: 'American'},\n           {name: 'Andorran'},\n           {name: 'Angolan'},\n           {name: 'Antiguans'},\n           {name: 'Argentinean'},\n           {name: 'Armenian'},\n           {name: 'Australian'},\n           {name: 'Austrian'},\n           {name: 'Azerbaijani'},\n           {name: 'Bahami'},\n           {name: 'Bahraini'},\n           {name: 'Bangladeshi'},\n           {name: 'Barbadian'},\n           {name: 'Barbudans'},\n           {name: 'Batswana'},\n           {name: 'Belarusian'},\n           {name: 'Belgian'},\n           {name: 'Belizean'},\n           {name: 'Beninese'},\n           {name: 'Bhutanese'},\n           {name: 'Bolivian'},\n           {name: 'Bosnian'},\n           {name: 'Brazilian'},\n           {name: 'British'},\n           {name: 'Bruneian'},\n           {name: 'Bulgarian'},\n           {name: 'Burkinabe'},\n           {name: 'Burmese'},\n           {name: 'Burundian'},\n           {name: 'Cambodian'},\n           {name: 'Cameroonian'},\n           {name: 'Canadian'},\n           {name: 'Cape Verdean'},\n           {name: 'Central African'},\n           {name: 'Chadian'},\n           {name: 'Chilean'},\n           {name: 'Chinese'},\n           {name: 'Colombian'},\n           {name: 'Comoran'},\n           {name: 'Congolese'},\n           {name: 'Costa Rican'},\n           {name: 'Croatian'},\n           {name: 'Cuban'},\n           {name: 'Cypriot'},\n           {name: 'Czech'},\n           {name: 'Danish'},\n           {name: 'Djibouti'},\n           {name: 'Dominican'},\n           {name: 'Dutch'},\n           {name: 'East Timorese'},\n           {name: 'Ecuadorean'},\n           {name: 'Egyptian'},\n           {name: 'Emirian'},\n           {name: 'Equatorial Guinean'},\n           {name: 'Eritrean'},\n           {name: 'Estonian'},\n           {name: 'Ethiopian'},\n           {name: 'Fijian'},\n           {name: 'Filipino'},\n           {name: 'Finnish'},\n           {name: 'French'},\n           {name: 'Gabonese'},\n           {name: 'Gambian'},\n           {name: 'Georgian'},\n           {name: 'German'},\n           {name: 'Ghanaian'},\n           {name: 'Greek'},\n           {name: 'Grenadian'},\n           {name: 'Guatemalan'},\n           {name: 'Guinea-Bissauan'},\n           {name: 'Guinean'},\n           {name: 'Guyanese'},\n           {name: 'Haitian'},\n           {name: 'Herzegovinian'},\n           {name: 'Honduran'},\n           {name: 'Hungarian'},\n           {name: 'I-Kiribati'},\n           {name: 'Icelander'},\n           {name: 'Indian'},\n           {name: 'Indonesian'},\n           {name: 'Iranian'},\n           {name: 'Iraqi'},\n           {name: 'Irish'},\n           {name: 'Israeli'},\n           {name: 'Italian'},\n           {name: 'Ivorian'},\n           {name: 'Jamaican'},\n           {name: 'Japanese'},\n           {name: 'Jordanian'},\n           {name: 'Kazakhstani'},\n           {name: 'Kenyan'},\n           {name: 'Kittian and Nevisian'},\n           {name: 'Kuwaiti'},\n           {name: 'Kyrgyz'},\n           {name: 'Laotian'},\n           {name: 'Latvian'},\n           {name: 'Lebanese'},\n           {name: 'Liberian'},\n           {name: 'Libyan'},\n           {name: 'Liechtensteiner'},\n           {name: 'Lithuanian'},\n           {name: 'Luxembourger'},\n           {name: 'Macedonian'},\n           {name: 'Malagasy'},\n           {name: 'Malawian'},\n           {name: 'Malaysian'},\n           {name: 'Maldivan'},\n           {name: 'Malian'},\n           {name: 'Maltese'},\n           {name: 'Marshallese'},\n           {name: 'Mauritanian'},\n           {name: 'Mauritian'},\n           {name: 'Mexican'},\n           {name: 'Micronesian'},\n           {name: 'Moldovan'},\n           {name: 'Monacan'},\n           {name: 'Mongolian'},\n           {name: 'Moroccan'},\n           {name: 'Mosotho'},\n           {name: 'Motswana'},\n           {name: 'Mozambican'},\n           {name: 'Namibian'},\n           {name: 'Nauruan'},\n           {name: 'Nepalese'},\n           {name: 'New Zealander'},\n           {name: 'Nicaraguan'},\n           {name: 'Nigerian'},\n           {name: 'Nigerien'},\n           {name: 'North Korean'},\n           {name: 'Northern Irish'},\n           {name: 'Norwegian'},\n           {name: 'Omani'},\n           {name: 'Pakistani'},\n           {name: 'Palauan'},\n           {name: 'Panamanian'},\n           {name: 'Papua New Guinean'},\n           {name: 'Paraguayan'},\n           {name: 'Peruvian'},\n           {name: 'Polish'},\n           {name: 'Portuguese'},\n           {name: 'Qatari'},\n           {name: 'Romani'},          \n           {name: 'Russian'},\n           {name: 'Rwandan'},\n           {name: 'Saint Lucian'},\n           {name: 'Salvadoran'},\n           {name: 'Samoan'},\n           {name: 'San Marinese'},\n           {name: 'Sao Tomean'},\n           {name: 'Saudi'},\n           {name: 'Scottish'},\n           {name: 'Senegalese'},\n           {name: 'Serbian'},\n           {name: 'Seychellois'},\n           {name: 'Sierra Leonean'},\n           {name: 'Singaporean'},\n           {name: 'Slovakian'},\n           {name: 'Slovenian'},\n           {name: 'Solomon Islander'},\n           {name: 'Somali'},\n           {name: 'South African'},\n           {name: 'South Korean'},\n           {name: 'Spanish'},\n           {name: 'Sri Lankan'},\n           {name: 'Sudanese'},\n           {name: 'Surinamer'},\n           {name: 'Swazi'},\n           {name: 'Swedish'},\n           {name: 'Swiss'},\n           {name: 'Syrian'},\n           {name: 'Taiwanese'},\n           {name: 'Tajik'},\n           {name: 'Tanzanian'},\n           {name: 'Thai'},\n           {name: 'Togolese'},\n           {name: 'Tongan'},\n           {name: 'Trinidadian or Tobagonian'},\n           {name: 'Tunisian'},\n           {name: 'Turkish'},\n           {name: 'Tuvaluan'},\n           {name: 'Ugandan'},\n           {name: 'Ukrainian'},\n           {name: 'Uruguaya'},\n           {name: 'Uzbekistani'},\n           {name: 'Venezuela'},\n           {name: 'Vietnamese'},\n           {name: 'Wels'},\n           {name: 'Yemenit'},\n           {name: 'Zambia'},\n           {name: 'Zimbabwe'},\n        ],\n\n        us_states_and_dc: [\n            {name: 'Alabama', abbreviation: 'AL'},\n            {name: 'Alaska', abbreviation: 'AK'},\n            {name: 'Arizona', abbreviation: 'AZ'},\n            {name: 'Arkansas', abbreviation: 'AR'},\n            {name: 'California', abbreviation: 'CA'},\n            {name: 'Colorado', abbreviation: 'CO'},\n            {name: 'Connecticut', abbreviation: 'CT'},\n            {name: 'Delaware', abbreviation: 'DE'},\n            {name: 'District of Columbia', abbreviation: 'DC'},\n            {name: 'Florida', abbreviation: 'FL'},\n            {name: 'Georgia', abbreviation: 'GA'},\n            {name: 'Hawaii', abbreviation: 'HI'},\n            {name: 'Idaho', abbreviation: 'ID'},\n            {name: 'Illinois', abbreviation: 'IL'},\n            {name: 'Indiana', abbreviation: 'IN'},\n            {name: 'Iowa', abbreviation: 'IA'},\n            {name: 'Kansas', abbreviation: 'KS'},\n            {name: 'Kentucky', abbreviation: 'KY'},\n            {name: 'Louisiana', abbreviation: 'LA'},\n            {name: 'Maine', abbreviation: 'ME'},\n            {name: 'Maryland', abbreviation: 'MD'},\n            {name: 'Massachusetts', abbreviation: 'MA'},\n            {name: 'Michigan', abbreviation: 'MI'},\n            {name: 'Minnesota', abbreviation: 'MN'},\n            {name: 'Mississippi', abbreviation: 'MS'},\n            {name: 'Missouri', abbreviation: 'MO'},\n            {name: 'Montana', abbreviation: 'MT'},\n            {name: 'Nebraska', abbreviation: 'NE'},\n            {name: 'Nevada', abbreviation: 'NV'},\n            {name: 'New Hampshire', abbreviation: 'NH'},\n            {name: 'New Jersey', abbreviation: 'NJ'},\n            {name: 'New Mexico', abbreviation: 'NM'},\n            {name: 'New York', abbreviation: 'NY'},\n            {name: 'North Carolina', abbreviation: 'NC'},\n            {name: 'North Dakota', abbreviation: 'ND'},\n            {name: 'Ohio', abbreviation: 'OH'},\n            {name: 'Oklahoma', abbreviation: 'OK'},\n            {name: 'Oregon', abbreviation: 'OR'},\n            {name: 'Pennsylvania', abbreviation: 'PA'},\n            {name: 'Rhode Island', abbreviation: 'RI'},\n            {name: 'South Carolina', abbreviation: 'SC'},\n            {name: 'South Dakota', abbreviation: 'SD'},\n            {name: 'Tennessee', abbreviation: 'TN'},\n            {name: 'Texas', abbreviation: 'TX'},\n            {name: 'Utah', abbreviation: 'UT'},\n            {name: 'Vermont', abbreviation: 'VT'},\n            {name: 'Virginia', abbreviation: 'VA'},\n            {name: 'Washington', abbreviation: 'WA'},\n            {name: 'West Virginia', abbreviation: 'WV'},\n            {name: 'Wisconsin', abbreviation: 'WI'},\n            {name: 'Wyoming', abbreviation: 'WY'}\n        ],\n\n        territories: [\n            {name: 'American Samoa', abbreviation: 'AS'},\n            {name: 'Federated States of Micronesia', abbreviation: 'FM'},\n            {name: 'Guam', abbreviation: 'GU'},\n            {name: 'Marshall Islands', abbreviation: 'MH'},\n            {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n            {name: 'Puerto Rico', abbreviation: 'PR'},\n            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}\n        ],\n\n        armed_forces: [\n            {name: 'Armed Forces Europe', abbreviation: 'AE'},\n            {name: 'Armed Forces Pacific', abbreviation: 'AP'},\n            {name: 'Armed Forces the Americas', abbreviation: 'AA'}\n        ],\n\n        country_regions: {\n            it: [\n                { name: \"Valle d'Aosta\", abbreviation: \"VDA\" },\n                { name: \"Piemonte\", abbreviation: \"PIE\" },\n                { name: \"Lombardia\", abbreviation: \"LOM\" },\n                { name: \"Veneto\", abbreviation: \"VEN\" },\n                { name: \"Trentino Alto Adige\", abbreviation: \"TAA\" },\n                { name: \"Friuli Venezia Giulia\", abbreviation: \"FVG\" },\n                { name: \"Liguria\", abbreviation: \"LIG\" },\n                { name: \"Emilia Romagna\", abbreviation: \"EMR\" },\n                { name: \"Toscana\", abbreviation: \"TOS\" },\n                { name: \"Umbria\", abbreviation: \"UMB\" },\n                { name: \"Marche\", abbreviation: \"MAR\" },\n                { name: \"Abruzzo\", abbreviation: \"ABR\" },\n                { name: \"Lazio\", abbreviation: \"LAZ\" },\n                { name: \"Campania\", abbreviation: \"CAM\" },\n                { name: \"Puglia\", abbreviation: \"PUG\" },\n                { name: \"Basilicata\", abbreviation: \"BAS\" },\n                { name: \"Molise\", abbreviation: \"MOL\" },\n                { name: \"Calabria\", abbreviation: \"CAL\" },\n                { name: \"Sicilia\", abbreviation: \"SIC\" },\n                { name: \"Sardegna\", abbreviation: \"SAR\" }\n            ]\n        },\n\n        street_suffixes: {\n            'us': [\n                {name: 'Avenue', abbreviation: 'Ave'},\n                {name: 'Boulevard', abbreviation: 'Blvd'},\n                {name: 'Center', abbreviation: 'Ctr'},\n                {name: 'Circle', abbreviation: 'Cir'},\n                {name: 'Court', abbreviation: 'Ct'},\n                {name: 'Drive', abbreviation: 'Dr'},\n                {name: 'Extension', abbreviation: 'Ext'},\n                {name: 'Glen', abbreviation: 'Gln'},\n                {name: 'Grove', abbreviation: 'Grv'},\n                {name: 'Heights', abbreviation: 'Hts'},\n                {name: 'Highway', abbreviation: 'Hwy'},\n                {name: 'Junction', abbreviation: 'Jct'},\n                {name: 'Key', abbreviation: 'Key'},\n                {name: 'Lane', abbreviation: 'Ln'},\n                {name: 'Loop', abbreviation: 'Loop'},\n                {name: 'Manor', abbreviation: 'Mnr'},\n                {name: 'Mill', abbreviation: 'Mill'},\n                {name: 'Park', abbreviation: 'Park'},\n                {name: 'Parkway', abbreviation: 'Pkwy'},\n                {name: 'Pass', abbreviation: 'Pass'},\n                {name: 'Path', abbreviation: 'Path'},\n                {name: 'Pike', abbreviation: 'Pike'},\n                {name: 'Place', abbreviation: 'Pl'},\n                {name: 'Plaza', abbreviation: 'Plz'},\n                {name: 'Point', abbreviation: 'Pt'},\n                {name: 'Ridge', abbreviation: 'Rdg'},\n                {name: 'River', abbreviation: 'Riv'},\n                {name: 'Road', abbreviation: 'Rd'},\n                {name: 'Square', abbreviation: 'Sq'},\n                {name: 'Street', abbreviation: 'St'},\n                {name: 'Terrace', abbreviation: 'Ter'},\n                {name: 'Trail', abbreviation: 'Trl'},\n                {name: 'Turnpike', abbreviation: 'Tpke'},\n                {name: 'View', abbreviation: 'Vw'},\n                {name: 'Way', abbreviation: 'Way'}\n            ],\n            'it': [\n                { name: 'Accesso', abbreviation: 'Acc.' },\n                { name: 'Alzaia', abbreviation: 'Alz.' },\n                { name: 'Arco', abbreviation: 'Arco' },\n                { name: 'Archivolto', abbreviation: 'Acv.' },\n                { name: 'Arena', abbreviation: 'Arena' },\n                { name: 'Argine', abbreviation: 'Argine' },\n                { name: 'Bacino', abbreviation: 'Bacino' },\n                { name: 'Banchi', abbreviation: 'Banchi' },\n                { name: 'Banchina', abbreviation: 'Ban.' },\n                { name: 'Bastioni', abbreviation: 'Bas.' },\n                { name: 'Belvedere', abbreviation: 'Belv.' },\n                { name: 'Borgata', abbreviation: 'B.ta' },\n                { name: 'Borgo', abbreviation: 'B.go' },\n                { name: 'Calata', abbreviation: 'Cal.' },\n                { name: 'Calle', abbreviation: 'Calle' },\n                { name: 'Campiello', abbreviation: 'Cam.' },\n                { name: 'Campo', abbreviation: 'Cam.' },\n                { name: 'Canale', abbreviation: 'Can.' },\n                { name: 'Carraia', abbreviation: 'Carr.' },\n                { name: 'Cascina', abbreviation: 'Cascina' },\n                { name: 'Case sparse', abbreviation: 'c.s.' },\n                { name: 'Cavalcavia', abbreviation: 'Cv.' },\n                { name: 'Circonvallazione', abbreviation: 'Cv.' },\n                { name: 'Complanare', abbreviation: 'C.re' },\n                { name: 'Contrada', abbreviation: 'C.da' },\n                { name: 'Corso', abbreviation: 'C.so' },\n                { name: 'Corte', abbreviation: 'C.te' },\n                { name: 'Cortile', abbreviation: 'C.le' },\n                { name: 'Diramazione', abbreviation: 'Dir.' },\n                { name: 'Fondaco', abbreviation: 'F.co' },\n                { name: 'Fondamenta', abbreviation: 'F.ta' },\n                { name: 'Fondo', abbreviation: 'F.do' },\n                { name: 'Frazione', abbreviation: 'Fr.' },\n                { name: 'Isola', abbreviation: 'Is.' },\n                { name: 'Largo', abbreviation: 'L.go' },\n                { name: 'Litoranea', abbreviation: 'Lit.' },\n                { name: 'Lungolago', abbreviation: 'L.go lago' },\n                { name: 'Lungo Po', abbreviation: 'l.go Po' },\n                { name: 'Molo', abbreviation: 'Molo' },\n                { name: 'Mura', abbreviation: 'Mura' },\n                { name: 'Passaggio privato', abbreviation: 'pass. priv.' },\n                { name: 'Passeggiata', abbreviation: 'Pass.' },\n                { name: 'Piazza', abbreviation: 'P.zza' },\n                { name: 'Piazzale', abbreviation: 'P.le' },\n                { name: 'Ponte', abbreviation: 'P.te' },\n                { name: 'Portico', abbreviation: 'P.co' },\n                { name: 'Rampa', abbreviation: 'Rampa' },\n                { name: 'Regione', abbreviation: 'Reg.' },\n                { name: 'Rione', abbreviation: 'R.ne' },\n                { name: 'Rio', abbreviation: 'Rio' },\n                { name: 'Ripa', abbreviation: 'Ripa' },\n                { name: 'Riva', abbreviation: 'Riva' },\n                { name: 'Rondò', abbreviation: 'Rondò' },\n                { name: 'Rotonda', abbreviation: 'Rot.' },\n                { name: 'Sagrato', abbreviation: 'Sagr.' },\n                { name: 'Salita', abbreviation: 'Sal.' },\n                { name: 'Scalinata', abbreviation: 'Scal.' },\n                { name: 'Scalone', abbreviation: 'Scal.' },\n                { name: 'Slargo', abbreviation: 'Sl.' },\n                { name: 'Sottoportico', abbreviation: 'Sott.' },\n                { name: 'Strada', abbreviation: 'Str.' },\n                { name: 'Stradale', abbreviation: 'Str.le' },\n                { name: 'Strettoia', abbreviation: 'Strett.' },\n                { name: 'Traversa', abbreviation: 'Trav.' },\n                { name: 'Via', abbreviation: 'V.' },\n                { name: 'Viale', abbreviation: 'V.le' },\n                { name: 'Vicinale', abbreviation: 'Vic.le' },\n                { name: 'Vicolo', abbreviation: 'Vic.' }\n            ]\n        },\n\n        months: [\n            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},\n            // Not messing with leap years...\n            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},\n            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},\n            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},\n            {name: 'May', short_name: 'May', numeric: '05', days: 31},\n            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},\n            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},\n            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},\n            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},\n            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},\n            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},\n            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}\n        ],\n\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\n        cc_types: [\n            {name: \"American Express\", short_name: 'amex', prefix: '34', length: 15},\n            {name: \"Bankcard\", short_name: 'bankcard', prefix: '5610', length: 16},\n            {name: \"China UnionPay\", short_name: 'chinaunion', prefix: '62', length: 16},\n            {name: \"Diners Club Carte Blanche\", short_name: 'dccarte', prefix: '300', length: 14},\n            {name: \"Diners Club enRoute\", short_name: 'dcenroute', prefix: '2014', length: 15},\n            {name: \"Diners Club International\", short_name: 'dcintl', prefix: '36', length: 14},\n            {name: \"Diners Club United States & Canada\", short_name: 'dcusc', prefix: '54', length: 16},\n            {name: \"Discover Card\", short_name: 'discover', prefix: '6011', length: 16},\n            {name: \"InstaPayment\", short_name: 'instapay', prefix: '637', length: 16},\n            {name: \"JCB\", short_name: 'jcb', prefix: '3528', length: 16},\n            {name: \"Laser\", short_name: 'laser', prefix: '6304', length: 16},\n            {name: \"Maestro\", short_name: 'maestro', prefix: '5018', length: 16},\n            {name: \"Mastercard\", short_name: 'mc', prefix: '51', length: 16},\n            {name: \"Solo\", short_name: 'solo', prefix: '6334', length: 16},\n            {name: \"Switch\", short_name: 'switch', prefix: '4903', length: 16},\n            {name: \"Visa\", short_name: 'visa', prefix: '4', length: 16},\n            {name: \"Visa Electron\", short_name: 'electron', prefix: '4026', length: 16}\n        ],\n\n        //return all world currency by ISO 4217\n        currency_types: [\n            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},\n            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},\n            {'code' : 'ALL', 'name' : 'Albania Lek'},\n            {'code' : 'AMD', 'name' : 'Armenia Dram'},\n            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},\n            {'code' : 'AOA', 'name' : 'Angola Kwanza'},\n            {'code' : 'ARS', 'name' : 'Argentina Peso'},\n            {'code' : 'AUD', 'name' : 'Australia Dollar'},\n            {'code' : 'AWG', 'name' : 'Aruba Guilder'},\n            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},\n            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},\n            {'code' : 'BBD', 'name' : 'Barbados Dollar'},\n            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},\n            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},\n            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},\n            {'code' : 'BIF', 'name' : 'Burundi Franc'},\n            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},\n            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},\n            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},\n            {'code' : 'BRL', 'name' : 'Brazil Real'},\n            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},\n            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},\n            {'code' : 'BWP', 'name' : 'Botswana Pula'},\n            {'code' : 'BYR', 'name' : 'Belarus Ruble'},\n            {'code' : 'BZD', 'name' : 'Belize Dollar'},\n            {'code' : 'CAD', 'name' : 'Canada Dollar'},\n            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},\n            {'code' : 'CHF', 'name' : 'Switzerland Franc'},\n            {'code' : 'CLP', 'name' : 'Chile Peso'},\n            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},\n            {'code' : 'COP', 'name' : 'Colombia Peso'},\n            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},\n            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},\n            {'code' : 'CUP', 'name' : 'Cuba Peso'},\n            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},\n            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},\n            {'code' : 'DJF', 'name' : 'Djibouti Franc'},\n            {'code' : 'DKK', 'name' : 'Denmark Krone'},\n            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},\n            {'code' : 'DZD', 'name' : 'Algeria Dinar'},\n            {'code' : 'EGP', 'name' : 'Egypt Pound'},\n            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},\n            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},\n            {'code' : 'EUR', 'name' : 'Euro Member Countries'},\n            {'code' : 'FJD', 'name' : 'Fiji Dollar'},\n            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},\n            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},\n            {'code' : 'GEL', 'name' : 'Georgia Lari'},\n            {'code' : 'GGP', 'name' : 'Guernsey Pound'},\n            {'code' : 'GHS', 'name' : 'Ghana Cedi'},\n            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},\n            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},\n            {'code' : 'GNF', 'name' : 'Guinea Franc'},\n            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},\n            {'code' : 'GYD', 'name' : 'Guyana Dollar'},\n            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},\n            {'code' : 'HNL', 'name' : 'Honduras Lempira'},\n            {'code' : 'HRK', 'name' : 'Croatia Kuna'},\n            {'code' : 'HTG', 'name' : 'Haiti Gourde'},\n            {'code' : 'HUF', 'name' : 'Hungary Forint'},\n            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},\n            {'code' : 'ILS', 'name' : 'Israel Shekel'},\n            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},\n            {'code' : 'INR', 'name' : 'India Rupee'},\n            {'code' : 'IQD', 'name' : 'Iraq Dinar'},\n            {'code' : 'IRR', 'name' : 'Iran Rial'},\n            {'code' : 'ISK', 'name' : 'Iceland Krona'},\n            {'code' : 'JEP', 'name' : 'Jersey Pound'},\n            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},\n            {'code' : 'JOD', 'name' : 'Jordan Dinar'},\n            {'code' : 'JPY', 'name' : 'Japan Yen'},\n            {'code' : 'KES', 'name' : 'Kenya Shilling'},\n            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},\n            {'code' : 'KHR', 'name' : 'Cambodia Riel'},\n            {'code' : 'KMF', 'name' : 'Comoros Franc'},\n            {'code' : 'KPW', 'name' : 'Korea (North) Won'},\n            {'code' : 'KRW', 'name' : 'Korea (South) Won'},\n            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},\n            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},\n            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},\n            {'code' : 'LAK', 'name' : 'Laos Kip'},\n            {'code' : 'LBP', 'name' : 'Lebanon Pound'},\n            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},\n            {'code' : 'LRD', 'name' : 'Liberia Dollar'},\n            {'code' : 'LSL', 'name' : 'Lesotho Loti'},\n            {'code' : 'LTL', 'name' : 'Lithuania Litas'},\n            {'code' : 'LYD', 'name' : 'Libya Dinar'},\n            {'code' : 'MAD', 'name' : 'Morocco Dirham'},\n            {'code' : 'MDL', 'name' : 'Moldova Leu'},\n            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},\n            {'code' : 'MKD', 'name' : 'Macedonia Denar'},\n            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},\n            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},\n            {'code' : 'MOP', 'name' : 'Macau Pataca'},\n            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},\n            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},\n            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},\n            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},\n            {'code' : 'MXN', 'name' : 'Mexico Peso'},\n            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},\n            {'code' : 'MZN', 'name' : 'Mozambique Metical'},\n            {'code' : 'NAD', 'name' : 'Namibia Dollar'},\n            {'code' : 'NGN', 'name' : 'Nigeria Naira'},\n            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},\n            {'code' : 'NOK', 'name' : 'Norway Krone'},\n            {'code' : 'NPR', 'name' : 'Nepal Rupee'},\n            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},\n            {'code' : 'OMR', 'name' : 'Oman Rial'},\n            {'code' : 'PAB', 'name' : 'Panama Balboa'},\n            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},\n            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},\n            {'code' : 'PHP', 'name' : 'Philippines Peso'},\n            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},\n            {'code' : 'PLN', 'name' : 'Poland Zloty'},\n            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},\n            {'code' : 'QAR', 'name' : 'Qatar Riyal'},\n            {'code' : 'RON', 'name' : 'Romania New Leu'},\n            {'code' : 'RSD', 'name' : 'Serbia Dinar'},\n            {'code' : 'RUB', 'name' : 'Russia Ruble'},\n            {'code' : 'RWF', 'name' : 'Rwanda Franc'},\n            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},\n            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},\n            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},\n            {'code' : 'SDG', 'name' : 'Sudan Pound'},\n            {'code' : 'SEK', 'name' : 'Sweden Krona'},\n            {'code' : 'SGD', 'name' : 'Singapore Dollar'},\n            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},\n            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},\n            {'code' : 'SOS', 'name' : 'Somalia Shilling'},\n            {'code' : 'SPL', 'name' : 'Seborga Luigino'},\n            {'code' : 'SRD', 'name' : 'Suriname Dollar'},\n            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},\n            {'code' : 'SVC', 'name' : 'El Salvador Colon'},\n            {'code' : 'SYP', 'name' : 'Syria Pound'},\n            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},\n            {'code' : 'THB', 'name' : 'Thailand Baht'},\n            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},\n            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},\n            {'code' : 'TND', 'name' : 'Tunisia Dinar'},\n            {'code' : 'TOP', 'name' : 'Tonga Pa\\'anga'},\n            {'code' : 'TRY', 'name' : 'Turkey Lira'},\n            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},\n            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},\n            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},\n            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},\n            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},\n            {'code' : 'UGX', 'name' : 'Uganda Shilling'},\n            {'code' : 'USD', 'name' : 'United States Dollar'},\n            {'code' : 'UYU', 'name' : 'Uruguay Peso'},\n            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},\n            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},\n            {'code' : 'VND', 'name' : 'Viet Nam Dong'},\n            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},\n            {'code' : 'WST', 'name' : 'Samoa Tala'},\n            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},\n            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},\n            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},\n            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},\n            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},\n            {'code' : 'YER', 'name' : 'Yemen Rial'},\n            {'code' : 'ZAR', 'name' : 'South Africa Rand'},\n            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},\n            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}\n        ],\n        \n        // return the names of all valide colors\n        colorNames : [  \"AliceBlue\", \"Black\", \"Navy\", \"DarkBlue\", \"MediumBlue\", \"Blue\", \"DarkGreen\", \"Green\", \"Teal\", \"DarkCyan\", \"DeepSkyBlue\", \"DarkTurquoise\", \"MediumSpringGreen\", \"Lime\", \"SpringGreen\",\n            \"Aqua\", \"Cyan\", \"MidnightBlue\", \"DodgerBlue\", \"LightSeaGreen\", \"ForestGreen\", \"SeaGreen\", \"DarkSlateGray\", \"LimeGreen\", \"MediumSeaGreen\", \"Turquoise\", \"RoyalBlue\", \"SteelBlue\", \"DarkSlateBlue\", \"MediumTurquoise\",\n            \"Indigo\", \"DarkOliveGreen\", \"CadetBlue\", \"CornflowerBlue\", \"RebeccaPurple\", \"MediumAquaMarine\", \"DimGray\", \"SlateBlue\", \"OliveDrab\", \"SlateGray\", \"LightSlateGray\", \"MediumSlateBlue\", \"LawnGreen\", \"Chartreuse\",\n            \"Aquamarine\", \"Maroon\", \"Purple\", \"Olive\", \"Gray\", \"SkyBlue\", \"LightSkyBlue\", \"BlueViolet\", \"DarkRed\", \"DarkMagenta\", \"SaddleBrown\", \"Ivory\", \"White\",\n            \"DarkSeaGreen\", \"LightGreen\", \"MediumPurple\", \"DarkViolet\", \"PaleGreen\", \"DarkOrchid\", \"YellowGreen\", \"Sienna\", \"Brown\", \"DarkGray\", \"LightBlue\", \"GreenYellow\", \"PaleTurquoise\", \"LightSteelBlue\", \"PowderBlue\",\n            \"FireBrick\", \"DarkGoldenRod\", \"MediumOrchid\", \"RosyBrown\", \"DarkKhaki\", \"Silver\", \"MediumVioletRed\", \"IndianRed\", \"Peru\", \"Chocolate\", \"Tan\", \"LightGray\", \"Thistle\", \"Orchid\", \"GoldenRod\", \"PaleVioletRed\",\n            \"Crimson\", \"Gainsboro\", \"Plum\", \"BurlyWood\", \"LightCyan\", \"Lavender\", \"DarkSalmon\", \"Violet\", \"PaleGoldenRod\", \"LightCoral\", \"Khaki\", \"AliceBlue\", \"HoneyDew\", \"Azure\", \"SandyBrown\", \"Wheat\", \"Beige\", \"WhiteSmoke\",\n            \"MintCream\", \"GhostWhite\", \"Salmon\", \"AntiqueWhite\", \"Linen\", \"LightGoldenRodYellow\", \"OldLace\", \"Red\", \"Fuchsia\", \"Magenta\", \"DeepPink\", \"OrangeRed\", \"Tomato\", \"HotPink\", \"Coral\", \"DarkOrange\", \"LightSalmon\", \"Orange\",\n            \"LightPink\", \"Pink\", \"Gold\", \"PeachPuff\", \"NavajoWhite\", \"Moccasin\", \"Bisque\", \"MistyRose\", \"BlanchedAlmond\", \"PapayaWhip\", \"LavenderBlush\", \"SeaShell\", \"Cornsilk\", \"LemonChiffon\", \"FloralWhite\", \"Snow\", \"Yellow\", \"LightYellow\"\n        ],        \n\n        fileExtension : {\n            \"raster\"    : [\"bmp\", \"gif\", \"gpl\", \"ico\", \"jpeg\", \"psd\", \"png\", \"psp\", \"raw\", \"tiff\"],\n            \"vector\"    : [\"3dv\", \"amf\", \"awg\", \"ai\", \"cgm\", \"cdr\", \"cmx\", \"dxf\", \"e2d\", \"egt\", \"eps\", \"fs\", \"odg\", \"svg\", \"xar\"],\n            \"3d\"        : [\"3dmf\", \"3dm\", \"3mf\", \"3ds\", \"an8\", \"aoi\", \"blend\", \"cal3d\", \"cob\", \"ctm\", \"iob\", \"jas\", \"max\", \"mb\", \"mdx\", \"obj\", \"x\", \"x3d\"],\n            \"document\"  : [\"doc\", \"docx\", \"dot\", \"html\", \"xml\", \"odt\", \"odm\", \"ott\", \"csv\", \"rtf\", \"tex\", \"xhtml\", \"xps\"]\n        }\n    };\n\n    var o_hasOwnProperty = Object.prototype.hasOwnProperty;\n    var o_keys = (Object.keys || function(obj) {\n      var result = [];\n      for (var key in obj) {\n        if (o_hasOwnProperty.call(obj, key)) {\n          result.push(key);\n        }\n      }\n\n      return result;\n    });\n\n    function _copyObject(source, target) {\n      var keys = o_keys(source);\n      var key;\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        target[key] = source[key] || target[key];\n      }\n    }\n\n    function _copyArray(source, target) {\n      for (var i = 0, l = source.length; i < l; i++) {\n        target[i] = source[i];\n      }\n    }\n\n    function copyObject(source, _target) {\n        var isArray = Array.isArray(source);\n        var target = _target || (isArray ? new Array(source.length) : {});\n\n        if (isArray) {\n          _copyArray(source, target);\n        } else {\n          _copyObject(source, target);\n        }\n\n        return target;\n    }\n\n    /** Get the data based on key**/\n    Chance.prototype.get = function (name) {\n        return copyObject(data[name]);\n    };\n\n    // Mac Address\n    Chance.prototype.mac_address = function(options){\n        // typically mac addresses are separated by \":\"\n        // however they can also be separated by \"-\"\n        // the network variant uses a dot every fourth byte\n\n        options = initOptions(options);\n        if(!options.separator) {\n            options.separator =  options.networkVersion ? \".\" : \":\";\n        }\n\n        var mac_pool=\"ABCDEF1234567890\",\n            mac = \"\";\n        if(!options.networkVersion) {\n            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);\n        } else {\n            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);\n        }\n\n        return mac;\n    };\n\n    Chance.prototype.normal = function (options) {\n        options = initOptions(options, {mean : 0, dev : 1, pool : []});\n\n        testRange(\n            options.pool.constructor !== Array,\n            \"Chance: The pool option must be a valid array.\"\n        );\n\n        // If a pool has been passed, then we are returning an item from that pool,\n        // using the normal distribution settings that were passed in\n        if (options.pool.length > 0) {\n            return this.normal_pool(options);\n        }\n\n        // The Marsaglia Polar method\n        var s, u, v, norm,\n            mean = options.mean,\n            dev = options.dev;\n\n        do {\n            // U and V are from the uniform distribution on (-1, 1)\n            u = this.random() * 2 - 1;\n            v = this.random() * 2 - 1;\n\n            s = u * u + v * v;\n        } while (s >= 1);\n\n        // Compute the standard normal variate\n        norm = u * Math.sqrt(-2 * Math.log(s) / s);\n\n        // Shape and scale\n        return dev * norm + mean;\n    };\n\n    Chance.prototype.normal_pool = function(options) {\n        var performanceCounter = 0;\n        do {\n            var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));\n            if (idx < options.pool.length && idx >= 0) {\n                return options.pool[idx];\n            } else {\n                performanceCounter++;\n            }\n        } while(performanceCounter < 100);\n\n        throw new RangeError(\"Chance: Your pool is too small for the given mean and standard deviation. Please adjust.\");\n    };\n\n    Chance.prototype.radio = function (options) {\n        // Initial Letter (Typically Designated by Side of Mississippi River)\n        options = initOptions(options, {side : \"?\"});\n        var fl = \"\";\n        switch (options.side.toLowerCase()) {\n        case \"east\":\n        case \"e\":\n            fl = \"W\";\n            break;\n        case \"west\":\n        case \"w\":\n            fl = \"K\";\n            break;\n        default:\n            fl = this.character({pool: \"KW\"});\n            break;\n        }\n\n        return fl + this.character({alpha: true, casing: \"upper\"}) +\n                this.character({alpha: true, casing: \"upper\"}) +\n                this.character({alpha: true, casing: \"upper\"});\n    };\n\n    // Set the data as key and data or the data map\n    Chance.prototype.set = function (name, values) {\n        if (typeof name === \"string\") {\n            data[name] = values;\n        } else {\n            data = copyObject(name, data);\n        }\n    };\n\n    Chance.prototype.tv = function (options) {\n        return this.radio(options);\n    };\n\n    // ID number for Brazil companies\n    Chance.prototype.cnpj = function () {\n        var n = this.n(this.natural, 8, { max: 9 });\n        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\n        d1 = 11 - (d1 % 11);\n        if (d1>=10){\n            d1 = 0;\n        }\n        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\n        d2 = 11 - (d2 % 11);\n        if (d2>=10){\n            d2 = 0;\n        }\n        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;\n    };\n\n    // -- End Miscellaneous --\n\n    Chance.prototype.mersenne_twister = function (seed) {\n        return new MersenneTwister(seed);\n    };\n\n    Chance.prototype.blueimp_md5 = function () {\n        return new BlueImpMD5();\n    };\n\n    // Mersenne Twister from https://gist.github.com/banksean/300494\n    var MersenneTwister = function (seed) {\n        if (seed === undefined) {\n            // kept random number same size as time used previously to ensure no unexpected results downstream\n            seed = Math.floor(Math.random()*Math.pow(10,13));\n        }\n        /* Period parameters */\n        this.N = 624;\n        this.M = 397;\n        this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n        this.mt = new Array(this.N); /* the array for the state vector */\n        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */\n\n        this.init_genrand(seed);\n    };\n\n    /* initializes mt[N] with a seed */\n    MersenneTwister.prototype.init_genrand = function (s) {\n        this.mt[0] = s >>> 0;\n        for (this.mti = 1; this.mti < this.N; this.mti++) {\n            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n            /* In the previous versions, MSBs of the seed affect   */\n            /* only MSBs of the array mt[].                        */\n            /* 2002/01/09 modified by Makoto Matsumoto             */\n            this.mt[this.mti] >>>= 0;\n            /* for >32 bit machines */\n        }\n    };\n\n    /* initialize by an array with array-length */\n    /* init_key is the array for initializing keys */\n    /* key_length is its length */\n    /* slight change for C++, 2004/2/26 */\n    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {\n        var i = 1, j = 0, k, s;\n        this.init_genrand(19650218);\n        k = (this.N > key_length ? this.N : key_length);\n        for (; k; k--) {\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n            i++;\n            j++;\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\n            if (j >= key_length) { j = 0; }\n        }\n        for (k = this.N - 1; k; k--) {\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n            i++;\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\n        }\n\n        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n    };\n\n    /* generates a random number on [0,0xffffffff]-interval */\n    MersenneTwister.prototype.genrand_int32 = function () {\n        var y;\n        var mag01 = new Array(0x0, this.MATRIX_A);\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n        if (this.mti >= this.N) { /* generate N words at one time */\n            var kk;\n\n            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */\n                this.init_genrand(5489); /* a default initial seed is used */\n            }\n            for (kk = 0; kk < this.N - this.M; kk++) {\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\n                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (;kk < this.N - 1; kk++) {\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\n                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this.mti = 0;\n        }\n\n        y = this.mt[this.mti++];\n\n        /* Tempering */\n        y ^= (y >>> 11);\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= (y >>> 18);\n\n        return y >>> 0;\n    };\n\n    /* generates a random number on [0,0x7fffffff]-interval */\n    MersenneTwister.prototype.genrand_int31 = function () {\n        return (this.genrand_int32() >>> 1);\n    };\n\n    /* generates a random number on [0,1]-real-interval */\n    MersenneTwister.prototype.genrand_real1 = function () {\n        return this.genrand_int32() * (1.0 / 4294967295.0);\n        /* divided by 2^32-1 */\n    };\n\n    /* generates a random number on [0,1)-real-interval */\n    MersenneTwister.prototype.random = function () {\n        return this.genrand_int32() * (1.0 / 4294967296.0);\n        /* divided by 2^32 */\n    };\n\n    /* generates a random number on (0,1)-real-interval */\n    MersenneTwister.prototype.genrand_real3 = function () {\n        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);\n        /* divided by 2^32 */\n    };\n\n    /* generates a random number on [0,1) with 53-bit resolution*/\n    MersenneTwister.prototype.genrand_res53 = function () {\n        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n    };\n\n    // BlueImp MD5 hashing algorithm from https://github.com/blueimp/JavaScript-MD5\n    var BlueImpMD5 = function () {};\n\n    BlueImpMD5.prototype.VERSION = '1.0.1';\n\n    /*\n    * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n    * to work around bugs in some JS interpreters.\n    */\n    BlueImpMD5.prototype.safe_add = function safe_add(x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    };\n\n    /*\n    * Bitwise rotate a 32-bit number to the left.\n    */\n    BlueImpMD5.prototype.bit_roll = function (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt));\n    };\n\n    /*\n    * These functions implement the five basic operations the algorithm uses.\n    */\n    BlueImpMD5.prototype.md5_cmn = function (q, a, b, x, s, t) {\n        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);\n    };\n    BlueImpMD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    };\n    BlueImpMD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    };\n    BlueImpMD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n    BlueImpMD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n    };\n\n    /*\n    * Calculate the MD5 of an array of little-endian words, and a bit length.\n    */\n    BlueImpMD5.prototype.binl_md5 = function (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << (len % 32);\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n        var i, olda, oldb, oldc, oldd,\n            a =  1732584193,\n            b = -271733879,\n            c = -1732584194,\n            d =  271733878;\n\n        for (i = 0; i < x.length; i += 16) {\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n\n            a = this.md5_ff(a, b, c, d, x[i],       7, -680876936);\n            d = this.md5_ff(d, a, b, c, x[i +  1], 12, -389564586);\n            c = this.md5_ff(c, d, a, b, x[i +  2], 17,  606105819);\n            b = this.md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);\n            a = this.md5_ff(a, b, c, d, x[i +  4],  7, -176418897);\n            d = this.md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);\n            c = this.md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);\n            b = this.md5_ff(b, c, d, a, x[i +  7], 22, -45705983);\n            a = this.md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);\n            d = this.md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);\n            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n            a = this.md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);\n            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n            b = this.md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);\n\n            a = this.md5_gg(a, b, c, d, x[i +  1],  5, -165796510);\n            d = this.md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);\n            c = this.md5_gg(c, d, a, b, x[i + 11], 14,  643717713);\n            b = this.md5_gg(b, c, d, a, x[i],      20, -373897302);\n            a = this.md5_gg(a, b, c, d, x[i +  5],  5, -701558691);\n            d = this.md5_gg(d, a, b, c, x[i + 10],  9,  38016083);\n            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n            b = this.md5_gg(b, c, d, a, x[i +  4], 20, -405537848);\n            a = this.md5_gg(a, b, c, d, x[i +  9],  5,  568446438);\n            d = this.md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);\n            c = this.md5_gg(c, d, a, b, x[i +  3], 14, -187363961);\n            b = this.md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);\n            a = this.md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);\n            d = this.md5_gg(d, a, b, c, x[i +  2],  9, -51403784);\n            c = this.md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);\n            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n            a = this.md5_hh(a, b, c, d, x[i +  5],  4, -378558);\n            d = this.md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);\n            c = this.md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);\n            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n            a = this.md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);\n            d = this.md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);\n            c = this.md5_hh(c, d, a, b, x[i +  7], 16, -155497632);\n            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n            a = this.md5_hh(a, b, c, d, x[i + 13],  4,  681279174);\n            d = this.md5_hh(d, a, b, c, x[i],      11, -358537222);\n            c = this.md5_hh(c, d, a, b, x[i +  3], 16, -722521979);\n            b = this.md5_hh(b, c, d, a, x[i +  6], 23,  76029189);\n            a = this.md5_hh(a, b, c, d, x[i +  9],  4, -640364487);\n            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n            c = this.md5_hh(c, d, a, b, x[i + 15], 16,  530742520);\n            b = this.md5_hh(b, c, d, a, x[i +  2], 23, -995338651);\n\n            a = this.md5_ii(a, b, c, d, x[i],       6, -198630844);\n            d = this.md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);\n            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n            b = this.md5_ii(b, c, d, a, x[i +  5], 21, -57434055);\n            a = this.md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);\n            d = this.md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);\n            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n            b = this.md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);\n            a = this.md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);\n            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n            c = this.md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);\n            b = this.md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);\n            a = this.md5_ii(a, b, c, d, x[i +  4],  6, -145523070);\n            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n            c = this.md5_ii(c, d, a, b, x[i +  2], 15,  718787259);\n            b = this.md5_ii(b, c, d, a, x[i +  9], 21, -343485551);\n\n            a = this.safe_add(a, olda);\n            b = this.safe_add(b, oldb);\n            c = this.safe_add(c, oldc);\n            d = this.safe_add(d, oldd);\n        }\n        return [a, b, c, d];\n    };\n\n    /*\n    * Convert an array of little-endian words to a string\n    */\n    BlueImpMD5.prototype.binl2rstr = function (input) {\n        var i,\n            output = '';\n        for (i = 0; i < input.length * 32; i += 8) {\n            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);\n        }\n        return output;\n    };\n\n    /*\n    * Convert a raw string to an array of little-endian words\n    * Characters >255 have their high-byte silently ignored.\n    */\n    BlueImpMD5.prototype.rstr2binl = function (input) {\n        var i,\n            output = [];\n        output[(input.length >> 2) - 1] = undefined;\n        for (i = 0; i < output.length; i += 1) {\n            output[i] = 0;\n        }\n        for (i = 0; i < input.length * 8; i += 8) {\n            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);\n        }\n        return output;\n    };\n\n    /*\n    * Calculate the MD5 of a raw string\n    */\n    BlueImpMD5.prototype.rstr_md5 = function (s) {\n        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));\n    };\n\n    /*\n    * Calculate the HMAC-MD5, of a key and some data (raw strings)\n    */\n    BlueImpMD5.prototype.rstr_hmac_md5 = function (key, data) {\n        var i,\n            bkey = this.rstr2binl(key),\n            ipad = [],\n            opad = [],\n            hash;\n        ipad[15] = opad[15] = undefined;\n        if (bkey.length > 16) {\n            bkey = this.binl_md5(bkey, key.length * 8);\n        }\n        for (i = 0; i < 16; i += 1) {\n            ipad[i] = bkey[i] ^ 0x36363636;\n            opad[i] = bkey[i] ^ 0x5C5C5C5C;\n        }\n        hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\n        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));\n    };\n\n    /*\n    * Convert a raw string to a hex string\n    */\n    BlueImpMD5.prototype.rstr2hex = function (input) {\n        var hex_tab = '0123456789abcdef',\n            output = '',\n            x,\n            i;\n        for (i = 0; i < input.length; i += 1) {\n            x = input.charCodeAt(i);\n            output += hex_tab.charAt((x >>> 4) & 0x0F) +\n                hex_tab.charAt(x & 0x0F);\n        }\n        return output;\n    };\n\n    /*\n    * Encode a string as utf-8\n    */\n    BlueImpMD5.prototype.str2rstr_utf8 = function (input) {\n        return unescape(encodeURIComponent(input));\n    };\n\n    /*\n    * Take string arguments and return either raw or hex encoded strings\n    */\n    BlueImpMD5.prototype.raw_md5 = function (s) {\n        return this.rstr_md5(this.str2rstr_utf8(s));\n    };\n    BlueImpMD5.prototype.hex_md5 = function (s) {\n        return this.rstr2hex(this.raw_md5(s));\n    };\n    BlueImpMD5.prototype.raw_hmac_md5 = function (k, d) {\n        return this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d));\n    };\n    BlueImpMD5.prototype.hex_hmac_md5 = function (k, d) {\n        return this.rstr2hex(this.raw_hmac_md5(k, d));\n    };\n\n    BlueImpMD5.prototype.md5 = function (string, key, raw) {\n        if (!key) {\n            if (!raw) {\n                return this.hex_md5(string);\n            }\n\n            return this.raw_md5(string);\n        }\n\n        if (!raw) {\n            return this.hex_hmac_md5(key, string);\n        }\n\n        return this.raw_hmac_md5(key, string);\n    };\n\n    // CommonJS module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = Chance;\n        }\n        exports.Chance = Chance;\n    }\n\n    // Register as an anonymous AMD module\n    if (typeof define === 'function' && define.amd) {\n        define('chance',[], function () {\n            return Chance;\n        });\n    }\n\n    // if there is a importsScrips object define chance for worker\n    if (typeof importScripts !== 'undefined') {\n        chance = new Chance();\n    }\n\n    // If there is a window object, that at least has a document property,\n    // instantiate and define chance on the window\n    if (typeof window === \"object\" && typeof window.document === \"object\") {\n        window.Chance = Chance;\n        window.chance = new Chance();\n    }\n})();\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true, bitwise: false*/\n\n/**\n * @author kecso / https://github.com/kecso\n *\n * collection of functions that uses random Numbers in WebGME\n */\n\ndefine('common/util/random',['chance'], function (ChanceJs) {\n    'use strict';\n\n    function _generateRelidRegexp() {\n        var regexp = '',\n            i;\n\n        //adding excludes\n        if (excludeList.length > 0) {\n            for (i = 0; i < excludeList.length; i += 1) {\n                regexp += '(?!(^' + excludeList[i] + '$))';\n            }\n        }\n        //adding the pool\n        regexp += '^(-)?[' + relidPool + ']+$';\n\n        return new RegExp(regexp);\n    }\n\n    function getRandomCharacter(pool) {\n        return pool.charAt(randFunction(pool.length));\n    }\n\n    function generateGuid() {\n        var S4 = function () {\n            return getRandomCharacter(guidPool) +\n                getRandomCharacter(guidPool) +\n                getRandomCharacter(guidPool) +\n                getRandomCharacter(guidPool);\n        };\n\n        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());\n    }\n\n    function generateRelid(object, minimalLength) {\n        var relid,\n            i,\n            length = minimalLength || 1,\n            tries = 0;\n\n        do {\n            if (tries >= maxTry) {\n                tries = 0;\n                length += 1;\n            }\n            relid = '';\n            for (i = 0; i < length; i += 1) {\n                relid += getRandomCharacter(relidPool);\n            }\n            tries += 1;\n        } while (object.hasOwnProperty(relid) === true || isValidRelid(relid) === false);\n\n        return relid;\n    }\n\n    function isValidRelid(relid) {\n\n        if (typeof relid !== 'string') {\n            return false;\n        }\n        return relidRegexp.test(relid);\n    }\n\n    function relidToInteger(relid) {\n        var num = 'NaN',\n            negative = false,\n            i;\n\n        if (isValidRelid(relid)) {\n            num = 0;\n            for (i = 0; i < relid.length; i += 1) {\n                if (relid.charAt(i) === '-') {\n                    negative = true;\n                } else {\n                    num = num * relidPool.length;\n                    num += relidPool.indexOf(relid.charAt(i));\n                }\n            }\n        }\n\n        return num;\n    }\n\n    var guidPool = '0123456789abcdef',\n        relidPool = '0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM',\n        excludeList = ['atr', 'reg', 'ovr'],\n        maxTry = 2,\n        chance = new ChanceJs(),\n        randFunction = function (max) {\n            //return Math.floor(Math.random() * max);\n            return chance.natural({max: max - 1});\n        },\n        relidRegexp = _generateRelidRegexp(),\n        random = {\n            generateGuid: generateGuid,\n            generateRelid: generateRelid,\n            isValidRelid: isValidRelid,\n            relidToInteger: relidToInteger\n        };\n\n    return random;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n/**\n * @author kecso / https://github.com/kecso\n */\ndefine('common/core/constants',[], function () {\n    'use strict';\n    //return string constants\n    return {\n        ATTRIBUTES_PROPERTY: 'atr',\n        REGISTRY_PROPERTY: 'reg',\n        OVERLAYS_PROPERTY: 'ovr',\n        COLLECTION_NAME_SUFFIX: '-inv',\n        ALL_SETS_PROPERTY: '_sets',\n        SET_MODIFIED_REGISTRY: '_sets_',\n        MEMBER_RELATION: 'member',\n        BASE_POINTER: 'base',\n        PATH_SEP: '/',\n        MUTABLE_PROPERTY: '_mutable',\n        MINIMAL_RELID_LENGTH_PROPERTY: '_minlenrelid',\n        INHERITED_CHILD_HAS_OWN_RELATION_PROPERTY: '_hasownrelation',\n\n        NULLPTR_NAME: '_null_pointer',\n        NULLPTR_RELID: '_nullptr',\n\n        META_SET_NAME: 'MetaAspectSet',\n        NULL_GUID: '00000000-0000-0000-0000-000000000000',\n        OWN_GUID: '_relguid',\n\n        CONSTRAINTS_RELID: '_constraints',\n        C_DEF_PRIORITY: 1,\n        CONSTRAINT_REGISTRY_PREFIX: '_ch#_',\n\n        TO_DELETE_STRING: '*to*delete*',\n\n        SET_ITEMS: 'items',\n        SET_ITEMS_MAX: 'max',\n        SET_ITEMS_MIN: 'min',\n\n        META_ASPECTS: 'aspects',\n        META_CHILDREN: 'children',\n        META_NODE: '_meta',\n        META_POINTER_PREFIX: '_p_',\n        META_ASPECT_PREFIX: '_a_',\n\n        ATTRIBUTE_TYPES: {\n            STRING: 'string',\n            INTEGER: 'integer',\n            FLOAT: 'float',\n            BOOLEAN: 'boolean',\n            ASSET: 'asset'\n        },\n\n        MIXINS_SET: '_mixins',\n        MIXIN_ERROR_TYPE: {\n            MISSING: 'missing',\n            ATTRIBUTE_COLLISION: 'attribute collision',\n            SET_COLLISION: 'set collision',\n            POINTER_COLLISION: 'pointer collision',\n            CONTAINMENT_COLLISION: 'containment collision',\n            ASPECT_COLLISION: 'aspect collision',\n            CONSTRAINT_COLLISION: 'constraint collision'\n        },\n\n        EXPORT_TYPE_PROJECT: 'project',\n        EXPORT_TYPE_LIBRARY: 'library',\n\n        NAMESPACE_SEPARATOR: '.',\n\n        MAX_AGE: 3,\n        MAX_TICKS: 2000,\n        MAX_MUTATE: 30000,\n        MAXIMUM_STARTING_RELID_LENGTH: 5\n    };\n});\n",
    "/*globals define*/\n/*jshint browser:true, node:true*/\n\n/**\n * This is a partial implementation of RFC 6902\n * the generated patch is fully compliant though the\n * patch generation is specialized to the expected input form.\n *\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/util/jsonPatcher',[\n    'common/util/canon',\n    'common/util/random',\n    'common/core/constants'\n], function (CANON, RANDOM, CORE_CONSTANTS) {\n\n    'use strict';\n\n    var MIN_RELID_LENGTH_PATH = CORE_CONSTANTS.PATH_SEP + CORE_CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY;\n\n    function _strEncode(str) {\n        //we should replace the '/' in the patch paths\n        return str.replace(/\\//g, '%2f');\n    }\n\n    function _strDecode(str) {\n        return str.replace(/%2f/g, '/');\n    }\n\n    function collectPartials(source, target, key, operation, single) {\n        if (single) {\n            switch (operation) {\n                case 'add':\n                    return [target[key]];\n                case 'replace':\n                    return [source[key], target[key]];\n                case 'remove':\n                    return [source[key]];\n            }\n        } else {\n            var partials = [],\n                collection,\n                item;\n            if (operation === 'add') {\n                collection = target[key];\n            } else {\n                collection = source[key];\n            }\n\n            for (item in collection) {\n                if (partials.indexOf(collection[item])) {\n                    partials.push(collection[item]);\n                }\n            }\n\n            return partials;\n        }\n    }\n\n    function create(sourceJson, targetJson) {\n        var patch = [],\n            diff = function (source, target, basePath, excludeList, noUpdate) {\n                var i,\n                    overlay = basePath === '/ovr/' ? true : false,\n                    inOverlay = basePath.indexOf('/ovr/') === 0 && !overlay ? true : false,\n                    patchItem;\n\n                //add\n                for (i in target) {\n                    if (excludeList.indexOf(i) === -1 && target.hasOwnProperty(i)) {\n                        if (!source.hasOwnProperty(i)) {\n                            patchItem = {\n                                op: 'add',\n                                path: basePath + _strEncode(i),\n                                value: target[i]\n                            };\n\n                            if (overlay) {\n                                patchItem.partials = collectPartials(source, target, i, 'add', false);\n                            } else if (inOverlay) {\n                                patchItem.partials = collectPartials(source, target, i, 'add', true);\n                            }\n\n                            patch.push(patchItem);\n                        }\n                    }\n                }\n\n                //replace\n                if (!noUpdate) {\n                    for (i in target) {\n                        if (excludeList.indexOf(i) === -1 && target.hasOwnProperty(i)) {\n                            if (source.hasOwnProperty(i) && CANON.stringify(source[i]) !== CANON.stringify(target[i])) {\n                                patchItem = {\n                                    op: 'replace',\n                                    path: basePath + _strEncode(i),\n                                    value: target[i]\n                                    //oldValue: source[i]\n                                };\n\n                                if (inOverlay) {\n                                    patchItem.partials = collectPartials(source, target, i, 'replace', true);\n                                }\n\n                                patch.push(patchItem);\n                            }\n                        }\n                    }\n                }\n\n                //remove\n                for (i in source) {\n                    if (excludeList.indexOf(i) === -1 && source.hasOwnProperty(i)) {\n                        if (!target.hasOwnProperty(i)) {\n                            patchItem = {\n                                op: 'remove',\n                                path: basePath + _strEncode(i)\n                                //oldValue: source[i]\n                            };\n\n                            if (overlay) {\n                                patchItem.partials = collectPartials(source, target, i, 'remove', false);\n                            } else if (inOverlay) {\n                                patchItem.partials = collectPartials(source, target, i, 'remove', true);\n                            }\n\n                            patch.push(patchItem);\n                        }\n                    }\n                }\n            },\n            key;\n\n        //main level diff\n        diff(sourceJson, targetJson, '/', ['_id', '_nullptr', 'ovr', 'atr', 'reg', '_sets'], false);\n\n        //atr\n        diff(sourceJson.atr || {}, targetJson.atr || {}, '/atr/', [], false);\n\n        //reg\n        diff(sourceJson.reg || {}, targetJson.reg || {}, '/reg/', [], false);\n\n        //ovr add+remove\n        diff(sourceJson.ovr || {}, targetJson.ovr || {}, '/ovr/', [], true);\n\n        if (targetJson.hasOwnProperty('ovr') && sourceJson.hasOwnProperty('ovr')) {\n            for (key in targetJson.ovr) {\n                if (targetJson.ovr.hasOwnProperty(key) && sourceJson.ovr.hasOwnProperty(key)) {\n                    diff(sourceJson.ovr[key], targetJson.ovr[key], '/ovr/' + _strEncode(key) + '/', [], false);\n                }\n            }\n        }\n\n        //complete set addition or removal\n        diff(sourceJson._sets || {}, targetJson._sets || {}, '/_sets/', [], true);\n\n        //update done set-by-set\n        if (targetJson.hasOwnProperty('_sets') && sourceJson.hasOwnProperty('_sets')) {\n            for (key in sourceJson._sets) {\n                if (targetJson._sets.hasOwnProperty(key)) {\n                    diff(sourceJson._sets[key], targetJson._sets[key], '/_sets/' + _strEncode(key) + '/', [], false);\n                }\n            }\n        }\n\n        return patch;\n    }\n\n    function apply(sourceJson, patch) {\n        var targetJson = JSON.parse(JSON.stringify(sourceJson)),\n            i, j,\n            badOperation = false,\n            pathArray,\n            key,\n            parent,\n            result = {\n                status: 'success',\n                faults: [],\n                patch: patch,\n                result: targetJson\n            };\n\n        for (i = 0; i < patch.length; i += 1) {\n            pathArray = (patch[i].path + '').split('/').slice(1);\n            parent = targetJson;\n\n            for (j = 0; j < pathArray.length; j += 1) {\n                pathArray[j] = _strDecode(pathArray[j]);\n            }\n            key = pathArray.pop();\n            badOperation = false;\n            switch (patch[i].op) {\n                case 'remove':\n                    if (typeof patch[i].path === 'string') {\n                        for (j = 0; j < pathArray.length; j += 1) {\n                            if (!parent[pathArray[j]]) {\n                                badOperation = true;\n                                break;\n                            }\n                            parent = parent[pathArray[j]];\n                        }\n                        if (!badOperation && parent[key] !== undefined) {\n                            delete parent[key];\n                        } else {\n                            result.status = 'fail';\n                            result.faults.push(patch[i]);\n                        }\n                    } else {\n                        result.status = 'fail';\n                        result.faults.push(patch[i]);\n                    }\n                    break;\n                case 'add':\n                    if (typeof patch[i].path === 'string' && patch[i].value !== undefined) {\n                        for (j = 0; j < pathArray.length; j += 1) {\n                            if (!parent[pathArray[j]]) {\n                                parent[pathArray[j]] = {};\n                            }\n                            parent = parent[pathArray[j]];\n                        }\n                        parent[key] = patch[i].value;\n\n                    } else {\n                        result.status = 'fail';\n                        result.faults.push(patch[i]);\n                    }\n                    break;\n                case 'replace':\n                    if (typeof patch[i].path === 'string' && patch[i].value !== undefined) {\n                        for (j = 0; j < pathArray.length; j += 1) {\n                            if (!parent[pathArray[j]]) {\n                                badOperation = true;\n                                break;\n                            }\n                            parent = parent[pathArray[j]];\n                        }\n                        if (!badOperation && parent[key] !== undefined) {\n                            parent[key] = patch[i].value;\n                        } else {\n                            result.status = 'fail';\n                            result.faults.push(patch[i]);\n                        }\n                    } else {\n                        result.status = 'fail';\n                        result.faults.push(patch[i]);\n                    }\n                    break;\n                default:\n                    result.status = 'fail';\n                    result.faults.push(patch[i]);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    function _endsWith(str, pattern) {\n        var d = str.length - pattern.length;\n        return d >= 0 && str.lastIndexOf(pattern) === d;\n    }\n\n    function _startsWith(str, pattern) {\n        return str.indexOf(pattern) === 0;\n    }\n\n    function _isOvr(path) {\n        return path.indexOf('/ovr/') === 0;\n    }\n\n    function _isRelid(path) {\n        return RANDOM.isValidRelid(path.substring(1));\n    }\n\n    function _isGmePath(path) {\n        var relIds = path.split('/'),\n            result = false,\n            i;\n\n        for (i = 1; i < relIds.length; i += 1) {\n            if (RANDOM.isValidRelid(relIds[i]) === false) {\n                return false;\n            } else {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    function _inLoadOrUnload(res, gmePath) {\n        var pathPieces = gmePath.split('/'),\n            parentPath;\n\n        parentPath = gmePath;\n\n        do {\n            if (res.load[parentPath] || res.unload[parentPath]) {\n                return true;\n            }\n\n            pathPieces.pop();\n            parentPath = pathPieces.join('/');\n        } while (pathPieces.length > 1);\n\n        return false;\n    }\n\n    function _removeFromUpdates(res, gmePath) {\n        var updatesPath,\n            i;\n\n        updatesPath = Object.keys(res.update);\n        for (i = 0; i < updatesPath; i += 1) {\n            if (_startsWith(updatesPath[i], gmePath)) {\n                delete res.update[gmePath];\n            }\n        }\n\n        updatesPath = Object.keys(res.partialUpdate);\n        for (i = 0; i < updatesPath; i += 1) {\n            if (_startsWith(updatesPath[i], gmePath)) {\n                delete res.partialUpdate[gmePath];\n            }\n        }\n    }\n\n    function _getChangedNodesRec(patch, res, hash, gmePath) {\n        var nodePatches = patch[hash] && patch[hash].patch, // Changes regarding node with hash\n            i, j,\n            ownChange = false,\n            pathPieces,\n            relGmePath,\n            absGmePath,\n            patchPath;\n\n        if (!nodePatches) {\n            // E.g. if the node was added the full data is given instead of a patch.\n            return;\n        }\n\n        for (i = 0; i < nodePatches.length; i += 1) {\n            patchPath = nodePatches[i].path;\n\n            if (_isOvr(patchPath) === true) {\n                pathPieces = patchPath.substring('/ovr/'.length).split('/');\n                relGmePath = _strDecode(pathPieces[0]);\n                absGmePath = gmePath + relGmePath;\n                if (_isGmePath(relGmePath) && _inLoadOrUnload(res, absGmePath) === false) {\n                    res.update[absGmePath] = true;\n                } else if (relGmePath === '/_nullptr') {\n                    ownChange = true;\n                }\n\n                // Now handle the partial updates\n                for (j = 0; j < nodePatches[i].partials.length; j += 1) {\n                    absGmePath = gmePath + nodePatches[i].partials[j];\n                    if (_isGmePath(nodePatches[i].partials[j]) && _inLoadOrUnload(res, absGmePath) === false) {\n                        res.partialUpdate[absGmePath] = true;\n                    }\n                }\n\n            } else if (_isRelid(patchPath) === true) {\n                // There was a change in one of the children..\n                switch (nodePatches[i].op) {\n                    case 'add':\n                        res.load[gmePath + patchPath] = true;\n                        _removeFromUpdates(res, gmePath + patchPath);\n                        break;\n                    case 'remove':\n                        res.unload[gmePath + patchPath] = true;\n                        _removeFromUpdates(res, gmePath + patchPath);\n                        break;\n                    case 'replace':\n                        _getChangedNodesRec(patch, res, nodePatches[i].value, gmePath + patchPath);\n                        break;\n                    default:\n                        throw new Error('Unexpected patch operation ' + nodePatches[i]);\n                }\n            } else if (patchPath !== MIN_RELID_LENGTH_PATH) {\n                ownChange = true;\n            }\n        }\n\n        if (ownChange) {\n            res.update[gmePath] = true;\n        }\n    }\n\n    /**\n     *\n     * @param {object} patch\n     * @returns {object}\n     */\n    // TODO check if all event related information could be set during patch creation,\n    // so this function would only collect those information.\n    function getChangedNodes(patch, rootHash) {\n        var res;\n\n        if (patch[rootHash] && patch[rootHash].patch) {\n            res = {\n                load: {},\n                unload: {},\n                update: {},\n                partialUpdate: {}\n            };\n\n            _getChangedNodesRec(patch, res, rootHash, '');\n        } else {\n            res = null;\n        }\n\n        return res;\n    }\n\n    return {\n        create: create,\n        apply: apply,\n        getChangedNodes: getChangedNodes\n    };\n});\n",
    "/*globals define*/\n/*jshint node:true, browser: true*/\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/storage/dataConverters',['common/core/constants'], function (CORECONSTANTS) {\n    'use strict';\n\n    function isCollectionName(name) {\n        if (name.length > CORECONSTANTS.COLLECTION_NAME_SUFFIX.length &&\n            CORECONSTANTS.COLLECTION_NAME_SUFFIX === name.slice(-CORECONSTANTS.COLLECTION_NAME_SUFFIX.length)) {\n            return true;\n        }\n        return false;\n    }\n\n    // 0.0.0 --> 1.0.0\n    // - every inverse relation has to be removed from the overlay\n    function zeroToOne(dataObject) {\n        var sourcePath,\n            overlay = dataObject[CORECONSTANTS.OVERLAYS_PROPERTY] || {},\n            relationName;\n\n        for (sourcePath in overlay) {\n            for (relationName in overlay[sourcePath]) {\n                if (isCollectionName(relationName)) {\n                    delete overlay[sourcePath][relationName];\n                }\n            }\n        }\n    }\n\n    // 1.0.0 --> 0.0.0\n    // - we have to add every inverse relation\n    function oneToZero(dataObject) {\n        var sourcePath,\n            targetPath,\n            overlay = dataObject[CORECONSTANTS.OVERLAYS_PROPERTY] || {},\n            relationName,\n            inverseName;\n\n        for (sourcePath in overlay) {\n            for (relationName in overlay[sourcePath]) {\n                if (!isCollectionName(relationName)) {\n                    inverseName = relationName + CORECONSTANTS.COLLECTION_NAME_SUFFIX;\n                    targetPath = overlay[sourcePath][relationName];\n                    overlay[targetPath] = overlay[targetPath] || {};\n                    overlay[targetPath][inverseName] = overlay[targetPath][inverseName] || [];\n                    overlay[targetPath][inverseName].push(sourcePath);\n                }\n            }\n        }\n    }\n\n    return {\n        '0.0.0': {\n            '1.0.0': zeroToOne\n        },\n        '1.0.0': {\n            '0.0.0': oneToZero\n        }\n    };\n});\n",
    "/*globals define*/\n/*jshint node:true, browser: true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/regexp',[], function () {\n    'use strict';\n    var HASH = new RegExp('^#[0-9a-zA-Z_]*$'),\n        DB_HASH = new RegExp('^#[0-9a-zA-Z_]{40}$'),\n        BRANCH = new RegExp('^[0-9a-zA-Z_]*$'),\n        TAG = new RegExp('^[0-9a-zA-Z_]*$'),\n        RAW_BRANCH = new RegExp('^\\\\*[0-9a-zA-Z_]*$'),// This is how it's stored in mongodb, i.e. with a prefixed *.\n        PROJECT = new RegExp('^(?!system\\\\.)(?!_)[0-9a-zA-Z_+]*$'), // project name may not start with system. or _\n        DOCUMENT_KEY = new RegExp('^[^(\\$|\\_)\\.][^\\.]*$'),//based on the MongoDB requirements (no '.' and no leading $)\n        PROJECT_NAME = new RegExp('^[0-9a-zA-Z_]+$'),\n\n        INVALID_CSS_CHARS = new RegExp('[!\"#$%&\\'()\\*\\+,\\./:;<=>\\?@\\[\\\\\\]^`{\\|}~ ]+', 'g'),\n        HTML_ELEMENT = new RegExp('<[a-z][\\\\s\\\\S]*>', 'i'),\n        GUID = new RegExp('[a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}', 'i'),\n        BLOB_HASH = new RegExp('^[0-9a-f]{40}$');\n    return {\n        HASH: HASH,\n        DB_HASH: DB_HASH,\n        BRANCH: BRANCH,\n        TAG: TAG,\n        RAW_BRANCH: RAW_BRANCH,\n        PROJECT: PROJECT,\n        DOCUMENT_KEY: DOCUMENT_KEY,\n        GUID: GUID,\n        INVALID_CSS_CHARS: INVALID_CSS_CHARS,\n        HTML_ELEMENT: HTML_ELEMENT,\n        PROJECT_NAME: PROJECT_NAME,\n        BLOB_HASH: BLOB_HASH\n    };\n});\n\n",
    "/*globals define*/\n/*jshint node:true, browser: true*/\n/**\n * @author lattmann / https://github.com/lattmann\n */\n\ndefine('common/storage/util',[\n    'common/storage/constants',\n    'common/util/jsonPatcher',\n    './dataConverters',\n    'q',\n    'common/regexp'\n], function (CONSTANTS, jsonPatcher, dataConverters, Q, REGEXP) {\n    'use strict';\n\n    function _getRootHash(project, parameters) {\n        var deferred = Q.defer();\n\n        if (parameters.branchName) {\n            Q.ninvoke(project, 'getBranchHash', parameters.branchName)\n                .then(function (commitHash) {\n                    parameters.commitHash = commitHash;\n                    return Q.ninvoke(project, 'loadObject', commitHash);\n                })\n                .then(function (commitObject) {\n                    parameters.rootHash = commitObject.root;\n                    deferred.resolve(commitObject.root);\n                })\n                .catch(deferred.reject);\n        } else if (parameters.commitHash) {\n            Q.ninvoke(project, 'loadObject', parameters.commitHash)\n                .then(function (commitObject) {\n                    parameters.rootHash = commitObject.root;\n                    deferred.resolve(commitObject.root);\n                })\n                .catch(deferred.reject);\n        } else if (parameters.tagName) {\n            Q.ninvoke(project, 'getAllTags')\n                .then(function (tags) {\n                    if (tags[parameters.tagName]) {\n                        parameters.commitHash = tags[parameters.tagName];\n                        return Q.ninvoke(project, 'loadObject', tags[parameters.tagName]);\n                    } else {\n                        throw new Error('Unknown tag name [' + parameters.tagName + ']');\n                    }\n                })\n                .then(function (commitObject) {\n                    parameters.rootHash = commitObject.root;\n                    deferred.resolve(commitObject.root);\n                })\n                .catch(deferred.reject);\n        } else if (parameters.rootHash) {\n            deferred.resolve(parameters.rootHash);\n        } else {\n            deferred.reject(new Error('No valid input was given to search for rootHash'));\n        }\n\n        return deferred.promise;\n    }\n\n    function _collectObjects(project, objectHashArray) {\n        var deferred = Q.defer(),\n            promises = [],\n            objects = [],\n            i;\n\n        for (i = 0; i < objectHashArray.length; i += 1) {\n            promises.push(Q.ninvoke(project, 'loadObject', objectHashArray[i]));\n        }\n\n        Q.allSettled(promises)\n            .then(function (results) {\n                var error = null,\n                    i;\n                for (i = 0; i < results.length; i += 1) {\n                    if (results[i].state === 'fulfilled') {\n                        objects.push(results[i].value);\n                    } else {\n                        error = error || results[i].reason || new Error('unable to load');\n                    }\n                }\n\n                if (error) {\n                    deferred.reject(error);\n                } else {\n                    deferred.resolve(objects);\n                }\n            });\n        return deferred.promise;\n    }\n\n    function _collectObjectAndAssetHashes(project, rootHash) {\n        var deferred = Q.defer(),\n            objects = {},\n            assets = {},\n            queue = [rootHash],\n            task,\n            error = null,\n            working = false,\n            timerId;\n\n        timerId = setInterval(function () {\n            if (!working) {\n                task = queue.shift();\n                if (task === undefined) {\n                    clearInterval(timerId);\n                    if (error) {\n                        deferred.reject(error);\n                    } else {\n                        deferred.resolve({objects: Object.keys(objects), assets: Object.keys(assets)});\n                    }\n                    return;\n                }\n\n                if (!objects[task]) {\n                    working = true;\n                    project.loadObject(task, function (err, object) {\n                        var key;\n\n                        error = error || err;\n                        if (!err && object) {\n                            objects[task] = true;\n                            if (object) {\n                                //now put every sub-object on top of the queue\n                                for (key in object) {\n                                    if (typeof object[key] === 'string' && REGEXP.HASH.test(object[key])) {\n                                        queue.push(object[key]);\n                                    }\n                                }\n\n                                //looking for assets\n                                if (object.atr) {\n                                    for (key in object.atr) {\n                                        //TODO why can't we inlcude BlobConfig???\n                                        if (typeof object.atr[key] === 'string' &&\n                                            REGEXP.BLOB_HASH.test(object.atr[key])) {\n                                            assets[object.atr[key]] = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        working = false;\n                    });\n                }\n\n            }\n        }, 1);\n\n        return deferred.promise;\n    }\n\n    /**\n     * Patches a data object to the currently used version. The source version is stored inside the dataObject,\n     * and the target version is coming from the storage constants. If no patch found,\n     * nothing will happen to the object.\n     *\n     * @param {Object} dataObject\n     */\n    function patchDataObject(dataObject) {\n        var dataVersion = dataObject.__v || '0.0.0',\n            myVersion = CONSTANTS.VERSION || '0.0.0';\n\n        if (dataConverters[dataVersion] && typeof dataConverters[dataVersion][myVersion] === 'function') {\n            dataConverters[dataVersion][myVersion](dataObject);\n        }\n\n        dataObject.__v = myVersion;\n    }\n\n    return {\n        CONSTANTS: CONSTANTS,\n        getProjectFullNameFromProjectId: function (projectId) {\n            if (projectId) {\n                return projectId.replace(CONSTANTS.PROJECT_ID_SEP, CONSTANTS.PROJECT_DISPLAYED_NAME_SEP);\n            }\n        },\n        getProjectDisplayedNameFromProjectId: function (projectId) {\n            if (projectId) {\n                return projectId.replace(CONSTANTS.PROJECT_ID_SEP, ' ' + CONSTANTS.PROJECT_DISPLAYED_NAME_SEP + ' ');\n            }\n        },\n        getProjectIdFromProjectFullName: function (projectFullName) {\n            if (projectFullName) {\n                return projectFullName.replace(CONSTANTS.PROJECT_DISPLAYED_NAME_SEP, CONSTANTS.PROJECT_ID_SEP);\n            }\n        },\n        getProjectIdFromOwnerIdAndProjectName: function (userId, projectName) {\n            return userId + CONSTANTS.PROJECT_ID_SEP + projectName;\n        },\n        getProjectNameFromProjectId: function (projectId) {\n            if (projectId) {\n                return projectId.substring(projectId.indexOf(CONSTANTS.PROJECT_ID_SEP) + 1);\n            }\n        },\n        getOwnerFromProjectId: function (projectId) {\n            if (projectId) {\n                return projectId.substring(0, projectId.indexOf(CONSTANTS.PROJECT_ID_SEP));\n            }\n        },\n        getHashTaggedHash: function (hash) {\n            if (typeof hash === 'string') {\n                return hash[0] === '#' ? hash : '#' + hash;\n            }\n            return hash;\n        },\n        getPatchObject: function (oldData, newData) {\n            var patchObject = {\n                type: 'patch',\n                base: oldData[CONSTANTS.MONGO_ID],\n                patch: jsonPatcher.create(oldData, newData)\n            };\n            patchObject[CONSTANTS.MONGO_ID] = newData[CONSTANTS.MONGO_ID];\n\n            return patchObject;\n        },\n        coreObjectHasOldAndNewData: function (coreObj) {\n            return !!(coreObj.oldHash && coreObj.newHash && coreObj.oldData && coreObj.newData);\n        },\n        getChangedNodes: jsonPatcher.getChangedNodes,\n        applyPatch: jsonPatcher.apply,\n\n        /**\n         * Extracts a serializable json representation of a project tree.\n         * To specify starting point set one of the four options. If more than one is set the order of precedence is:\n         * branchName, commitHash, tagName and rootHash.\n         *\n         * @param {ProjectInterface} project\n         * @param {object} parameters - Specifies which project tree should be serialized:\n         * @param {string} [parameters.rootHash] - The hash of the tree root.\n         * @param {string} [parameters.commitHash] - The tree associated with the commitHash.\n         * @param {string} [parameters.tagName] - The tree at the given tag.\n         * @param {string} [parameters.branchName] - The tree at the given branch.\n         * @param {function} callback\n         */\n        getProjectJson: function (project, parameters, callback) {\n            var deferred = Q.defer(),\n                rawJson;\n\n            _getRootHash(project, parameters || {})\n                .then(function (rootHash) {\n                    return _collectObjectAndAssetHashes(project, rootHash);\n                })\n                .then(function (hashes) {\n                    rawJson = {\n                        rootHash: parameters.rootHash,\n                        projectId: project.projectId,\n                        branchName: parameters.branchName,\n                        commitHash: parameters.commitHash,\n                        hashes: hashes,\n                        objects: null\n                    };\n                    return _collectObjects(project, hashes.objects);\n                })\n                .then(function (objects) {\n                    rawJson.objects = objects;\n                    deferred.resolve(rawJson);\n                })\n                .catch(deferred.reject);\n\n            return deferred.promise.nodeify(callback);\n        },\n\n        /**\n         * Inserts a serialized project tree into the storage and associates it with a commitHash.\n         *\n         * @param {ProjectInterface} project\n         * @param {object} [options]\n         * @param {string} [options.commitMessage=%defaultCommitMessage%] information about the insertion\n         * @param {function(Error, hashes)} callback\n         */\n        insertProjectJson: function (project, projectJson, options, callback) {\n            var deferred = Q.defer(),\n                toPersist = {},\n                rootHash = projectJson.rootHash,\n                defaultCommitMessage = 'Importing contents of [' +\n                    projectJson.projectId + '@' + rootHash + ']',\n                objects = projectJson.objects,\n                i;\n\n            for (i = 0; i < objects.length; i += 1) {\n                // we have to patch the object right before import, for smoother usage experience\n                toPersist[objects[i]._id] = objects[i];\n            }\n\n            options = options || {};\n\n            options.branch = options.branch || null;\n            options.parentCommit = options.parentCommit || [];\n\n            project.makeCommit(options.branch, options.parentCommit,\n                rootHash, toPersist, options.commitMessage || defaultCommitMessage)\n                .then(function (commitResult) {\n                    deferred.resolve(commitResult);\n                })\n                .catch(deferred.reject);\n\n            return deferred.promise.nodeify(callback);\n        },\n\n        patchDataObject: patchDataObject\n    };\n});\n\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n * This class (extracted functionality from cache implemented by mmaroti) caches objects associated\n * with a project.\n *\n * @author pmeijer / https://github.com/pmeijer\n * @author mmaroti / https://github.com/mmaroti\n */\n\ndefine('common/storage/project/cache',[\n    'common/util/assert',\n    'common/storage/constants',\n    'common/util/jsonPatcher',\n    'common/storage/util'\n], function (ASSERT, CONSTANTS, jsonPatcher, utils) {\n    'use strict';\n    function ProjectCache(storage, projectId, mainLogger, gmeConfig) {\n        var self = this,\n            missing = {},\n            backup = {},\n            cache = {},\n            logger = mainLogger.fork('ProjectCache'),\n            cacheSize = 0;\n\n        logger.debug('ctor', projectId);\n\n        this.queuedPersists = {};\n\n        function cacheInsert(key, obj) {\n            ASSERT(obj[CONSTANTS.MONGO_ID] === key);\n            logger.debug('cacheInsert', key);\n\n            //deepFreeze(obj);\n            if (!cache[key]) {\n                cache[key] = obj;\n\n                if (++cacheSize >= gmeConfig.storage.cache) {\n                    backup = cache;\n                    cache = {};\n                    cacheSize = 0;\n                }\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        function getFromCache(hash) {\n            var obj = cache[hash],\n                commitId;\n\n            if (typeof obj === 'undefined') {\n                obj = backup[hash];\n\n                if (typeof obj === 'undefined') {\n                    for (commitId in self.queuedPersists) {\n                        if (self.queuedPersists.hasOwnProperty(commitId) && self.queuedPersists[commitId][hash]) {\n                            obj = self.queuedPersists[commitId][hash];\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return obj;\n        }\n\n        this.loadObject = function (key, callback) {\n            var commitId;\n            ASSERT(typeof key === 'string' && typeof callback === 'function');\n            logger.debug('loadObject', {metadata: key});\n\n            var obj = cache[key];\n            if (typeof obj === 'undefined') {\n                obj = backup[key];\n                if (typeof obj === 'undefined') {\n                    for (commitId in self.queuedPersists) {\n                        if (self.queuedPersists.hasOwnProperty(commitId) && self.queuedPersists[commitId][key]) {\n                            obj = self.queuedPersists[commitId][key];\n                            break;\n                        }\n                    }\n                    if (typeof obj === 'undefined') {\n                        obj = missing[key];\n                        if (typeof obj === 'undefined') {\n                            obj = [callback];\n                            missing[key] = obj;\n                            logger.debug('object set to be loaded from storage');\n                            storage.loadObject(projectId, key, function (err, obj2) {\n                                ASSERT(typeof obj2 === 'object' || typeof obj2 === 'undefined');\n\n                                if (obj.length !== 0) {\n                                    ASSERT(missing[key] === obj);\n\n                                    delete missing[key];\n                                    if (!err && obj2) {\n                                        cacheInsert(key, obj2);\n                                    }\n\n                                    var cb;\n                                    while ((cb = obj.pop())) {\n                                        cb(err, obj2);\n                                    }\n                                }\n                            });\n                        } else {\n                            logger.debug('object was already queued to be loaded');\n                            obj.push(callback);\n                        }\n                        return;\n                    } else {\n                        logger.debug('object was erased from cache and backup but present in queuedPersists');\n                        cacheInsert(key, obj);\n                    }\n                } else {\n                    logger.debug('object was in backup');\n                    cacheInsert(key, obj);\n                }\n            } else {\n                logger.debug('object was in cache');\n            }\n\n            ASSERT(typeof obj === 'object' && obj !== null && obj[CONSTANTS.MONGO_ID] === key);\n            callback(null, obj);\n        };\n\n        /**\n         * Loads the necessary objects for the nodes corresponding to paths and inserts them in the cache.\n         * If the rootKey is empty or does not exist - it won't attempt to load any nodes.\n         * @param {string} rootKey\n         * @param {string[]} paths\n         * @param {function(err)} callback\n         */\n        this.loadPaths = function (rootKey, paths, callback) {\n            logger.debug('loadPaths', {metadata: {rootKey: rootKey, paths: paths}});\n\n            var cachedObjects = {},\n                excludes = [],\n                rootObj = getFromCache(rootKey),\n                i = paths.length,\n                j,\n                pathArray,\n                obj,\n                pathsInfo = [],\n                key;\n\n            if (!rootKey) {\n                logger.debug('rootKey empty:', rootKey);\n                callback(null);\n                return;\n            }\n\n            if (rootObj) {\n                // The root was loaded, so for each requested path we start from the root\n                // and work our way down to the containment chain and add each object that is\n                // already in the cache to 'excludes'.\n\n                excludes.push(rootKey);\n                cachedObjects[rootKey] = rootObj;\n                while (i--) {\n                    pathArray = paths[i].split('/');\n                    pathArray.shift();\n\n                    obj = rootObj;\n                    for (j = 0; j < pathArray.length; j += 1) {\n                        key = obj[pathArray[j]];\n                        if (key) {\n                            obj = getFromCache(key);\n                            if (typeof obj !== 'undefined') {\n                                excludes.push(key);\n                                cachedObjects[key] = obj;\n                            } else {\n                                pathsInfo.push({\n                                    parentHash: key,\n                                    path: '/' + pathArray.slice(j + 1).join('/')\n                                });\n                                break;\n                            }\n                        } else {\n                            // The given path does not exist anymore - break.\n                            break;\n                        }\n                    }\n                }\n            } else {\n                pathsInfo = paths.map(function (path) {\n                    return {\n                        parentHash: rootKey,\n                        path: path\n                    };\n                });\n            }\n\n            if (pathsInfo.length === 0) {\n                logger.debug('All given paths already loaded');\n                callback(null);\n                return;\n            }\n\n            logger.debug('loadPaths will request from server, pathsInfo:', pathsInfo);\n            storage.loadPaths(projectId, pathsInfo, excludes, function (err, serverObjects) {\n                var keys, i;\n                if (!err && serverObjects) {\n                    // Insert every obtained object into the cache (that was not there before).\n                    keys = Object.keys(serverObjects);\n                    for (i = 0; i < keys.length; i += 1) {\n                        if (serverObjects[keys[i]] !== undefined) {\n                            // When not going through a web-socket loadPaths returns keys with\n                            // undefined values, therefore the extra check.\n                            cacheInsert(keys[i], serverObjects[keys[i]]);\n                        }\n                    }\n\n                    // Reinsert the cachedObjects.\n                    keys = Object.keys(cachedObjects);\n                    for (i = 0; i < keys.length; i += 1) {\n                        cacheInsert(keys[i], cachedObjects[keys[i]]);\n                    }\n                    callback(null);\n                } else {\n                    logger.error('loadingPaths failed', err || new Error('no object arrived from server'));\n                    callback(err);\n                }\n            });\n        };\n\n        this.insertObject = function (obj, stackedObjects) {\n            ASSERT(typeof obj === 'object' && obj !== null);\n\n            var key = obj[CONSTANTS.MONGO_ID];\n            logger.debug('insertObject', {metadata: key});\n            ASSERT(typeof key === 'string');\n\n            if (cacheInsert(key, obj) === false) {\n                // The storage on the server will return error if it's not the same..\n                logger.debug('object inserted was already in cache');\n            } else {\n                var item = backup[key];\n\n                if (typeof item !== 'undefined') {\n                    // The storage on the server will return error if it's not the same..\n                    logger.debug('object inserted was already in back-up');\n                } else {\n                    item = missing[key];\n                    if (typeof item !== 'undefined') {\n                        delete missing[key];\n\n                        var cb;\n                        while ((cb = item.pop())) {\n                            cb(null, obj);\n                        }\n                    }\n                }\n            }\n            if (stackedObjects) {\n                stackedObjects[key] = obj;\n            }\n        };\n\n        this.insertPatchObject = function (obj) {\n            ASSERT(typeof obj === 'object' && obj !== null);\n\n            var base,\n                patch,\n                key = obj[CONSTANTS.MONGO_ID];\n\n            if (obj.base && typeof obj.patch === 'object' && key) {\n                base = getFromCache(obj.base);\n\n                if (base) {\n                    patch = jsonPatcher.apply(base, obj.patch);\n                    if (patch.status === 'success') {\n                        patch.result[CONSTANTS.MONGO_ID] = key;\n                        this.insertObject(patch.result);\n                    } else {\n                        logger.error('patch application failed', patch);\n                    }\n                } else {\n                    logger.debug('the base [' +\n                        obj.base + '] is not available from the cache so the patch object is ignored');\n                }\n            } else {\n                logger.error('invalid patch object format', obj);\n            }\n        };\n    }\n\n    return ProjectCache;\n});\n",
    "/*globals define*/\n/*jshint node:true, browser: true*/\n/**\n * This class defines the common interface for a storage-project.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/project/interface',[\n    'common/storage/project/cache',\n    'common/storage/constants',\n    'common/storage/util'\n], function (ProjectCache, CONSTANTS, UTIL) {\n    'use strict';\n\n    /**\n     *\n     * @param {string} projectId - Id of project to be opened.\n     * @param {object} storageObjectsAccessor - Exposes loadObject towards the database.\n     * @param {GmeLogger} mainLogger - Logger instance from instantiator.\n     * @param {GmeConfig} gmeConfig\n     * @alias ProjectInterface\n     * @constructor\n     */\n    function ProjectInterface(projectId, storageObjectsAccessor, mainLogger, gmeConfig) {\n\n        /**\n         * Unique ID of project, built up by the ownerId and projectName.\n         *\n         * @example\n         * 'guest+TestProject', 'organization+TestProject2'\n         * @type {string}\n         */\n        this.projectId = projectId;\n        this.projectName = UTIL.getProjectNameFromProjectId(projectId);\n\n        this.CONSTANTS = CONSTANTS;\n\n        this.ID_NAME = CONSTANTS.MONGO_ID;\n        this.logger = mainLogger.fork('Project:' + this.projectId);\n\n        this.logger.debug('ctor', projectId);\n        this.projectCache = new ProjectCache(storageObjectsAccessor, this.projectId, this.logger, gmeConfig);\n\n        // Functions forwarded to project cache.\n        /**\n         * Inserts the given object to project-cache.\n         *\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} obj - Object to be inserted in database.\n         * @param {Object.<module:Core~ObjectHash, module:Core~ObjectData>} [stackedObjects] - When used by the core, inserts between persists are stored here.\n         * @func\n         * @private\n         */\n        this.insertObject = this.projectCache.insertObject;\n\n        /**\n         * Try to create the full object from the patch object by looking for the base object in the cache.\n         * If the base has been found it applies the patch and inserts the result. If any step fails it simply\n         * ignores the insert.\n         *\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} obj - Object to be inserted in database.\n         * @func\n         * @private\n         */\n        this.insertPatchObject = this.projectCache.insertPatchObject;\n\n        /**\n         * Callback for loadObject.\n         *\n         * @callback ProjectInterface~loadObjectCallback\n         * @param {Error} err - If error occurred.\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} object - Object loaded from database, e.g. a commit object.\n         */\n\n        /**\n         * Loads the object with hash key from the database or\n         * directly from the cache if recently loaded.\n         *\n         * @param {string} key - Hash of object to load.\n         * @param {ProjectInterface~loadObjectCallback} callback - Invoked when object is loaded.\n         * @func\n         */\n        this.loadObject = this.projectCache.loadObject;\n\n        /**\n         * Collects the objects from the server and pre-loads them into the cache\n         * making the load of multiple objects faster.\n         *\n         * @param {string} rootKey - Hash of the object at the entry point of the paths.\n         * @param {string[]} paths - List of paths that needs to be pre-loaded.\n         * @param {function} callback - Invoked when objects have been collected.\n         * @func\n         */\n        this.loadPaths = this.projectCache.loadPaths;\n\n        /**\n         * Makes a commit to data base. Based on the root hash and commit message a new\n         * {@link module:Storage.CommitObject} (with returned hash)\n         * is generated and insert together with the core objects to the database on the server.\n         *\n         * @example\n         * var persisted = core.persist(rootNode);\n         *\n         * project.makeCommit('master', ['#thePreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\n         *   .then(function (result) {\n         *     // result = {\n         *     //   status: 'SYNCED',\n         *     //   hash: '#thisCommitHash'\n         *     // }\n         *   })\n         *   .catch(function (error) {\n         *     // error.message = 'Not authorized to read project: guest+project'\n         *   });\n         * @example\n         * project.makeCommit('master', ['#notPreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\n         *   .then(function (result) {\n         *     // result = {\n         *     //   status: 'FORKED',\n         *     //   hash: '#thisCommitHash'\n         *     // }\n         *   })...\n         * @example\n         * project.makeCommit(null, ['#anExistingCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\n         *   .then(function (result) {\n         *     // result = {\n         *     //   hash: '#thisCommitHash'\n         *     // }\n         *   })...\n         * @example\n         * project.makeCommit('master', ['#aPreviousCommitHash'], previousRootHash, {}, 'just adding a commit to master')\n         *   .then(function (result) {\n         *     // result = {\n         *     //   status: 'SYNCED',\n         *     //   hash: '#thisCommitHash'\n         *     // }\n         *   })...\n         * @param {string} branchName - Name of branch to update (none if null).\n         * @param {module:Storage~CommitHash[]} parents - Parent commit hashes.\n         * @param {module:Core~ObjectHash} rootHash - Hash of root object.\n         * @param {module:Core~DataObject} coreObjects - Core objects associated with the commit.\n         * @param {string} msg='n/a' - Commit message.\n         * @param {function} [callback] - If provided no promise will be returned.\n         * @async\n         * @return {external:Promise}  On success the promise will be resolved with\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\n         * On error the promise will be rejected with {Error} <b>error</b>.\n         */\n        this.makeCommit = function (branchName, parents, rootHash, coreObjects, msg, callback) {\n            throw new Error('makeCommit must be overridden in derived class');\n        };\n\n        /**\n         * Updates the head of the branch.\n         * @param {string} branchName - Name of branch to update.\n         * @param {module:Storage~CommitHash} newHash - New commit hash for branch head.\n         * @param {module:Storage~CommitHash} oldHash - Current state of the branch head inside the database.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.setBranchHash = function (branchName, newHash, oldHash, callback) {\n            throw new Error('setBranchHash must be overridden in derived class');\n        };\n\n        /**\n         * Retrieves the commit hash for the head of the branch.\n         * @param {string} branchName - Name of branch.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * {module:Storage~CommitHash} <b>branchHash</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.getBranchHash = function (branchName, callback) {\n            throw new Error('getBranchHash must be overridden in derived class');\n        };\n\n        /**\n         * Creates a new branch with head pointing to the provided commit hash.\n         * @param {string} branchName - Name of branch to create.\n         * @param {module:Storage~CommitHash} newHash - New commit hash for branch head.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.createBranch = function (branchName, newHash, callback) {\n            throw new Error('createBranch must be overridden in derived class');\n        };\n\n        /**\n         * Deletes the branch.\n         * @param {string} branchName - Name of branch to create.\n         * @param {module:Storage~CommitHash} oldHash - Previous commit hash for branch head.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.deleteBranch = function (branchName, oldHash, callback) {\n            throw new Error('deleteBranch must be overridden in derived class');\n        };\n\n        /**\n         * Retrieves all branches and their current heads within the project.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * Object.<string, {@link module:Storage~CommitHash}> <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.getBranches = function (callback) {\n            throw new Error('getBranches must be overridden in derived class');\n        };\n\n        /**\n         * Retrieves an array of commits starting from a branch(es) and/or commitHash(es).\n         * <br> The result is ordered by the rules (applied in order)\n         * <br> 1. Descendants are always returned before their ancestors.\n         * <br> 2. By their timestamp.\n         * @param {string|module:Storage~CommitHash|Array} start - Branch name, commit hash or array of these.\n         * @param {number} number - Number of commits to load.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * Array.<{@link module:Storage~CommitObject}> <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.getHistory = function (start, number, callback) {\n            throw new Error('getHistory must be overridden in derived class');\n        };\n\n        /**\n         * Retrieves and array of the latest (sorted by timestamp) commits for the project.\n         * If timestamp is given it will get <b>number</b> of commits strictly before <b>before</b>.\n         * If commit hash is specified that commit will be included too.\n         * <br> N.B. due to slight time differences on different machines, ancestors may be returned before\n         * their descendants. Unless looking for 'headless' commits 'getHistory' is the preferred method.\n         * @param {number|module:Storage~CommitHash} before - Timestamp or commitHash to load history from.\n         * @param {number} number - Number of commits to load.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * Array.<{@link module:Storage~CommitObject}> <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.getCommits = function (before, number, callback) {\n            throw new Error('getCommits must be overridden in derived class');\n        };\n\n        /**\n         * Creates a new tag pointing to the provided commit hash.\n         * @param {string} tagName - Name of tag to create.\n         * @param {module:Storage~CommitHash} commitHash - Commit hash tag will point to.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with nothing.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.createTag = function (tagName, commitHash, callback) {\n            throw new Error('createTag must be overridden in derived class');\n        };\n\n        /**\n         * Deletes the given tag.\n         * @param {string} tagName - Name of tag to delete.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with nothing.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.deleteTag = function (tagName, callback) {\n            throw new Error('deleteTag must be overridden in derived class');\n        };\n\n        /**\n         * Retrieves all tags and their commits hashes within the project.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * Object.<string, {@link module:Storage~CommitHash}> <b>result</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.getTags = function (callback) {\n            throw new Error('getTags must be overridden in derived class');\n        };\n\n        /**\n         * Retrieves the common ancestor of two commits. If no ancestor exists it will result in an error.\n         *\n         * @param {module:Storage~CommitHash} commitA - Commit hash.\n         * @param {module:Storage~CommitHash} commitB - Commit hash.\n         * @param {function} [callback] - if provided no promise will be returned.\n         *\n         * @return {external:Promise}  On success the promise will be resolved with\n         * {@link module:Storage~CommitHash} <b>commonCommitHash</b>.<br>\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\n         */\n        this.getCommonAncestorCommit = function (commitA, commitB, callback) {\n            throw new Error('getCommonAncestorCommit must be overridden in derived class');\n        };\n    }\n\n    return ProjectInterface;\n});\n\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/project/branch',['common/storage/constants'], function (CONSTANTS) {\n    'use strict';\n\n    function Branch(name, mainLogger) {\n        var self = this,\n            logger = mainLogger.fork('Branch:' + name),\n            originHash = '',\n            localHash = '',\n            commitQueue = [],\n            updateQueue = [],\n            branchStatus = CONSTANTS.BRANCH_STATUS.SYNC;\n\n        logger.debug('ctor');\n        this.name = name;\n        this.isOpen = true;\n        this.inSync = true;\n\n        this.branchStatusHandlers = [];\n        this.hashUpdateHandlers = [];\n        this.callbackQueue = [];\n\n        /**\n         * @type {Error[]}\n         */\n        this.errorList = [];\n\n        this._remoteUpdateHandler = null;\n\n        this.cleanUp = function () {\n            var i,\n                commitResult;\n            self.isOpen = false;\n            self.branchStatusHandlers = [];\n            self.hashUpdateHandlers = [];\n\n            self._remoteUpdateHandler = null;\n            for (i = 0; i < self.callbackQueue.length; i += 1) {\n                // Make sure there are no pending callbacks, invoke with status CANCELED.\n                commitResult = {\n                    status: CONSTANTS.CANCELED,\n                    hash: commitQueue[i].commitObject[CONSTANTS.MONGO_ID]\n                };\n                self.callbackQueue[i](null, commitResult);\n            }\n            self.callbackQueue = [];\n            commitQueue = [];\n            updateQueue = [];\n        };\n\n        // Hash related functions\n        this.getLocalHash = function () {\n            return localHash;\n        };\n\n        this.getOriginHash = function () {\n            return originHash;\n        };\n\n        this.updateHashes = function (newLocal, newOrigin) {\n            logger.debug('updatingHashes');\n            if (newLocal !== null) {\n                logger.debug('localHash: old, new', localHash, newLocal);\n                localHash = newLocal;\n            }\n            if (newOrigin !== null) {\n                logger.debug('originHash: old, new', originHash, newOrigin);\n                originHash = newOrigin;\n            }\n        };\n\n        // Queue related functions\n        this.queueCommit = function (commitData, commitCallback) {\n            commitQueue.push(commitData);\n            self.callbackQueue.push(commitCallback);\n            logger.debug('Adding new commit to queue', commitQueue.length);\n        };\n\n        this.getFirstCommit = function (shift) {\n            var commitData;\n            if (shift) {\n                commitData = commitQueue.shift();\n                self.callbackQueue.shift();\n                logger.debug('Removed commit from queue', commitQueue.length);\n            } else {\n                commitData = commitQueue[0];\n            }\n\n            return commitData;\n        };\n\n        this.getMergedCommit = function (mergeHash) {\n            var mergeCommit,\n                i = updateQueue.length;\n\n            while (i) {\n                i -= 1;\n                if (updateQueue[i].commitObject[CONSTANTS.MONGO_ID] === mergeHash) {\n                    mergeCommit = updateQueue[i];\n                    break;\n                }\n            }\n\n            if (!mergeCommit) {\n                logger.error('mergeCommit not available in updateQueue', mergeHash, JSON.stringify(updateQueue, null, 2));\n            }\n\n            updateQueue = [];\n\n            return mergeCommit;\n        };\n\n        this.getCommitQueue = function () {\n            return commitQueue;\n        };\n\n        this.getCommitsForNewFork = function (upTillCommitHash) {\n            var i,\n                commitData,\n                commitHash,\n                commitHashExisted = false,\n                subQueue = [];\n\n            logger.debug('getCommitsForNewFork', upTillCommitHash);\n\n            if (commitQueue.length === 0) {\n                commitHash = localHash;\n\n                logger.debug('No commits queued will fork from', commitHash);\n                upTillCommitHash = upTillCommitHash || commitHash;\n                commitHashExisted = upTillCommitHash === commitHash;\n            } else {\n                upTillCommitHash = upTillCommitHash ||\n                    commitQueue[commitQueue.length - 1].commitObject[CONSTANTS.MONGO_ID];\n            }\n\n            logger.debug('Will fork up to commitHash', upTillCommitHash);\n\n            // Move over all commit-data up till the chosen commitHash to the fork's queue,\n            // except the commit that caused the fork (all its objects are already in the database).\n            for (i = 0; i < commitQueue.length; i += 1) {\n                commitData = commitQueue[i];\n                commitHash = commitData.commitObject[CONSTANTS.MONGO_ID];\n                if (i !== 0) {\n                    subQueue.push(commitData);\n                }\n                if (commitData.commitObject[CONSTANTS.MONGO_ID] === upTillCommitHash) {\n                    // The commitHash from where to fork has been reached.\n                    // If any, the rest of the 'pending' commits will not be used.\n                    commitHashExisted = true;\n                    break;\n                }\n            }\n\n            if (commitHashExisted === false) {\n                logger.error('Could not find the specified commitHash', upTillCommitHash);\n                return false;\n            }\n\n            return {commitHash: commitHash, queue: subQueue};\n        };\n\n        this.queueUpdate = function (updateData) {\n            updateQueue.push(updateData);\n            logger.debug('Adding new update to queue', updateQueue.length);\n        };\n\n        this.getUpdateQueue = function () {\n            return updateQueue;\n        };\n\n        this.getFirstUpdate = function (shift) {\n            var updateData;\n            if (shift) {\n                updateData = updateQueue.shift();\n                logger.debug('Removed update from queue', updateQueue.length);\n            } else {\n                updateData = updateQueue[0];\n            }\n\n            return updateData;\n        };\n\n        // Event related functions\n        this.addBranchStatusHandler = function (fn) {\n            self.branchStatusHandlers.push(fn);\n        };\n\n        this.removeBranchStatusHandler = function (fn) {\n            var i;\n\n            for (i = 0; i < self.branchStatusHandlers.length; i += 1) {\n                if (self.branchStatusHandlers[i] === fn) {\n                    self.branchStatusHandlers.splice(i, 1);\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        this.dispatchBranchStatus = function (newStatus, err) {\n            var i;\n\n            logger.debug('dispatchBranchStatus old, new', branchStatus, newStatus);\n\n            if (branchStatus === CONSTANTS.BRANCH_STATUS.ERROR) {\n                logger.error('In error state, action from user required!');\n                newStatus = branchStatus;\n            } else {\n                branchStatus = newStatus;\n            }\n\n            if (err) {\n                this.errorList.push(err instanceof Error ? err : new Error(err));\n            }\n\n            for (i = 0; i < self.branchStatusHandlers.length; i += 1) {\n                self.branchStatusHandlers[i](newStatus, commitQueue, updateQueue);\n            }\n        };\n\n        this.addHashUpdateHandler = function (fn) {\n            self.hashUpdateHandlers.push(fn);\n        };\n\n        this.removeHashUpdateHandler = function (fn) {\n            var i;\n\n            for (i = 0; i < self.hashUpdateHandlers.length; i += 1) {\n                if (self.hashUpdateHandlers[i] === fn) {\n                    self.hashUpdateHandlers.splice(i, 1);\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        this.dispatchHashUpdate = function (data, callback) {\n            var i,\n                error = null,\n                counter = self.hashUpdateHandlers.length,\n                allProceed = true,\n                counterCallback = function (err, proceed) {\n                    error = error || err; // Use the latest error\n                    allProceed = allProceed && proceed === true;\n                    counter -= 1;\n                    if (counter === 0) {\n                        callback(error, allProceed);\n                    }\n                };\n\n            for (i = 0; i < self.hashUpdateHandlers.length; i += 1) {\n                self.hashUpdateHandlers[i](data, commitQueue, updateQueue, counterCallback);\n            }\n        };\n    }\n\n    return Branch;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n\n *\n * Storage.openProject resolves with an instance of this classes.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/project/project',[\n    'common/storage/project/interface',\n    'common/storage/project/branch',\n    'q'\n], function (ProjectInterface, Branch, Q) {\n    'use strict';\n\n    /**\n     * This project uses a common storage to connect to the database on the server via web-sockets.\n     * It can run under both nodeJS and in the browser.\n     *\n     *\n     * @param {string} projectId - Id of project to be opened.\n     * @param {object} storage - Storage connected to the server and database.\n     * @param {object} mainLogger - Logger instance.\n     * @param {GmeConfig} gmeConfig\n     * @alias Project\n     * @constructor\n     * @augments ProjectInterface\n     */\n    function Project(projectId, storage, mainLogger, gmeConfig) {\n        var self = this;\n        this.branches = {};\n\n        ProjectInterface.call(this, projectId, storage, mainLogger, gmeConfig);\n\n        // Functions defined in ProjectInterface\n        this.makeCommit = function (branchName, parents, rootHash, coreObjects, msg, callback) {\n            return Q.ninvoke(storage, 'makeCommit', self.projectId, branchName, parents, rootHash, coreObjects, msg)\n                .nodeify(callback);\n        };\n\n        this.setBranchHash = function (branchName, newHash, oldHash, callback) {\n            return Q.ninvoke(storage, 'setBranchHash', self.projectId, branchName, newHash, oldHash)\n                .nodeify(callback);\n        };\n\n        this.getBranchHash = function (branchName, callback) {\n            return Q.ninvoke(storage, 'getBranchHash', self.projectId, branchName)\n                .nodeify(callback);\n        };\n\n        this.createBranch = function (branchName, newHash, callback) {\n            return Q.ninvoke(storage, 'createBranch', self.projectId, branchName, newHash)\n                .nodeify(callback);\n        };\n\n        this.deleteBranch = function (branchName, oldHash, callback) {\n            return Q.ninvoke(storage, 'deleteBranch', self.projectId, branchName, oldHash)\n                .nodeify(callback);\n        };\n\n        this.getBranches = function (callback) {\n            return Q.ninvoke(storage, 'getBranches', self.projectId)\n                .nodeify(callback);\n        };\n\n        this.createTag = function (tagName, commitHash, callback) {\n            return Q.ninvoke(storage, 'createTag', self.projectId, tagName, commitHash)\n                .nodeify(callback);\n        };\n\n        this.deleteTag = function (tagName, callback) {\n            return Q.ninvoke(storage, 'deleteTag', self.projectId, tagName)\n                .nodeify(callback);\n        };\n\n        this.getTags = function (callback) {\n            return Q.ninvoke(storage, 'getTags', self.projectId)\n                .nodeify(callback);\n        };\n\n        this.getCommits = function (before, number, callback) {\n            return Q.ninvoke(storage, 'getCommits', self.projectId, before, number)\n                .nodeify(callback);\n        };\n\n        this.getHistory = function (start, number, callback) {\n            return Q.ninvoke(storage, 'getHistory', self.projectId, start, number)\n                .nodeify(callback);\n        };\n\n        this.getCommonAncestorCommit = function (commitA, commitB, callback) {\n            return Q.ninvoke(storage, 'getCommonAncestorCommit', self.projectId, commitA, commitB)\n                .nodeify(callback);\n        };\n    }\n\n    Project.prototype = Object.create(ProjectInterface.prototype);\n    Project.prototype.constructor = Project;\n\n    return Project;\n});\n",
    "//jshint ignore: start\n//SHA1 in Javascript 862 bytes, MIT License, http://antimatter15.com/\ndefine('common/util/sha1',[],function() {\nreturn function(l){function p(b,a){return b<<a|b>>>32-a}l+=\"\";for(var n=Math,c=[1518500249,1859775393,2400959708,3395469782,1732584193,4023233417,2562383102,271733878,3285377520,4294967295],s=n.ceil(l.length/4)+2,q=n.ceil(s/16),g=[],a=0,h=[],j,d,e,f,m,i,b,k;a<q;a++){g[a]=[];for(k=0;k<16;k++){function o(b,c){return l.charCodeAt(a*64+k*4+b)<<c}g[a][k]=o(0,24)|o(1,16)|o(2,8)|o(3,0)}}i=l.length*8-8;a=q-1;g[a][14]=i/(c[9]+1);g[a][14]=n.floor(g[a][14]);g[a][15]=i&c[9];for(a=0;a<q;a++){for(b=0;b<16;b++)h[b]=g[a][b];for(b=16;b<80;b++)h[b]=p(h[b-3]^h[b-8]^h[b-14]^h[b-16],1);j=c[4];d=c[5];e=c[6];f=c[7];m=c[8];for(b=0;b<80;b++){var r=n.floor(b/20),t=p(j,5)+(r<1?d&e^~d&f:r==2?d&e^d&f^e&f:d^e^f)+m+c[r]+h[b]&c[9];m=f;f=e;e=p(d,30);d=j;j=t}c[4]+=j;c[5]+=d;c[6]+=e;c[7]+=f;c[8]+=m}i=\"\";for(z=4;z<9;z++)for(a=7;a>=0;a--)i+=((c[z]&c[9])>>>a*4&15).toString(16);return i};\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/util/key',[\n    'common/util/sha1',\n    'common/util/assert',\n    'common/util/canon'\n], function (SHA1, ASSERT, CANON) {\n    'use strict';\n\n    var keyType = null;\n\n    function rand160Bits() {\n        var result = '',\n            i, code;\n        for (i = 0; i < 40; i++) {\n            code = Math.floor(Math.random() * 16);\n            code = code > 9 ? code + 87 : code + 48;\n            result += String.fromCharCode(code);\n        }\n        return result;\n    }\n\n    return function KeyGenerator(object, gmeConfig) {\n        keyType = gmeConfig.storage.keyType;\n        ASSERT(typeof keyType === 'string');\n\n        switch (keyType) {\n            case 'rand160Bits':\n                return rand160Bits();\n            default: //plainSHA1\n                return SHA1(CANON.stringify(object));\n        }\n    };\n});\n",
    "/*globals define*/\n/*jshint node:true*/\n/**\n * This class implements the functionality needed to edit a model in a specific project and branch in a\n * collaborative fashion.\n *\n * It keeps a state of the open projects which in turn keeps track of the open branches.\n *\n * Each project is associated with a project-cache which is shared amongst the branches. So switching\n * between branches is (potentially) an operation that does not require lots of server round-trips.\n *\n * It is possible to have multiple projects open and multiple branches within each project. However\n * one instance of a storage can only hold a single instance of a project (or branch within a project).\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/storageclasses/editorstorage',[\n    'common/storage/storageclasses/objectloaders',\n    'common/storage/constants',\n    'common/storage/project/project',\n    'common/storage/project/branch',\n    'common/util/assert',\n    'common/util/key',\n    'common/storage/util',\n    'q'\n], function (StorageObjectLoaders, CONSTANTS, Project, Branch, ASSERT, GENKEY, UTIL, Q) {\n    'use strict';\n\n    /**\n     *\n     * @param webSocket\n     * @param mainLogger\n     * @param gmeConfig\n     * @constructor\n     */\n    function EditorStorage(webSocket, mainLogger, gmeConfig) {\n        var self = this,\n            logger = mainLogger.fork('storage'),\n            projects = {};\n\n        self.logger = logger;\n        self.userId = null;\n        self.serverVersion = null;\n\n        StorageObjectLoaders.call(this, webSocket, mainLogger, gmeConfig);\n\n        this.open = function (networkHandler) {\n            webSocket.connect(function (err, connectionState) {\n                if (err) {\n                    logger.error(err);\n                    networkHandler(CONSTANTS.CONNECTION_ERROR);\n                } else if (connectionState === CONSTANTS.CONNECTED) {\n                    self.connected = true;\n                    self.userId = webSocket.userId;\n                    self.serverVersion = webSocket.serverVersion;\n                    networkHandler(connectionState);\n                } else if (connectionState === CONSTANTS.RECONNECTED) {\n                    self.connected = true;\n                    self._rejoinWatcherRooms()\n                        .then(function () {\n                            return self._rejoinBranchRooms();\n                        })\n                        .then(function () {\n                            networkHandler(connectionState);\n                        })\n                        .catch(function (err) {\n                            logger.error('failing during reconnect', err);\n                            networkHandler(CONSTANTS.CONNECTION_ERROR);\n                        });\n\n                } else if (connectionState === CONSTANTS.DISCONNECTED) {\n                    self.connected = false;\n                    networkHandler(connectionState);\n                } else if (connectionState === CONSTANTS.INCOMPATIBLE_CONNECTION) {\n                    networkHandler(connectionState);\n                } else if (connectionState === CONSTANTS.JWT_ABOUT_TO_EXPIRE) {\n                    networkHandler(connectionState);\n                } else if (connectionState === CONSTANTS.JWT_EXPIRED) {\n                    networkHandler(connectionState);\n                } else {\n                    logger.error('unexpected connection state');\n                    networkHandler(CONSTANTS.CONNECTION_ERROR);\n                }\n            });\n        };\n\n        this.close = function (callback) {\n            var error = null,\n                openProjects = Object.keys(projects),\n                projectCnt = openProjects.length;\n\n            logger.debug('Closing storage, openProjects', openProjects);\n\n            function afterProjectClosed(err) {\n                if (err) {\n                    logger.error(err.message);\n                    error = err;\n                }\n                logger.debug('inside afterProjectClosed projectCnt', projectCnt);\n                if (projectCnt === 0) {\n                    // Remove the handler for the socket.io events 'connect' and 'disconnect'.\n                    logger.debug('Removing connect and disconnect events');\n                    webSocket.socket.removeAllListeners('connect');\n                    webSocket.socket.removeAllListeners('disconnect');\n                    // Disconnect from the server.\n                    logger.debug('Disconnecting web-socket');\n                    webSocket.disconnect();\n                    self.connected = false;\n                    // Remove all local event-listeners.\n                    webSocket.clearAllEvents();\n                    callback(error);\n                }\n            }\n\n            if (projectCnt > 0) {\n                while (projectCnt) {\n                    projectCnt -= 1;\n                    this.closeProject(openProjects[projectCnt], afterProjectClosed);\n                }\n            } else {\n                logger.debug('No projects were open, will disconnect directly');\n                afterProjectClosed(null);\n            }\n        };\n\n        /**\n         * Callback for openProject.\n         *\n         * @callback EditorStorage~openProjectCallback\n         * @param {string} err - error string.\n         * @param {Project} project - the newly opened project.\n         * @param {object} branches - the newly opened project.\n         * @example\n         * // branches is of the form\n         * // { master: '#somevalidhash', b1: '#someothervalidhash' }\n         */\n\n        /**\n         *\n         * @param {string} projectId - name of project to open.\n         * @param {EditorStorage~openProjectCallback} - callback\n         */\n        this.openProject = function (projectId, callback) {\n            var data = {\n                projectId: projectId\n            };\n            if (projects[projectId]) {\n                callback(new Error('project is already open ' + projectId));\n                return;\n            }\n\n            webSocket.openProject(data, function (err, branches, access) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                var project = new Project(projectId, self, logger, gmeConfig);\n                projects[projectId] = project;\n                callback(null, project, branches, access);\n            });\n        };\n\n        this.closeProject = function (projectId, callback) {\n            var project = projects[projectId],\n                error = null,\n                branchCnt,\n                branchNames;\n            logger.debug('closeProject', projectId);\n\n            function closeAndDelete(err) {\n                if (err) {\n                    logger.error(err.message);\n                    error = err;\n                }\n                logger.debug('inside closeAndDelete branchCnt', branchCnt);\n                if (branchCnt === 0) {\n                    webSocket.closeProject({projectId: projectId}, function (err) {\n                        logger.debug('project closed on server.');\n                        delete projects[projectId];\n                        callback(err || error);\n                    });\n                }\n            }\n\n            if (project) {\n                branchNames = Object.keys(project.branches);\n                branchCnt = branchNames.length;\n                if (branchCnt > 0) {\n                    logger.warn('Branches still open for project, will be closed.', projectId, branchNames);\n                    while (branchCnt) {\n                        branchCnt -= 1;\n                        this.closeBranch(projectId, branchNames[branchCnt], closeAndDelete);\n                    }\n                } else {\n                    closeAndDelete(null);\n                }\n            } else {\n                logger.warn('Project is not open ', projectId);\n                callback(null);\n            }\n\n        };\n\n        this.openBranch = function (projectId, branchName, hashUpdateHandler, branchStatusHandler, callback) {\n            var project = projects[projectId],\n                data = {\n                    projectId: projectId,\n                    branchName: branchName\n                },\n                branch;\n\n            if (!project) {\n                callback(new Error('Cannot open branch, ' + branchName + ', project ' + projectId + ' is not opened.'));\n                return;\n            }\n\n            if (project.branches[branchName]) {\n                callback(new Error('Branch is already open ' + branchName + ', project: ' + projectId));\n                return;\n            }\n\n            logger.debug('openBranch, calling webSocket openBranch', projectId, branchName);\n\n            webSocket.openBranch(data, function (err, latestCommit) {\n                var branchHash;\n                if (err) {\n                    callback(err);\n                    return;\n                }\n\n                branch = new Branch(branchName, project.logger);\n                project.branches[branchName] = branch;\n\n                // Update state of branch\n                branch.latestCommitData = latestCommit;\n                branchHash = latestCommit.commitObject[CONSTANTS.MONGO_ID];\n                branch.updateHashes(branchHash, branchHash);\n\n                // Add handlers to branch and set the remote update handler for the web-socket.\n                branch.addHashUpdateHandler(hashUpdateHandler);\n                branch.addBranchStatusHandler(branchStatusHandler);\n\n                branch._remoteUpdateHandler = function (_ws, updateData, initCallback) {\n                    var j,\n                        originHash = updateData.commitObject[CONSTANTS.MONGO_ID];\n                    logger.debug('_remoteUpdateHandler invoked for project, branch', projectId, branchName);\n                    for (j = 0; j < updateData.coreObjects.length; j += 1) {\n                        if (updateData.coreObjects[j] && updateData.coreObjects[j].type === 'patch') {\n                            project.insertPatchObject(updateData.coreObjects[j]);\n                        } else {\n                            project.insertObject(updateData.coreObjects[j]);\n                        }\n                    }\n\n                    branch.queueUpdate(updateData);\n                    branch.updateHashes(null, originHash);\n\n                    if (branch.getCommitQueue().length === 0) {\n                        if (branch.getUpdateQueue().length === 1) {\n                            self._pullNextQueuedCommit(projectId, branchName, initCallback); // hashUpdateHandlers\n                        }\n                    } else {\n                        logger.debug('commitQueue is not empty, only updating originHash.');\n                    }\n                };\n\n                branch._remoteUpdateHandler(null, latestCommit, function (err) {\n                    webSocket.addEventListener(webSocket.getBranchUpdateEventName(projectId, branchName),\n                        branch._remoteUpdateHandler);\n                    callback(err, latestCommit);\n                });\n            });\n        };\n\n        this.closeBranch = function (projectId, branchName, callback) {\n            var project = projects[projectId],\n                branch;\n\n            logger.debug('closeBranch', projectId, branchName);\n\n            if (!project) {\n                logger.warn('closeBranch: project is not open', projectId, branchName);\n                callback(null);\n                return;\n            }\n\n            branch = project.branches[branchName];\n\n            if (!branch) {\n                logger.warn('closeBranch: project does not have given branch.', projectId, branchName);\n                callback(null);\n                return;\n            }\n\n            // This will prevent memory leaks and expose if a commit is being\n            // processed at the server this time (see last error in _pushNextQueuedCommit).\n            branch.dispatchBranchStatus(null);\n\n            // Stop listening to events from the server\n            webSocket.removeEventListener(webSocket.getBranchUpdateEventName(projectId, branchName),\n                branch._remoteUpdateHandler);\n\n            branch.cleanUp();\n\n            webSocket.closeBranch({projectId: projectId, branchName: branchName}, function (err) {\n                delete project.branches[branchName];\n                callback(err);\n            });\n        };\n\n        this.forkBranch = function (projectId, branchName, forkName, commitHash, callback) {\n            var project = projects[projectId],\n                branch,\n                forkData;\n\n            this.logger.debug('forkBranch', projectId, branchName, forkName, commitHash);\n\n            if (!project) {\n                callback(new Error('Cannot fork branch, ' + branchName + ', project ' + projectId + ' is not opened.'));\n                return;\n            }\n\n            branch = project.branches[branchName];\n\n            if (!branch) {\n                callback(new Error('Cannot fork branch, branch is not open ' + branchName + ', project: ' + projectId));\n                return;\n            }\n\n            forkData = branch.getCommitsForNewFork(commitHash, forkName); // commitHash = null defaults to latest commit\n            self.logger.debug('forkBranch - forkData', forkData);\n\n            if (forkData === false) {\n                callback(new Error('Could not find specified commitHash: ' + commitHash));\n                return;\n            }\n\n            self.persistCommits(forkData.queue, function (err) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n\n                self.createBranch(projectId, forkName, forkData.commitHash, function (err) {\n                    if (err) {\n                        logger.error('forkBranch - failed creating new branch', err);\n                        callback(err);\n                        return;\n                    }\n\n                    callback(null, forkData.commitHash);\n                });\n            });\n        };\n\n        this.persistCommits = function (commitQueue, callback) {\n            var commitHash;\n\n            function commitNext(i) {\n                var currentCommitData = commitQueue[i];\n\n                if (i < commitQueue.length) {\n                    currentCommitData = commitQueue[i];\n                    logger.debug('persistCommits - commitNext, currentCommitData', currentCommitData);\n                    delete currentCommitData.branchName;\n                    commitHash = currentCommitData.commitObject[CONSTANTS.MONGO_ID];\n\n                    webSocket.makeCommit(currentCommitData, function (err, result) {\n                        if (err) {\n                            logger.error('persistCommits - failed committing', err);\n                            callback(err);\n                            return;\n                        }\n\n                        logger.debug('persistCommits - commit successful, hash', result);\n                        commitNext(i += 1);\n                    });\n                } else {\n                    callback(null, commitHash);\n                }\n            }\n\n            commitNext(0);\n        };\n\n        this.makeCommit = function (projectId, branchName, parents, rootHash, coreObjects, msg, callback) {\n            var project = projects[projectId],\n                branch,\n                commitId,\n                commitCallback,\n                persistQueueElement = {},\n                commitData = {\n                    rootHash: rootHash,\n                    projectId: projectId,\n                    commitObject: null,\n                    coreObjects: {},\n                    changedNodes: null\n                },\n                keys = Object.keys(coreObjects),\n                i;\n\n            //handling patch object creation\n            //console.time('patch-computation');\n            for (i = 0; i < keys.length; i += 1) {\n                if (UTIL.coreObjectHasOldAndNewData(coreObjects[keys[i]])) {\n                    // Patch type object.\n                    persistQueueElement[keys[i]] = coreObjects[keys[i]].newData;\n                    if (keys[i] === rootHash) {\n                        //console.time('root-patch-computation');\n                    }\n                    commitData.coreObjects[keys[i]] = UTIL.getPatchObject(coreObjects[keys[i]].oldData,\n                        coreObjects[keys[i]].newData);\n                    //if (keys[i] === rootHash) {\n                    //console.timeEnd('root-patch-computation');\n                    //}\n                } else if (coreObjects[keys[i]].newData && coreObjects[keys[i]].newHash) {\n                    // A new object with no previous data (send the entire data).\n                    commitData.coreObjects[keys[i]] = coreObjects[keys[i]].newData;\n                    persistQueueElement[keys[i]] = coreObjects[keys[i]].newData;\n                } else {\n                    // A regular object.\n                    commitData.coreObjects[keys[i]] = coreObjects[keys[i]];\n                    persistQueueElement[keys[i]] = coreObjects[keys[i]];\n                }\n            }\n            //console.timeEnd('patch-computation');\n            //console.time('getChangedNodes');\n            commitData.changedNodes = UTIL.getChangedNodes(commitData.coreObjects, rootHash);\n\n            //console.timeEnd('getChangedNodes');\n\n            commitData.commitObject = self._getCommitObject(projectId, parents, commitData.rootHash, msg);\n\n            if (project) {\n                project.insertObject(commitData.commitObject);\n                commitId = commitData.commitObject[CONSTANTS.MONGO_ID];\n\n                commitCallback = function commitCallback() {\n                    delete project.projectCache.queuedPersists[commitId];\n                    self.logger.debug('Removed now persisted core-objects from cache: ',\n                        Object.keys(project.projectCache.queuedPersists).length);\n                    callback.apply(null, arguments);\n                };\n\n                project.projectCache.queuedPersists[commitId] = persistQueueElement;\n                logger.debug('Queued non-persisted core-objects in cache: ',\n                    Object.keys(project.projectCache.queuedPersists).length);\n            } else {\n                commitCallback = callback;\n            }\n\n            if (typeof branchName === 'string') {\n                commitData.branchName = branchName;\n                branch = project ? project.branches[branchName] : null;\n            }\n\n            logger.debug('makeCommit', commitData);\n            if (branch) {\n                logger.debug('makeCommit, branch is open will commit using commitQueue. branchName:', branchName);\n                self._commitToBranch(projectId, branchName, commitData, parents[0], commitCallback);\n            } else {\n                webSocket.makeCommit(commitData, commitCallback);\n            }\n        };\n\n        this.setBranchHash = function (projectId, branchName, newHash, oldHash, callback) {\n            var project = projects[projectId],\n                branch;\n\n            logger.debug('setBranchHash', projectId, branchName, newHash, oldHash);\n            if (project && project.branches[branchName]) {\n                branch = project.branches[branchName];\n                logger.debug('setBranchHash, branch is open, will notify other local users about change');\n                project.loadObject(newHash, function (err, commitObject) {\n                    var commitData;\n                    if (err) {\n                        logger.error('setBranchHash, failed to load in commitObject');\n                        //branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\n                        callback(err);\n                        return;\n                    }\n                    logger.debug('setBranchHash, loaded commitObject');\n                    commitData = {\n                        projectId: projectId,\n                        branchName: branchName,\n                        coreObjects: {},\n                        changedNodes: null,\n                        commitObject: commitObject,\n                        oldHash: oldHash\n                    };\n                    self._commitToBranch(projectId, branchName, commitData, oldHash, callback);\n                });\n            } else {\n                StorageObjectLoaders.prototype.setBranchHash.call(self,\n                    projectId, branchName, newHash, oldHash, callback);\n            }\n        };\n\n        this._commitToBranch = function (projectId, branchName, commitData, oldCommitHash, callback) {\n            var project = projects[projectId],\n                newCommitHash = commitData.commitObject._id,\n                branch = project.branches[branchName],\n                wasFirstInQueue,\n                eventData = {\n                    commitData: commitData,\n                    local: true\n                };\n\n            logger.debug('_commitToBranch, [oldCommitHash, localHash]', oldCommitHash, branch.getLocalHash());\n\n            if (oldCommitHash === branch.getLocalHash()) {\n                branch.updateHashes(newCommitHash, null);\n                branch.queueCommit(commitData, callback);\n\n                if (branch.inSync === false) {\n                    branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_NOT_SYNC);\n                } else {\n                    branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_SYNC);\n                }\n\n                // Get the queue length before dispatching because within the asynchrony,\n                // the queue may get longer and we end up never pushing any commit.\n                wasFirstInQueue = branch.getCommitQueue().length === 1;\n\n                branch.dispatchHashUpdate(eventData, function (err, proceed) {\n                    logger.debug('_commitToBranch, dispatchHashUpdate done. [err, proceed]', err, proceed);\n\n                    if (err) {\n                        branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\n                        callback(new Error('Commit failed being loaded in users: ' + err));\n                    } else if (proceed === true) {\n                        if (wasFirstInQueue) {\n                            logger.debug('_commitToBranch, commit was first in queue - will start pushing commit');\n                            self._pushNextQueuedCommit(projectId, branchName);\n                        } else {\n                            logger.debug('_commitToBranch, commit was NOT first in queue');\n                        }\n                    } else {\n                        callback(new Error('Commit halted when loaded in users: ' + err));\n                    }\n                });\n            } else {\n                // The current user is behind the local branch, e.g. plugin trying to save after client changes.\n                logger.warn('_commitToBranch, incoming commit parent was not the same as the localHash ' +\n                    'for the branch, commit will be canceled!');\n                callback(null, {status: CONSTANTS.CANCELED, hash: newCommitHash});\n            }\n        };\n\n        this._pushNextQueuedCommit = function (projectId, branchName) {\n            var project = projects[projectId],\n                branch = project.branches[branchName],\n                commitData;\n\n            logger.debug('_pushNextQueuedCommit, length=', branch.getCommitQueue().length);\n\n            commitData = branch.getFirstCommit();\n\n            logger.debug('_pushNextQueuedCommit, makeCommit [from# -> to#]',\n                commitData.commitObject.parents[0], commitData.commitObject._id);\n\n            webSocket.makeCommit(commitData, function (err, result) {\n                var mergeCommitData;\n                if (err) {\n                    logger.error('makeCommit failed', err);\n                }\n\n                if (branch.isOpen) {\n                    branch.callbackQueue[0](err, result);\n                    if (!err && result) {\n                        if (result.status === CONSTANTS.SYNCED) {\n                            branch.inSync = true;\n                            branch.updateHashes(null, result.hash);\n                            branch.getFirstCommit(true);\n                            if (branch.getCommitQueue().length === 0) {\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\n                            } else {\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_SYNC);\n                                self._pushNextQueuedCommit(projectId, branchName);\n                            }\n                        } else if (result.status === CONSTANTS.MERGED) {\n                            branch.inSync = true;\n                            branch.updateHashes(null, result.mergeHash);\n\n                            if (branch.getCommitQueue().length === 1) {\n                                // Finds the MERGED commit-data and clears the update-queue.\n                                mergeCommitData = branch.getMergedCommit(result.mergeHash);\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.MERGING);\n                                branch.dispatchHashUpdate({commitData: mergeCommitData, local: false},\n                                    function (err, proceed) {\n                                        branch.getFirstCommit(true);\n                                        if (err) {\n                                            logger.error('Loading of merged commit failed with error', err,\n                                                {metadata: mergeCommitData});\n                                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\n                                        } else if (proceed === true) {\n                                            logger.debug('Merged commit was successfully loaded, updating localHash.');\n                                            branch.updateHashes(result.mergeHash, null);\n                                            // TODO: What if a commit is made during the hashUpdate?\n                                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\n                                            return;\n                                        } else {\n                                            logger.warn('Loading of update commit was aborted',\n                                                {metadata: result.mergeHash});\n                                        }\n                                    }\n                                );\n                            } else {\n                                branch.getFirstCommit(true);\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.MERGING);\n                                self._pushNextQueuedCommit(projectId, branchName);\n                            }\n                        } else if (result.status === CONSTANTS.FORKED) {\n                            branch.inSync = false;\n                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_NOT_SYNC);\n                        } else {\n                            err = new Error('Unsupported commit status ' + result.status);\n                            logger.error(err);\n                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\n                        }\n                    } else {\n                        branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\n                    }\n                } else {\n                    logger.error('_pushNextQueuedCommit returned from server but the branch was closed, ' +\n                        'the branch has probably been closed while waiting for the response.', projectId, branchName);\n                }\n            });\n        };\n\n        this._pullNextQueuedCommit = function (projectId, branchName, callback) {\n            ASSERT(projects.hasOwnProperty(projectId), 'Project not opened: ' + projectId);\n            var project = projects[projectId],\n                branch = project.branches[branchName],\n                error,\n                updateData;\n\n            if (!branch) {\n                error = new Error('Branch, ' + branchName + ', not in project ' + projectId + '.');\n                if (callback) {\n                    callback(error);\n                } else {\n                    throw error;\n                }\n            }\n\n            logger.debug('About to update, updateQueue', {metadata: branch.getUpdateQueue()});\n            if (branch.getUpdateQueue().length === 0) {\n                logger.debug('No queued updates, returns');\n                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\n                if (callback) {\n                    callback(null);\n                }\n                return;\n            }\n\n            updateData = branch.getFirstUpdate();\n\n            if (branch.isOpen) {\n                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.PULLING);\n                branch.dispatchHashUpdate({commitData: updateData, local: false}, function (err, proceed) {\n                    var originHash = updateData.commitObject[CONSTANTS.MONGO_ID];\n                    if (err) {\n                        logger.error('Loading of update commit failed with error', err, {metadata: updateData});\n                        branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\n                    } else if (proceed === true) {\n                        logger.debug('New commit was successfully loaded, updating localHash.');\n                        branch.updateHashes(originHash, null);\n                        branch.getFirstUpdate(true);\n                        if (branch.getCommitQueue().length === 0) {\n                            self._pullNextQueuedCommit(projectId, branchName, callback);\n                        }\n                        return;\n                    } else {\n                        logger.warn('Loading of update commit was aborted', {metadata: updateData});\n                    }\n                    if (callback) {\n                        callback(new Error('Loading the first commit was aborted'));\n                    }\n                });\n            } else {\n                logger.error('_pullNextQueuedCommit returned from server but the branch was closed.',\n                    projectId, branchName);\n            }\n        };\n\n        this._getCommitObject = function (projectId, parents, rootHash, msg) {\n            msg = msg || 'n/a';\n            var commitObj = {\n                    root: rootHash,\n                    parents: parents,\n                    updater: [self.userId],\n                    time: (new Date()).getTime(),\n                    message: msg,\n                    type: 'commit',\n                    __v: CONSTANTS.VERSION\n                },\n                commitHash = '#' + GENKEY(commitObj, gmeConfig);\n\n            commitObj[CONSTANTS.MONGO_ID] = commitHash;\n\n            return commitObj;\n        };\n\n        this._rejoinBranchRooms = function (callback) {\n            var projectId,\n                project,\n                branchName,\n                branchRooms = [],\n                promises = [];\n\n            logger.debug('_rejoinBranchRooms');\n\n            function afterRejoin(projectId, branchName) {\n                var project = projects[projectId],\n                    deferred = Q.defer();\n\n                logger.debug('_rejoinBranchRooms, rejoined branch room', projectId, branchName);\n\n                if (project) {\n                    project.getBranchHash(branchName)\n                        .then(function (branchHash) {\n                            var branch = project.branches[branchName],\n                                queuedCommitHash;\n                            logger.debug('_rejoinBranchRooms received branchHash', projectId, branchName, branchHash);\n\n                            if (!branch) {\n                                throw new Error('_rejoinBranchRooms branch was closed ' + projectId + ':' + branchName);\n                            }\n\n                            if (branch.getCommitQueue().length > 0) {\n                                queuedCommitHash = branch.getFirstCommit().commitObject._id;\n                                logger.debug('_rejoinBranchRooms, commits were queued length=, firstQueuedCommitHash',\n                                    branch.getCommitQueue().length, queuedCommitHash);\n\n                                project.getCommonAncestorCommit(branchHash, queuedCommitHash)\n                                    .then(function (commonCommitHash) {\n                                        var result;\n                                        // The commit made it to the server but the acknowledgement was\n                                        // interrupted by the disconnect.\n\n                                        logger.debug('_rejoinBranchRooms getCommonAncestorCommit',\n                                            projectId, branchName, commonCommitHash);\n\n                                        if (branch.isOpen === false) {\n                                            throw new Error('_rejoinBranchRooms branch was closed ' +\n                                                projectId + ':' + branchName);\n                                        }\n\n                                        function dispatchSynced() {\n                                            result = {status: CONSTANTS.SYNCED, hash: branchHash};\n\n                                            branch.callbackQueue[0](null, result);\n                                            branch.inSync = true;\n                                            branch.updateHashes(null, branchHash);\n                                            branch.getFirstCommit(true);\n                                            if (branch.getCommitQueue().length === 0) {\n                                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\n                                            } else {\n                                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_SYNC);\n                                                self._pushNextQueuedCommit(projectId, branchName);\n                                            }\n                                        }\n\n                                        function dispatchForked() {\n                                            result = {status: CONSTANTS.FORKED, hash: branchHash};\n\n                                            branch.callbackQueue[0](null, result);\n                                            branch.inSync = false;\n                                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_NOT_SYNC);\n                                        }\n\n                                        // c - the commit made by this storage\n                                        // H - the head of the branch\n                                        if (commonCommitHash === queuedCommitHash) {\n                                            // The commit is (or was) in sync with the branch.\n                                            //  Hc  or  H\n                                            //  |       c\n                                            //  |       |\n                                            // In case two the next commit made will be forked.\n                                            dispatchSynced();\n                                        } else if (commonCommitHash === branchHash) {\n                                            // The branch has moved back since the commit was made.\n                                            // Treat it like the commit was forked.\n                                            //  c\n                                            //  H\n                                            dispatchForked();\n                                        } else {\n                                            // The branch has moved forward in a different direction.\n                                            //  c   H\n                                            //   \\ /\n                                            dispatchForked();\n                                        }\n\n                                        deferred.resolve();\n                                    })\n                                    .catch(function (err) {\n                                        try {\n                                            if (err.message.indexOf('Commit object does not exist [' +\n                                                    queuedCommitHash) > -1) {\n                                                // Commit never made it to the server - push it.\n                                                logger.debug('First queued commit never made it to the server - push!');\n                                                self._pushNextQueuedCommit(projectId, branchName);\n                                                deferred.resolve();\n                                            } else {\n                                                deferred.reject(err);\n                                            }\n                                        } catch (err) {\n                                            deferred.reject(err);\n                                        }\n                                    });\n                            } else {\n                                logger.debug('_rejoinBranchRooms, no commits were queued during disconnect.');\n                                deferred.resolve();\n                            }\n                        })\n                        .catch(function (err) {\n                            deferred.reject(err);\n                        });\n                } else {\n                    deferred.reject(new Error('_rejoinBranchRooms project was closed ' + projectId + ':' + branchName));\n                }\n\n                return deferred.promise;\n            }\n\n            for (projectId in projects) {\n                if (projects.hasOwnProperty(projectId)) {\n                    project = projects[projectId];\n                    logger.debug('_rejoinBranchRooms found project', projectId);\n                    for (branchName in project.branches) {\n                        if (project.branches.hasOwnProperty(branchName)) {\n                            logger.debug('_rejoinBranchRooms joining branch', projectId, branchName);\n\n                            branchRooms.push({\n                                projectId: projectId,\n                                branchName: branchName\n                            });\n\n                            promises.push(Q.ninvoke(webSocket, 'watchBranch', {\n                                projectId: projectId,\n                                branchName: branchName,\n                                join: true\n                            }));\n                        }\n                    }\n                }\n            }\n\n            return Q.all(promises)\n                .then(function () {\n                    return Q.all(branchRooms.map(function (data) {\n                        // Deal with commit queue for each room after rejoining.\n                        return afterRejoin(data.projectId, data.branchName);\n                    }));\n                })\n                .nodeify(callback);\n        };\n    }\n\n    EditorStorage.prototype = Object.create(StorageObjectLoaders.prototype);\n    EditorStorage.prototype.constructor = EditorStorage;\n\n    return EditorStorage;\n});\n",
    "/*globals define*/\r\n/*jshint browser: true, node:true*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n *\r\n * FIXME: is there a built in function to JavaScript to parse cookies?\r\n */\r\n\r\ndefine('common/util/url',[],function () {\r\n    'use strict';\r\n\r\n    function parseCookie(cookie) {\r\n        var parsed,\r\n            elements,\r\n            i,\r\n            pair;\r\n\r\n        cookie = decodeURIComponent(cookie);\r\n        parsed = {};\r\n        elements = cookie.split(/[;] */);\r\n        for (i = 0; i < elements.length; i++) {\r\n            pair = elements[i].split('=');\r\n            parsed[pair[0]] = pair[1];\r\n        }\r\n        return parsed;\r\n    }\r\n\r\n    function urlToRefObject(url) {\r\n        return {\r\n            $ref: url\r\n        };\r\n    }\r\n\r\n    return {\r\n        parseCookie: parseCookie,\r\n        urlToRefObject: urlToRefObject\r\n    };\r\n});\r\n\n",
    "/*globals define, require, document*/\n/*jshint browser:true, camelcase:false*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/socketio/browserclient',['common/util/url'], function (URL) {\n    'use strict';\n\n    function IoClient (mainLogger, gmeConfig) {\n        var logger = mainLogger.fork('socketio-browserclient');\n\n        this.connect = function (callback) {\n            var hostAddress = window.location.protocol + '//' + window.location.host,\n                socketIoUrl;\n\n            if (window.__karma__) {\n                // TRICKY: karma uses web sockets too, we need to use the gme server's port\n                hostAddress = window.location.protocol + '//localhost:' + gmeConfig.server.port;\n            }\n\n            socketIoUrl = hostAddress + '/socket.io/socket.io.js';\n            logger.debug('Will require socketIO from', socketIoUrl);\n\n            require([socketIoUrl], function (io_) {\n                var io = io_ || window.io,\n                    socket;\n\n                logger.debug('Connecting to \"' + hostAddress + '\" with options', gmeConfig.socketIO.clientOptions);\n                socket = io.connect(hostAddress, gmeConfig.socketIO.clientOptions);\n                callback(null, socket);\n            });\n        };\n\n        this.getToken = function () {\n            var cookies = URL.parseCookie(document.cookie);\n            if (cookies[gmeConfig.authentication.jwt.cookieId]) {\n                return cookies[gmeConfig.authentication.jwt.cookieId];\n            }\n        };\n    }\n\n    return IoClient;\n});\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author rkereskenyi / https://github.com/rkereskenyi\n */\n\ndefine('common/EventDispatcher',[], function () {\n    'use strict';\n\n    var EventDispatcher = function () {\n        this._eventList = {};\n    };\n\n    EventDispatcher.prototype = {\n        _eventList: null,\n        _getEvent: function (eventName, create) {\n            // Check if Array of Event Handlers has been created\n            if (!this._eventList[eventName]) {\n\n                // Check if the calling method wants to create the Array\n                // if not created. This reduces unneeded memory usage.\n                if (!create) {\n                    return null;\n                }\n\n                // Create the Array of Event Handlers\n                this._eventList[eventName] = [];\n                // new Array\n            }\n\n            // return the Array of Event Handlers already added\n            return this._eventList[eventName];\n        },\n        addEventListener: function (eventName, handler) {\n            // Get the Array of Event Handlers\n            var evt = this._getEvent(eventName, true);\n\n            // Add the new Event Handler to the Array\n            evt.push(handler);\n        },\n        removeEventListener: function (eventName, handler) {\n            // Get the Array of Event Handlers\n            var evt = this._getEvent(eventName);\n\n            if (!evt) {\n                return;\n            }\n\n            // Helper Method - an Array.indexOf equivalent\n            var getArrayIndex = function (array, item) {\n                for (var i = 0; i < array.length; i++) {\n                    if (array[i] === item) {\n                        return i;\n                    }\n                }\n                return -1;\n            };\n\n            // Get the Array index of the Event Handler\n            var index = getArrayIndex(evt, handler);\n\n            if (index > -1) {\n                // Remove Event Handler from Array\n                evt.splice(index, 1);\n            }\n        },\n        removeAllEventListeners: function (eventName) {\n            // Get the Array of Event Handlers\n            var evt = this._getEvent(eventName);\n\n            if (!evt) {\n                return;\n            }\n\n            evt.splice(0, evt.length);\n        },\n        dispatchEvent: function (eventName, eventArgs) {\n            // Get a function that will call all the Event Handlers internally\n            var handler = this._getEventHandler(eventName);\n            if (handler) {\n                // call the handler function\n                // Pass in \"sender\" and \"eventArgs\" parameters\n                handler(this, eventArgs);\n            }\n        },\n        clearAllEvents: function () {\n            this._eventList = {};\n        },\n        _getEventHandler: function (eventName) {\n            // Get Event Handler Array for this Event\n            var evt = this._getEvent(eventName, false);\n            if (!evt || evt.length === 0) {\n                return null;\n            }\n\n            // Create the Handler method that will use currying to\n            // call all the Events Handlers internally\n            var h = function (sender, args) {\n                for (var i = 0; i < evt.length; i++) {\n                    evt[i](sender, args);\n                }\n            };\n\n            // Return this new Handler method\n            return h;\n        }\n    };\n\n    return EventDispatcher;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\n// socket.io-client\n//\ndefine('common/storage/socketio/websocket',[\n    'common/EventDispatcher',\n    'common/storage/constants'\n], function (EventDispatcher, CONSTANTS) {\n\n    'use strict';\n\n    function WebSocket(ioClient, mainLogger, gmeConfig) {\n        var self = this,\n            logger = mainLogger.fork('WebSocket'),\n            forcedDisconnect,\n            beenConnected = false;\n\n        self.socket = null;\n        self.userId = null;\n        self.serverVersion = null;\n\n        logger.debug('ctor');\n        EventDispatcher.call(this);\n\n        function wrapError(callback) {\n            return function () {\n                if (typeof arguments[0] === 'string') {\n                    callback(new Error(arguments[0]), arguments[1]); // Add second argument for e.g. pluginResults\n                } else {\n                    callback.apply(null, arguments);\n                }\n            };\n        }\n\n        this.connect = function (networkHandler) {\n            logger.debug('Connecting via ioClient.');\n            forcedDisconnect = false;\n\n            ioClient.connect(function (err, socket_) {\n                if (err) {\n                    networkHandler(err);\n                    return;\n                }\n                self.socket = socket_;\n\n                self.socket.on('connect', function () {\n                    var i,\n                        sendBufferSave = [];\n                    if (beenConnected) {\n                        logger.debug('Socket got reconnected.');\n\n                        // #368\n                        for (i = 0; i < self.socket.sendBuffer.length; i += 1) {\n                            // Clear all makeCommits. If pushed - they would be emitted back to the socket.\n                            if (self.socket.sendBuffer[i].data[0] === 'makeCommit') {\n                                logger.debug('Removed makeCommit from sendBuffer...');\n                            } else {\n                                sendBufferSave.push(self.socket.sendBuffer[i]);\n                            }\n                        }\n                        if (self.socket.receiveBuffer.length > 0) {\n                            // TODO: In which cases is this applicable??\n                            logger.debug('receiveBuffer not empty after reconnect');\n                        }\n                        self.socket.sendBuffer = sendBufferSave;\n                        self.socket.emit('getConnectionInfo', {webgmeToken: ioClient.getToken()}, function (err, info) {\n                            if (err) {\n                                networkHandler(new Error('Could not get info on reconnect'));\n                            } else {\n                                if (self.serverVersion === info.serverVersion) {\n                                    networkHandler(null, CONSTANTS.RECONNECTED);\n                                } else {\n                                    networkHandler(null, CONSTANTS.INCOMPATIBLE_CONNECTION);\n                                }\n                            }\n                        });\n                    } else {\n                        logger.debug('Socket got connected for the first time.');\n                        beenConnected = true;\n                        self.socket.emit('getConnectionInfo', {webgmeToken: ioClient.getToken()}, function (err, info) {\n                            if (err) {\n                                networkHandler(new Error('Could not get info on connect'));\n                            } else {\n                                self.userId = info.userId || gmeConfig.authentication.guestAccount;\n                                self.serverVersion = info.serverVersion;\n                                networkHandler(null, CONSTANTS.CONNECTED);\n                            }\n                        });\n                    }\n                });\n\n                self.socket.on('disconnect', function () {\n                    logger.debug('Socket got disconnected!');\n                    networkHandler(null, CONSTANTS.DISCONNECTED);\n\n                    // When the server is shut-down the skipReconnect is set to false\n                    // create a new socket connect.\n                    if (self.socket.io.skipReconnect === true && forcedDisconnect === false) {\n                        self.connect(networkHandler);\n                    }\n                });\n\n                self.socket.on(CONSTANTS.JWT_ABOUT_TO_EXPIRE, function (data) {\n                    data.etype = CONSTANTS.JWT_ABOUT_TO_EXPIRE;\n                    logger.debug('JWT_ABOUT_TO_EXPIRE event', {metadata: data});\n                    networkHandler(null, CONSTANTS.JWT_ABOUT_TO_EXPIRE);\n                });\n\n                self.socket.on(CONSTANTS.JWT_EXPIRED, function (data) {\n                    data.etype = CONSTANTS.JWT_EXPIRED;\n                    logger.debug('JWT_EXPIRED event', {metadata: data});\n                    networkHandler(null, CONSTANTS.JWT_EXPIRED);\n                });\n\n                self.socket.on(CONSTANTS.PROJECT_DELETED, function (data) {\n                    data.etype = CONSTANTS.PROJECT_DELETED;\n                    logger.debug('PROJECT_DELETED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.PROJECT_DELETED, data);\n                });\n\n                self.socket.on(CONSTANTS.PROJECT_CREATED, function (data) {\n                    data.etype = CONSTANTS.PROJECT_CREATED;\n                    logger.debug('PROJECT_CREATED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.PROJECT_CREATED, data);\n                });\n\n                self.socket.on(CONSTANTS.BRANCH_CREATED, function (data) {\n                    data.etype = CONSTANTS.BRANCH_CREATED;\n                    logger.debug('BRANCH_CREATED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.BRANCH_CREATED + data.projectId, data);\n                });\n\n                self.socket.on(CONSTANTS.BRANCH_DELETED, function (data) {\n                    data.etype = CONSTANTS.BRANCH_DELETED;\n                    logger.debug('BRANCH_DELETED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.BRANCH_DELETED + data.projectId, data);\n                });\n\n                self.socket.on(CONSTANTS.BRANCH_HASH_UPDATED, function (data) {\n                    data.etype = CONSTANTS.BRANCH_HASH_UPDATED;\n                    logger.debug('BRANCH_HASH_UPDATED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.BRANCH_HASH_UPDATED + data.projectId, data);\n                });\n\n                self.socket.on(CONSTANTS.TAG_CREATED, function (data) {\n                    data.etype = CONSTANTS.TAG_CREATED;\n                    logger.debug('TAG_CREATED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.TAG_CREATED + data.projectId, data);\n                });\n\n                self.socket.on(CONSTANTS.TAG_DELETED, function (data) {\n                    data.etype = CONSTANTS.TAG_DELETED;\n                    logger.debug('TAG_DELETED event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.TAG_DELETED + data.projectId, data);\n                });\n\n                self.socket.on(CONSTANTS.BRANCH_UPDATED, function (data) {\n                    logger.debug('BRANCH_UPDATED event', {metadata: data});\n                    self.dispatchEvent(self.getBranchUpdateEventName(data.projectId, data.branchName), data);\n                });\n\n                self.socket.on(CONSTANTS.NOTIFICATION, function (data) {\n                    logger.debug('NOTIFICATION event', {metadata: data});\n                    self.dispatchEvent(CONSTANTS.NOTIFICATION, data);\n                });\n            });\n        };\n\n        this.disconnect = function () {\n            forcedDisconnect = true;\n            self.socket.disconnect();\n            beenConnected = false; //This is a forced disconnect from the storage and all listeners are removed\n        };\n\n        // watcher functions\n        this.watchDatabase = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('watchDatabase', data, wrapError(callback));\n        };\n\n        this.watchProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('watchProject', data, wrapError(callback));\n        };\n\n        this.watchBranch = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('watchBranch', data, wrapError(callback));\n        };\n\n        // model editing functions\n        this.openProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('openProject', data, wrapError(callback));\n        };\n\n        this.closeProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('closeProject', data, wrapError(callback));\n        };\n\n        this.openBranch = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('openBranch', data, wrapError(callback));\n        };\n\n        this.closeBranch = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('closeBranch', data, wrapError(callback));\n        };\n\n        this.makeCommit = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('makeCommit', data, wrapError(callback));\n        };\n\n        this.loadObjects = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('loadObjects', data, wrapError(callback));\n        };\n\n        this.loadPaths = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('loadPaths', data, wrapError(callback));\n        };\n\n        this.setBranchHash = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('setBranchHash', data, wrapError(callback));\n        };\n\n        this.getBranchHash = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getBranchHash', data, wrapError(callback));\n        };\n\n        // REST like functions\n        this.getProjects = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getProjects', data, wrapError(callback));\n        };\n\n        this.deleteProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('deleteProject', data, wrapError(callback));\n        };\n\n        this.createProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('createProject', data, wrapError(callback));\n        };\n\n        this.transferProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('transferProject', data, wrapError(callback));\n        };\n\n        this.duplicateProject = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('duplicateProject', data, wrapError(callback));\n        };\n\n        this.getBranches = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getBranches', data, wrapError(callback));\n        };\n\n        this.createTag = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('createTag', data, wrapError(callback));\n        };\n\n        this.deleteTag = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('deleteTag', data, wrapError(callback));\n        };\n\n        this.getTags = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getTags', data, wrapError(callback));\n        };\n\n        this.getCommits = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getCommits', data, wrapError(callback));\n        };\n\n        this.getHistory = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getHistory', data, wrapError(callback));\n        };\n\n        this.getLatestCommitData = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getLatestCommitData', data, wrapError(callback));\n        };\n\n        this.getCommonAncestorCommit = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('getCommonAncestorCommit', data, wrapError(callback));\n        };\n\n        //temporary simple request / result functions\n        this.simpleRequest = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('simpleRequest', data, wrapError(callback));\n        };\n\n        this.simpleQuery = function (workerId, data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('simpleQuery', workerId, data, wrapError(callback));\n        };\n\n        this.sendNotification = function (data, callback) {\n            data.webgmeToken = ioClient.getToken();\n            self.socket.emit('notification', data, wrapError(callback));\n        };\n\n        // Helper functions\n        this.getBranchUpdateEventName = function (projectId, branchName) {\n            return CONSTANTS.BRANCH_UPDATED + projectId + CONSTANTS.ROOM_DIVIDER + branchName;\n        };\n    }\n\n    WebSocket.prototype = Object.create(EventDispatcher.prototype);\n    WebSocket.prototype.constructor = WebSocket;\n\n    return WebSocket;\n});\n",
    "/*globals define*/\n/*jshint browser:true*/\n/**\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/storage/browserstorage',[\n    'common/storage/storageclasses/editorstorage',\n    'common/storage/socketio/browserclient',\n    'common/storage/socketio/websocket',\n], function (EditorStorage, BrowserIoClient, WebSocket) {\n    'use strict';\n\n    var _storage;\n\n    function _createStorage(logger, gmeConfig) {\n        var ioClient = new BrowserIoClient(logger, gmeConfig),\n            webSocket = new WebSocket(ioClient, logger, gmeConfig),\n            storage = new EditorStorage(webSocket, logger, gmeConfig);\n\n        return storage;\n    }\n\n    function getStorage (logger, gmeConfig, forceNew) {\n        logger.debug('getStorage');\n\n        if (!_storage) {\n            logger.debug('No storage existed, will create new one..');\n            _storage = _createStorage(logger, gmeConfig);\n        } else {\n            logger.debug('Storage existed...');\n\n            if (forceNew === true) {\n                logger.debug('Force new set to true, will create new one.');\n                _storage = _createStorage(logger, gmeConfig);\n            }\n        }\n\n        return _storage;\n    }\n\n    return {\n        getStorage: getStorage\n    };\n});\n",
    "/*globals define*/\n/*jshint node: true, browser: true, camelcase: false*/\n\n/**\n * @author mmaroti / https://github.com/mmaroti\n */\n\n(function () {\n    'use strict';\n\n    // ------- assert -------\n\n    var TASYNC_TRACE_ENABLE = true;\n\n    function setTrace(value) {\n        TASYNC_TRACE_ENABLE = value;\n    }\n\n    function assert(cond) {\n        if (!cond) {\n            throw new Error('tasync internal error');\n        }\n    }\n\n    // ------- Future -------\n\n    var STATE_LISTEN = 0;\n    var STATE_REJECTED = 1;\n    var STATE_RESOLVED = 2;\n\n    var Future = function () {\n        this.state = STATE_LISTEN;\n        this.value = [];\n    };\n\n    Future.prototype.register = function (target) {\n        assert(this.state === STATE_LISTEN);\n        assert(typeof target === 'object' && target !== null);\n\n        this.value.push(target);\n    };\n\n    Future.prototype.resolve = function (value) {\n        assert(this.state === STATE_LISTEN && !(value instanceof Future));\n\n        var listeners = this.value;\n\n        this.state = STATE_RESOLVED;\n        this.value = value;\n\n        var i;\n        for (i = 0; i < listeners.length; ++i) {\n            listeners[i].onResolved(value);\n        }\n    };\n\n    Future.prototype.reject = function (error) {\n        assert(this.state === STATE_LISTEN && error instanceof Error);\n\n        var listeners = this.value;\n\n        this.state = STATE_REJECTED;\n        this.value = error;\n\n        var i;\n        for (i = 0; i < listeners.length; ++i) {\n            listeners[i].onRejected(error);\n        }\n    };\n\n    // ------- Delay -------\n\n    function delay(timeout, value) {\n        if (timeout < 0) {\n            return value;\n        }\n\n        var future = new Future();\n        setTimeout(function () {\n            future.resolve(value);\n        }, timeout);\n        return future;\n    }\n\n    // ------- Lift -------\n\n    var FutureLift = function (array, index) {\n        Future.call(this);\n\n        this.array = array;\n        this.index = index;\n    };\n\n    FutureLift.prototype = Object.create(Future.prototype);\n\n    FutureLift.prototype.onResolved = function (value) {\n        assert(this.state === STATE_LISTEN);\n\n        var array = this.array;\n        array[this.index] = value;\n\n        while (++this.index < array.length) {\n            value = array[this.index];\n            if (value instanceof Future) {\n                if (value.state === STATE_RESOLVED) {\n                    array[this.index] = value.value;\n                } else if (value.state === STATE_LISTEN) {\n                    value.register(this);\n                    return;\n                } else {\n                    assert(value.state === STATE_REJECTED);\n                    this.reject(value.value);\n                    return;\n                }\n            }\n        }\n\n        this.array = null;\n        this.resolve(array);\n    };\n\n    FutureLift.prototype.onRejected = function (error) {\n        this.array = null;\n        this.reject(error);\n    };\n\n    var lift = function (array) {\n        if (!(array instanceof Array)) {\n            throw new Error('array argument is expected');\n        }\n\n        var index;\n        for (index = 0; index < array.length; ++index) {\n            var value = array[index];\n            if (value instanceof Future) {\n                if (value.state === STATE_RESOLVED) {\n                    array[index] = value.value;\n                } else if (value.state === STATE_LISTEN) {\n                    var future = new FutureLift(array, index);\n                    value.register(future);\n                    return future;\n                } else {\n                    assert(value.state === STATE_REJECTED);\n                    return value;\n                }\n            }\n        }\n\n        return array;\n    };\n\n    // ------- Apply -------\n\n    var ROOT = {\n        subframes: 0\n    };\n\n    var FRAME = ROOT;\n\n    var FutureApply = function tasync_trace_end(func, that, args, index) {\n        Future.call(this);\n\n        this.caller = FRAME;\n        this.position = ++FRAME.subframes;\n        this.subframes = 0;\n\n        if (TASYNC_TRACE_ENABLE) {\n            this.trace = new Error();\n        }\n\n        this.func = func;\n        this.that = that;\n        this.args = args;\n        this.index = index;\n    };\n\n    FutureApply.prototype = Object.create(Future.prototype);\n\n    FutureApply.prototype.getPath = function () {\n        var future = this.caller,\n            path = [this.position];\n\n        while (future !== ROOT) {\n            path.push(future.position);\n            future = future.caller;\n        }\n\n        return path;\n    };\n\n    function getSlice(trace) {\n        assert(typeof trace === 'string');\n\n        var end = trace.indexOf('tasync_trace_start');\n        if (end >= 0) {\n            end = trace.lastIndexOf('\\n', end) + 1;\n        } else {\n            if (trace.charAt(trace.length - 1) !== '\\n') {\n                // trace += '\\n';\n            }\n            end = undefined;\n        }\n\n        var start = trace.indexOf('tasync_trace_end');\n        if (start >= 0) {\n            start = trace.indexOf('\\n', start) + 1;\n            if (start >= 0) {\n                start = trace.indexOf('\\n', start) + 1;\n            }\n        } else {\n            start = 0;\n        }\n\n        return trace.substring(start, end);\n    }\n\n    function createError(error, future) {\n        if (!(error instanceof Error)) {\n            error = new Error(error);\n        }\n\n        if (TASYNC_TRACE_ENABLE) {\n            error.trace = getSlice(error.stack);\n            do {\n                error.trace += '*** callback ***\\n';\n                error.trace += getSlice(future.trace.stack);\n                future = future.caller;\n            } while (future !== ROOT);\n        }\n\n        return error;\n    }\n\n    FutureApply.prototype.onRejected = function (error) {\n        this.args = null;\n        this.reject(error);\n    };\n\n    FutureApply.prototype.onResolved = function tasync_trace_start(value) {\n        assert(this.state === STATE_LISTEN);\n\n        var args = this.args;\n        args[this.index] = value;\n\n        while (--this.index >= 0) {\n            value = args[this.index];\n            if (value instanceof Future) {\n                if (value.state === STATE_RESOLVED) {\n                    args[this.index] = value.value;\n                } else if (value.state === STATE_LISTEN) {\n                    value.register(this);\n                    return;\n                } else {\n                    assert(value.state === STATE_REJECTED);\n                    this.reject(value.value);\n                    return;\n                }\n            }\n        }\n\n        assert(FRAME === ROOT);\n        FRAME = this;\n\n        this.args = null;\n        try {\n            value = this.func.apply(this.that, args);\n        } catch (error) {\n            FRAME = ROOT;\n\n            this.reject(createError(error, this));\n            return;\n        }\n\n        FRAME = ROOT;\n\n        if (value instanceof Future) {\n            assert(value.state === STATE_LISTEN);\n\n            this.onResolved = this.resolve;\n            value.register(this);\n        } else {\n            this.resolve(value);\n        }\n    };\n\n    var apply = function (func, args, that) {\n        if (typeof func !== 'function') {\n            throw new Error('function argument is expected');\n        } else if (!(args instanceof Array)) {\n            throw new Error('array argument is expected');\n        }\n\n        var index = args.length;\n        while (--index >= 0) {\n            var value = args[index];\n            if (value instanceof Future) {\n                if (value.state === STATE_LISTEN) {\n                    var future = new FutureApply(func, that, args, index);\n                    value.register(future);\n                    return future;\n                } else if (value.state === STATE_RESOLVED) {\n                    args[index] = value.value;\n                } else {\n                    assert(value.state === STATE_REJECTED);\n                    return value;\n                }\n            }\n        }\n\n        return func.apply(that, args);\n    };\n\n    // ------- Call -------\n\n    var FutureCall = function tasync_trace_end(args, index) {\n        Future.call(this);\n\n        this.caller = FRAME;\n        this.position = ++FRAME.subframes;\n        this.subframes = 0;\n\n        if (TASYNC_TRACE_ENABLE) {\n            this.trace = new Error();\n        }\n\n        this.args = args;\n        this.index = index;\n    };\n\n    FutureCall.prototype = Object.create(Future.prototype);\n\n    FutureCall.prototype.getPath = FutureApply.prototype.getPath;\n    FutureCall.prototype.onRejected = FutureApply.prototype.onRejected;\n\n    var FUNCTION_CALL = Function.call;\n\n    FutureCall.prototype.onResolved = function tasync_trace_start(value) {\n        assert(this.state === STATE_LISTEN);\n\n        var args = this.args;\n        args[this.index] = value;\n\n        while (--this.index >= 0) {\n            value = args[this.index];\n            if (value instanceof Future) {\n                if (value.state === STATE_RESOLVED) {\n                    args[this.index] = value.value;\n                } else if (value.state === STATE_LISTEN) {\n                    value.register(this);\n                    return;\n                } else {\n                    assert(value.state === STATE_REJECTED);\n                    this.reject(value.value);\n                    return;\n                }\n            }\n        }\n\n        assert(FRAME === ROOT);\n        FRAME = this;\n\n        this.args = null;\n        try {\n            var func = args[0];\n            args[0] = null;\n            value = FUNCTION_CALL.apply(func, args);\n        } catch (error) {\n            FRAME = ROOT;\n\n            this.reject(createError(error, this));\n            return;\n        }\n\n        FRAME = ROOT;\n\n        if (value instanceof Future) {\n            assert(value.state === STATE_LISTEN);\n\n            this.onResolved = this.resolve;\n            value.register(this);\n        } else {\n            this.resolve(value);\n        }\n    };\n\n    var call = function () {\n        var index = arguments.length;\n        while (--index >= 0) {\n            var value = arguments[index];\n            if (value instanceof Future) {\n                if (value.state === STATE_LISTEN) {\n                    var future = new FutureCall(arguments, index);\n                    value.register(future);\n                    return future;\n                } else if (value.state === STATE_RESOLVED) {\n                    arguments[index] = value.value;\n                } else {\n                    assert(value.state === STATE_REJECTED);\n                    return value;\n                }\n            }\n        }\n\n        var func = arguments[0];\n        return FUNCTION_CALL.apply(func, arguments);\n    };\n\n    // ------- TryCatch -------\n\n    function FutureTryCatch(handler) {\n        Future.call(this);\n\n        this.handler = handler;\n    }\n\n    FutureTryCatch.prototype = Object.create(Future.prototype);\n\n    FutureTryCatch.prototype.onRejected = function (error) {\n        try {\n            var value = this.handler(error);\n\n            if (value instanceof Future) {\n                this.onRejected = Future.prorotype.reject;\n                value.register(this);\n            } else {\n                this.resolve(value);\n            }\n        } catch (err) {\n            this.reject(err);\n        }\n    };\n\n    FutureTryCatch.prototype.onResolved = Future.prototype.resolve;\n\n    function trycatch(func, handler) {\n        if (typeof func !== 'function' || typeof handler !== 'function') {\n            throw new Error('function arguments are expected');\n        }\n\n        try {\n            var value = func();\n\n            if (value instanceof Future) {\n                var future = new FutureTryCatch(handler);\n                value.register(future);\n\n                return future;\n            } else {\n                return value;\n            }\n        } catch (error) {\n            return handler(error);\n        }\n    }\n\n    // ------- Wrap -------\n\n    function wrap(func) {\n        if (typeof func !== 'function') {\n            throw new Error('function argument is expected');\n        }\n\n        if (func.tasync_wraped === undefined) {\n            func.tasync_wraped = function () {\n                var args = arguments;\n                var future = new Future();\n\n                args[args.length++] = function (error, value) {\n                    if (error) {\n                        future.reject(error instanceof Error ? error : new Error(error));\n                    } else {\n                        future.resolve(value);\n                    }\n                };\n\n                func.apply(this, args);\n\n                if (future.state === STATE_LISTEN) {\n                    return future;\n                } else if (future.state === STATE_RESOLVED) {\n                    return future.value;\n                } else {\n                    assert(future.state === STATE_REJECTED);\n                    throw future.value;\n                }\n            };\n\n            func.tasync_wraped.tasync_unwraped = func;\n        }\n\n        return func.tasync_wraped;\n    }\n\n    // ------- Unwrap -------\n\n    function UnwrapListener(callback) {\n        this.callback = callback;\n    }\n\n    UnwrapListener.prototype.onRejected = function (error) {\n        this.callback(error);\n    };\n\n    UnwrapListener.prototype.onResolved = function (value) {\n        this.callback(null, value);\n    };\n\n    function unwrap(func) {\n        if (typeof func !== 'function') {\n            throw new Error('function argument is expected');\n        }\n\n        if (func.tasync_unwraped === undefined) {\n            func.tasync_unwraped = function () {\n                var args = arguments;\n\n                var callback = args[--args.length];\n                assert(typeof callback === 'function');\n\n                var value;\n                try {\n                    value = func.apply(this, args);\n                } catch (error) {\n                    callback(error);\n                    return;\n                }\n\n                if (value instanceof Future) {\n                    assert(value.state === STATE_LISTEN);\n\n                    var listener = new UnwrapListener(callback);\n                    value.register(listener);\n                } else {\n                    callback(null, value);\n                }\n            };\n\n            func.tasync_unwraped.tasync_wraped = func;\n        }\n\n        return func.tasync_unwraped;\n    }\n\n    // ------- Throttle -------\n\n    function FutureThrottle(func, that, args) {\n        Future.call(this);\n\n        this.func = func;\n        this.that = that;\n        this.args = args;\n\n        this.caller = FRAME;\n        this.position = ++FRAME.subframes;\n\n        this.path = this.getPath();\n    }\n\n    FutureThrottle.prototype = Object.create(Future.prototype);\n\n    FutureThrottle.prototype.execute = function () {\n        var value;\n        try {\n            assert(FRAME === ROOT);\n            FRAME = this;\n\n            value = this.func.apply(this.that, this.args);\n\n            FRAME = ROOT;\n        } catch (error) {\n            FRAME = ROOT;\n\n            this.reject(error);\n            return;\n        }\n\n        if (value instanceof Future) {\n            assert(value.state === STATE_LISTEN);\n            value.register(this);\n        } else {\n            this.resolve(value);\n        }\n    };\n\n    FutureThrottle.prototype.getPath = FutureApply.prototype.getPath;\n    FutureThrottle.prototype.onResolved = Future.prototype.resolve;\n    FutureThrottle.prototype.onRejected = Future.prototype.reject;\n\n    FutureThrottle.prototype.compare = function (second) {\n        var first = this.path;\n        second = second.path;\n\n        var i, limit = first.length < second.length ? first.length : second.length;\n        for (i = 0; i < limit; ++i) {\n            if (first[i] !== second[i]) {\n                return first[i] - second[i];\n            }\n        }\n\n        return first.length - second.length;\n    };\n\n    function ThrottleListener(limit) {\n        this.running = 0;\n        this.limit = limit;\n        this.queue = [];\n    }\n\n    function priorityQueueInsert(queue, elem) {\n        var low = 0;\n        var high = queue.length;\n\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            assert(low <= mid && mid < high);\n\n            if (elem.compare(queue[mid]) < 0) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n\n        queue.splice(low, 0, elem);\n    }\n\n    ThrottleListener.prototype.execute = function (func, that, args) {\n        if (this.running < this.limit) {\n            var value = func.apply(that, args);\n\n            if (value instanceof Future) {\n                assert(value.state === STATE_LISTEN);\n\n                ++this.running;\n                value.register(this);\n            }\n\n            return value;\n        } else {\n            var future = new FutureThrottle(func, that, args);\n            priorityQueueInsert(this.queue, future);\n\n            return future;\n        }\n    };\n\n    ThrottleListener.prototype.onResolved = function () {\n        if (this.queue.length > 0) {\n            var future = this.queue.pop();\n            future.register(this);\n\n            future.execute();\n        } else {\n            --this.running;\n        }\n    };\n\n    ThrottleListener.prototype.onRejected = ThrottleListener.prototype.onResolved;\n\n    // TODO: prevent recursion, otheriwise throttle will not work\n    function throttle(func, limit) {\n        if (typeof func !== 'function') {\n            throw new Error('function argument is expected');\n        } else if (typeof limit !== 'number') {\n            throw new Error('number argument is expected');\n        }\n\n        var listener = new ThrottleListener(limit);\n\n        return function () {\n            return listener.execute(func, this, arguments);\n        };\n    }\n\n    // ------- Join -------\n\n    function FutureJoin(first) {\n        Future.call(this);\n\n        this.first = first;\n        this.missing = first instanceof Future && first.state === STATE_LISTEN ? 1 : 0;\n    }\n\n    FutureJoin.prototype = Object.create(Future.prototype);\n\n    FutureJoin.prototype.onResolved = function (/*value*/) {\n        if (--this.missing === 0) {\n            assert(this.state !== STATE_RESOLVED);\n\n            if (this.state === STATE_LISTEN) {\n                if (this.first instanceof Future) {\n                    assert(this.first.state === STATE_RESOLVED);\n\n                    this.resolve(this.first.value);\n                } else {\n                    this.resolve(this.first);\n                }\n            }\n        }\n    };\n\n    FutureJoin.prototype.onRejected = function (error) {\n        if (this.state === STATE_LISTEN) {\n            this.reject(error);\n        }\n    };\n\n    function join(first, second) {\n        if (first instanceof Future && first.state === STATE_REJECTED) {\n            return first;\n        } else if (second instanceof Future) {\n            if (second.state === STATE_RESOLVED) {\n                return first;\n            } else if (second.state === STATE_REJECTED) {\n                return second;\n            }\n        } else {\n            return first;\n        }\n\n        if (!(first instanceof FutureJoin)) {\n            first = new FutureJoin(first);\n        }\n\n        first.missing += 1;\n        second.register(first);\n\n        return first;\n    }\n\n    // ------- TASYNC -------\n\n    var TASYNC = {\n        setTrace: setTrace,\n        delay: delay,\n        lift: lift,\n        apply: apply,\n        call: call,\n        trycatch: trycatch,\n        wrap: wrap,\n        unwrap: unwrap,\n        throttle: throttle,\n        join: join\n    };\n\n    if (typeof define === 'function' && define.amd) {\n        define('common/core/tasync',[], function () {\n            return TASYNC;\n        });\n    } else {\n        module.exports = TASYNC;\n    }\n}());\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author mmaroti / https://github.com/mmaroti\n */\n\ndefine('common/core/corerel',[\n    'common/util/assert',\n    'common/core/tasync',\n    'common/util/random',\n    'common/core/constants',\n], function (ASSERT, TASYNC, RANDOM, CONSTANTS) {\n\n    'use strict';\n\n    function InverseOverlaysCache(maxSize, logger) {\n        var self = this;\n\n        maxSize = maxSize || 10000;\n        this._backup = {};\n        this._cache = {};\n        this._size = 0;\n\n        this.getItem = function (key) {\n            if (this._cache[key]) {\n                return this._cache[key];\n            }\n\n            if (this._backup[key]) {\n                return this._backup[key];\n            }\n\n            return null;\n\n        };\n\n        this.setItem = function (key, data) {\n            if (!this._cache[key]) {\n                if (this._size === maxSize) {\n                    this._size = 0;\n                    this._backup = this._cache;\n                    this._cache = {};\n                }\n                this._size += 1;\n                this._cache[key] = data;\n\n            } else {\n                logger.warn('trying to add inverse relation object multiple times [#' + key + ']');\n            }\n        };\n\n    }\n\n    function CoreRel(innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof innerCore === 'object');\n\n        var logger = innerCore.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        this._inverseCache = new InverseOverlaysCache(options.globConf.core.inverseRelationsCacheSize,\n            logger.fork('inverseCache'));\n\n        logger.debug('initialized CoreRel');\n\n        //<editor-fold=Helper Functions>\n        function test(text, cond) {\n            if (!cond) {\n                throw new Error(text);\n            }\n        }\n\n        function isObject(node) {\n            node = innerCore.normalize(node);\n            return typeof node.data === 'object' && node.data !== null;\n        }\n\n        function isValidNodeThrow(node) {\n            test('coretree', innerCore.isValidNode(node));\n            test('isobject', isObject(node));\n        }\n\n        function getRelativePointerPathFrom(node, source, name) {\n            ASSERT(self.isValidNode(node) && typeof source === 'string' && typeof name === 'string');\n            var target,\n                ovrData;\n\n            do {\n                ovrData = (innerCore.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {})[source];\n                if (ovrData) {\n                    target = ovrData[name];\n                    if (target !== undefined) {\n                        break;\n                    }\n                }\n\n                source = '/' + innerCore.getRelid(node) + source;\n                node = innerCore.getParent(node);\n\n            } while (node);\n\n            return {\n                target: target,\n                node: node\n            };\n        }\n\n        function storeNewInverseOverlays(node) {\n            var hash = self.getHash(node),\n                relid;\n\n            if (hash && node.inverseOverlays) {\n                self._inverseCache.setItem(hash, node.inverseOverlays);\n                for (relid in node.children) {\n                    storeNewInverseOverlays(node.children[relid]);\n                }\n            }\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Modified Methods>\n        this.isValidNode = function (node) {\n            try {\n                isValidNodeThrow(node);\n\n                return true;\n            } catch (error) {\n                logger.error(error.message, {metadata: {stack: error.stack, node: node}});\n                return false;\n            }\n        };\n\n        this.persist = function (node) {\n            var persisted = innerCore.persist(node);\n\n            storeNewInverseOverlays(self.getRoot(node));\n\n            return persisted;\n        };\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.getInverseOverlayOfNode = function (node) {\n            var hash,\n                inverseOverlays = {},\n                overlay,\n                source,\n                name,\n                target;\n\n            // If the node already has inverse computed we return that\n            if (node.inverseOverlays) {\n                return node.inverseOverlays;\n            }\n\n            // If we find it in the cache we set that and use it\n            hash = self.getHash(node);\n            if (hash) {\n                inverseOverlays = self._inverseCache.getItem(hash);\n                if (inverseOverlays) {\n                    node.inverseOverlays = inverseOverlays;\n                    return node.inverseOverlays;\n                }\n            }\n\n            // Otherwise we have to compute it\n            overlay = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY);\n            overlay = overlay || {};\n            inverseOverlays = {};\n            for (source in overlay) {\n                for (name in overlay[source]) {\n                    target = overlay[source][name];\n                    inverseOverlays[target] = inverseOverlays[target] || {};\n                    inverseOverlays[target][name] = inverseOverlays[target][name] || [];\n                    inverseOverlays[target][name].push(source);\n                }\n            }\n\n            // If it is an unmodified node, we can store the inverse, otherwise it still can change\n            if (hash) {\n                self._inverseCache.setItem(hash, inverseOverlays);\n            }\n\n            node.inverseOverlays = inverseOverlays;\n\n            return node.inverseOverlays;\n\n        };\n\n        this.isPointerName = function (name) {\n            ASSERT(typeof name === 'string');\n            //TODO this is needed as now we work with modified data as well\n            if (name === CONSTANTS.MUTABLE_PROPERTY) {\n                return false;\n            }\n            // return name.slice(-CONSTANTS.COLLECTION_NAME_SUFFIX.length) !==\n            //     CONSTANTS.COLLECTION_NAME_SUFFIX;\n\n            return true;\n        };\n\n        this.getAttributeNames = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            var data,\n                keys,\n                i,\n                result = [],\n                key;\n\n            data = (innerCore.getProperty(node, CONSTANTS.ATTRIBUTES_PROPERTY) || {});\n            keys = Object.keys(data);\n            i = keys.length;\n            while (--i >= 0) {\n                key = keys[i];\n                if (key.charAt(0) === '') {\n                    logger.error('empty named attribute found in node [' + innerCore.getPath(node) + ']');\n                    //keys.splice(i, 1);\n                } else if (key.charAt(0) === '_') {\n                    //keys.splice(i, 1);\n                } else {\n                    result.push(key);\n                }\n            }\n\n            return result;\n        };\n\n        this.getRegistryNames = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            var data,\n                keys,\n                i,\n                result = [],\n                key;\n\n            data = (innerCore.getProperty(node, CONSTANTS.REGISTRY_PROPERTY) || {});\n            keys = Object.keys(data);\n            i = keys.length;\n            while (--i >= 0) {\n                key = keys[i];\n                if (keys[i].charAt(0) === '') {\n                    logger.error('empty named attribute found in node [' + innerCore.getPath(node) + ']');\n                    //keys.splice(i, 1);\n                } else if (keys[i].charAt(0) === '_') {\n                    //keys.splice(i, 1);\n                } else {\n                    result.push(key);\n                }\n            }\n\n            return result;\n        };\n\n        this.getAttribute = function (node, name) {\n            /*node = coretree.getChild(node, coretree.constants.ATTRIBUTES_PROPERTY);\n             return coretree.getProperty(node, name);*/\n            return (innerCore.getProperty(node, CONSTANTS.ATTRIBUTES_PROPERTY) || {})[name];\n        };\n\n        this.delAttribute = function (node, name) {\n            node = innerCore.getChild(node, CONSTANTS.ATTRIBUTES_PROPERTY);\n            innerCore.deleteProperty(node, name);\n        };\n\n        this.setAttribute = function (node, name, value) {\n            node = innerCore.getChild(node, CONSTANTS.ATTRIBUTES_PROPERTY);\n            innerCore.setProperty(node, name, value);\n        };\n\n        this.getRegistry = function (node, name) {\n            /*node = coretree.getChild(node, coretree.constants.REGISTRY_PROPERTY);\n             return coretree.getProperty(node, name);*/\n            return (innerCore.getProperty(node, CONSTANTS.REGISTRY_PROPERTY) || {})[name];\n        };\n\n        this.delRegistry = function (node, name) {\n            node = innerCore.getChild(node, CONSTANTS.REGISTRY_PROPERTY);\n            innerCore.deleteProperty(node, name);\n        };\n\n        this.setRegistry = function (node, name, value) {\n            node = innerCore.getChild(node, CONSTANTS.REGISTRY_PROPERTY);\n            innerCore.setProperty(node, name, value);\n        };\n\n        this.overlayRemove = function (node, source, name, target) {\n            ASSERT(self.isValidNode(node));\n            ASSERT(innerCore.isValidPath(source) && innerCore.isValidPath(target) && self.isPointerName(name));\n            ASSERT(innerCore.getCommonPathPrefixData(source, target).common === '');\n\n            var overlays = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY),\n                inverseOverlays = node.inverseOverlays, // we only handle it if it is already computed\n                overlayNode,\n                index;\n\n            overlayNode = innerCore.getChild(overlays, source);\n            ASSERT(overlayNode && innerCore.getProperty(overlayNode, name) === target);\n            innerCore.deleteProperty(overlayNode, name);\n\n            if (innerCore.getKeys(overlayNode).length === 0) {\n                innerCore.deleteProperty(overlays, source);\n            }\n\n            //Now we check if some mutation happened\n            if (inverseOverlays && !node.inverseOverlays) {\n                inverseOverlays = JSON.parse(JSON.stringify(inverseOverlays));\n                node.inverseOverlays = inverseOverlays;\n            }\n            if (inverseOverlays && inverseOverlays[target] && inverseOverlays[target][name]) {\n                index = inverseOverlays[target][name].indexOf(source);\n                if (index !== -1) {\n                    inverseOverlays[target][name].splice(index, 1);\n                    if (inverseOverlays[target][name].length === 0) {\n                        delete inverseOverlays[target][name];\n                        if (Object.keys(inverseOverlays[target]).length === 0) {\n                            delete inverseOverlays[target];\n                        }\n                    }\n                }\n            }\n\n        }\n\n        this.overlayQuery = function (node, prefix) {\n            ASSERT(self.isValidNode(node) && innerCore.isValidPath(prefix));\n\n            var overlays = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {},\n                inverseOverlays = self.getInverseOverlayOfNode(node), // We necessarily have to compute at this point,\n                i, path, name, list = [],\n                prefix2 = prefix + CONSTANTS.PATH_SEP;\n\n            for (path in overlays) {\n                if (path === prefix || path.substr(0, prefix2.length) === prefix2) {\n                    for (name in overlays[path]) {\n                        if (self.isPointerName(name)) {\n                            list.push({\n                                s: path,\n                                n: name,\n                                t: overlays[path][name],\n                                p: true\n                            });\n                        }\n                    }\n                }\n            }\n\n            for (path in inverseOverlays) {\n                if (path === prefix || path.substr(0, prefix2.length) === prefix2) {\n                    for (name in inverseOverlays[path]) {\n                        for (i = 0; i < inverseOverlays[path][name].length; i += 1) {\n                            list.push({\n                                s: inverseOverlays[path][name][i],\n                                n: name,\n                                t: path,\n                                p: false\n                            });\n                        }\n                    }\n                }\n            }\n\n            return list;\n        }\n\n        this.overlayInsert = function (node, source, name, target) {\n            ASSERT(self.isValidNode(node));\n            ASSERT(innerCore.isValidPath(source) && innerCore.isValidPath(target) && self.isPointerName(name));\n            ASSERT(innerCore.getCommonPathPrefixData(source, target).common === '');\n\n            var overlays = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY),\n                inverseOverlays = node.inverseOverlays, // We update it only if it exists\n                overlay = self.getChild(overlays, source);\n\n            // Make sure it is an insert\n            ASSERT(self.getProperty(overlay, name) === undefined);\n            self.setProperty(overlay, name, target);\n\n            // First check if mutation took place.\n            if (inverseOverlays && !node.inverseOverlays) {\n                inverseOverlays = JSON.parse(JSON.stringify(inverseOverlays));\n                node.inverseOverlays = inverseOverlays;\n            }\n\n            if (inverseOverlays) {\n                inverseOverlays[target] = inverseOverlays[target] || {};\n                inverseOverlays[target][name] = inverseOverlays[target][name] || [];\n                inverseOverlays[target][name].push(source);\n            }\n        };\n\n        this.createNode = function (parameters, takenRelids) {\n            parameters = parameters || {};\n            var relid = parameters.relid,\n                parent = parameters.parent;\n\n            ASSERT(!parent || self.isValidNode(parent));\n            // ASSERT(!relid || typeof relid === 'string');\n\n            var node;\n            if (parent) {\n                if (relid) {\n                    if ((takenRelids && takenRelids[relid]) || self.getChildrenRelids(parent).indexOf(relid) > -1) {\n                        throw new Error('Given relid already used in parent \"' + relid + '\".');\n                    } else {\n                        node = innerCore.getChild(parent, relid);\n                        parent.childrenRelids = null;\n                    }\n                } else {\n                    node = self.createChild(parent, takenRelids);\n                }\n\n                innerCore.setHashed(node, true);\n            } else {\n                node = innerCore.createRoot();\n            }\n\n            // As we just created the node, we can allocate an empty inverse object, that is appropriate this time\n            node.inverseOverlays = {};\n            return node;\n        };\n\n        this.deleteNode = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            var parent = innerCore.getParent(node);\n\n            ASSERT(parent !== null);\n            self.deleteChild(parent, innerCore.getRelid(node));\n        };\n\n        /**\n         *\n         * @param {Node} node - Node containing the child.\n         * @param {string} relid - Relid of the child to be removed.\n         */\n        this.deleteChild = function (parent, relid) {\n            var prefix = '/' + relid;\n            innerCore.deleteProperty(parent, relid);\n            if (parent.childrenRelids) {\n                parent.childrenRelids = null;\n            }\n\n            while (parent) {\n\n                var list = self.overlayQuery(parent, prefix);\n                for (var i = 0; i < list.length; ++i) {\n                    var entry = list[i];\n                    self.overlayRemove(parent, entry.s, entry.n, entry.t);\n                }\n\n                prefix = CONSTANTS.PATH_SEP + innerCore.getRelid(parent) + prefix;\n                parent = innerCore.getParent(parent);\n            }\n        };\n\n        this.createChild = function (parent, takenRelids) {\n            var child = innerCore.createChild(parent, takenRelids);\n\n            parent.childrenRelids = null;\n\n            return child;\n        };\n\n        this.copyNode = function (node, parent, takenRelids) {\n            ASSERT(self.isValidNode(node));\n            ASSERT(!parent || self.isValidNode(parent));\n            var newNode,\n                ancestor,\n                ancestorNewPath,\n                nodeToChangeOverlay,\n                base,\n                baseOldPath,\n                aboveAncestor,\n                list,\n                tempAncestor,\n                i,\n                entry,\n                relativePath,\n                source,\n                target,\n                inverseOverlays;\n\n            node = innerCore.normalize(node);\n            inverseOverlays = node.inverseOverlays;\n\n            if (parent) {\n                ancestor = innerCore.getAncestor(node, parent);\n\n                // cannot copy inside of itself\n                if (ancestor === node) {\n                    return null;\n                }\n\n                newNode = self.createChild(parent, takenRelids);\n                innerCore.setHashed(newNode, true);\n                innerCore.setData(newNode, innerCore.copyData(node));\n\n                ancestorNewPath = innerCore.getPath(newNode, ancestor);\n\n                base = innerCore.getParent(node);\n                baseOldPath = '/' + innerCore.getRelid(node);\n                aboveAncestor = 1;\n\n                while (base) {\n                    list = self.overlayQuery(base, baseOldPath);\n                    tempAncestor = innerCore.getAncestor(base, ancestor);\n\n                    aboveAncestor = (base === ancestor ? 0 : tempAncestor === base ? 1 : -1);\n\n                    relativePath = aboveAncestor < 0 ?\n                        innerCore.getPath(base, ancestor) : innerCore.getPath(ancestor, base);\n\n                    for (i = 0; i < list.length; ++i) {\n                        entry = list[i];\n\n                        if (entry.p) {\n                            ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\n                            ASSERT(entry.s === baseOldPath || entry.s.charAt(baseOldPath.length) === '/');\n\n                            if (aboveAncestor < 0) {\n                                //below ancestor node - further from root\n                                source = ancestorNewPath + entry.s.substr(baseOldPath.length);\n                                target = innerCore.joinPaths(relativePath, entry.t);\n                                nodeToChangeOverlay = ancestor;\n                            } else if (aboveAncestor === 0) {\n                                //at ancestor node\n                                var data = innerCore.getCommonPathPrefixData(ancestorNewPath, entry.t);\n\n                                nodeToChangeOverlay = newNode;\n                                while (data.firstLength-- > 0) {\n                                    nodeToChangeOverlay = innerCore.getParent(nodeToChangeOverlay);\n                                }\n                                // overlays = innerCore.getChild(overlays, CONSTANTS.OVERLAYS_PROPERTY);\n\n                                source = innerCore.joinPaths(data.first, entry.s.substr(baseOldPath.length));\n                                target = data.second;\n                            } else {\n                                //above ancestor node - closer to root\n                                ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\n\n                                source = relativePath + ancestorNewPath + entry.s.substr(baseOldPath.length);\n                                target = entry.t;\n                                nodeToChangeOverlay = base;\n                            }\n\n                            self.overlayInsert(nodeToChangeOverlay, source, entry.n, target);\n                        }\n                    }\n\n                    baseOldPath = '/' + innerCore.getRelid(base) + baseOldPath;\n                    base = innerCore.getParent(base);\n                }\n            } else {\n                newNode = innerCore.createRoot();\n                innerCore.setData(newNode, innerCore.copyData(node));\n            }\n\n            if (inverseOverlays) {\n                newNode.inverseOverlays = JSON.parse(JSON.stringify(inverseOverlays));\n            }\n            return newNode;\n        };\n\n        this.copyNodes = function (nodes, parent, takenRelids) {\n            //copying multiple nodes at once for keeping their internal relations\n            var paths = [],\n                i, j, index, names, pointer, newNode,\n                copiedNodes = [],\n                // Every single element will be an object with the\n                // internally pointing relations and the index of the target.\n                internalRelationPaths = [];\n\n            for (i = 0; i < nodes.length; i++) {\n                paths.push(innerCore.getPath(nodes[i]));\n            }\n\n            for (i = 0; i < nodes.length; i++) {\n                names = self.getPointerNames(nodes[i]);\n                pointer = {};\n                for (j = 0; j < names.length; j++) {\n                    index = paths.indexOf(self.getPointerPath(nodes[i], names[j]));\n                    if (index !== -1) {\n                        pointer[names[j]] = index;\n                    }\n                }\n                internalRelationPaths.push(pointer);\n            }\n\n            //now we use our simple copy\n            for (i = 0; i < nodes.length; i++) {\n                newNode = self.copyNode(nodes[i], parent, takenRelids);\n                copiedNodes.push(newNode);\n                if (takenRelids) {\n                    takenRelids[self.getRelid(newNode)] = true;\n                }\n            }\n\n            //and now back to the relations\n            for (i = 0; i < internalRelationPaths.length; i++) {\n                names = Object.keys(internalRelationPaths[i]);\n                for (j = 0; j < names.length; j++) {\n                    self.setPointer(copiedNodes[i], names[j], copiedNodes[internalRelationPaths[i][names[j]]]);\n                }\n            }\n\n            return copiedNodes;\n        };\n\n        this.moveNode = function (node, parent, takenRelids) {\n            ASSERT(self.isValidNode(node) && self.isValidNode(parent));\n\n            var ancestor,\n                base,\n                baseOldPath,\n                aboveAncestor,\n                ancestorNewPath,\n                list,\n                tempAncestor,\n                relativePath,\n                i,\n                source,\n                target,\n                nodeToModifyOverlays,\n                entry,\n                tmp;\n\n            node = innerCore.normalize(node);\n            ancestor = innerCore.getAncestor(node, parent);\n\n            // cannot move inside of itself\n            if (ancestor === node) {\n                return null;\n            }\n\n            base = innerCore.getParent(node);\n            baseOldPath = '/' + innerCore.getRelid(node);\n            aboveAncestor = 1;\n\n            var oldNode = node;\n            if (takenRelids) {\n                if (takenRelids[innerCore.getRelid(oldNode)]) {\n                    node = innerCore.createChild(parent, takenRelids);\n                } else {\n                    node = innerCore.getChild(parent, innerCore.getRelid(oldNode));\n                }\n            } else {\n                node = innerCore.getChild(parent, innerCore.getRelid(oldNode));\n                if (!innerCore.isEmpty(node)) {\n                    // we have to change the relid of the node, to fit into its new\n                    // place...\n                    node = innerCore.createChild(parent);\n                }\n            }\n\n            parent.childrenRelids = null;\n\n            innerCore.setHashed(node, true);\n            innerCore.setData(node, innerCore.copyData(oldNode));\n\n            ancestorNewPath = innerCore.getPath(node, ancestor);\n\n            while (base) {\n                list = self.overlayQuery(base, baseOldPath);\n                tempAncestor = innerCore.getAncestor(base, ancestor);\n\n                aboveAncestor = (base === ancestor ? 0 : tempAncestor === base ? 1 : -1);\n\n                relativePath = aboveAncestor < 0 ?\n                    innerCore.getPath(base, ancestor) : innerCore.getPath(ancestor, base);\n\n                for (i = 0; i < list.length; ++i) {\n                    entry = list[i];\n\n                    self.overlayRemove(base, entry.s, entry.n, entry.t);\n\n                    if (!entry.p) {\n                        tmp = entry.s;\n                        entry.s = entry.t;\n                        entry.t = tmp;\n                    }\n\n                    ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\n                    ASSERT(entry.s === baseOldPath || entry.s.charAt(baseOldPath.length) === '/');\n\n                    if (aboveAncestor < 0) {\n                        //below ancestor node\n                        source = ancestorNewPath + entry.s.substr(baseOldPath.length);\n                        target = innerCore.joinPaths(relativePath, entry.t);\n                        nodeToModifyOverlays = ancestor;\n                    } else if (aboveAncestor === 0) {\n                        //at ancestor node\n                        var data = innerCore.getCommonPathPrefixData(ancestorNewPath, entry.t);\n\n                        nodeToModifyOverlays = node;\n                        while (data.firstLength-- > 0) {\n                            nodeToModifyOverlays = innerCore.getParent(nodeToModifyOverlays);\n                        }\n                        // overlays = innerCore.getChild(overlays, CONSTANTS.OVERLAYS_PROPERTY);\n\n                        source = innerCore.joinPaths(data.first, entry.s.substr(baseOldPath.length));\n                        target = data.second;\n                    } else {\n                        //above ancestor node\n                        ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\n\n                        source = relativePath + ancestorNewPath + entry.s.substr(baseOldPath.length);\n                        target = entry.t;\n                        nodeToModifyOverlays = base;\n                    }\n\n                    if (!entry.p) {\n                        tmp = entry.s;\n                        entry.s = entry.t;\n                        entry.t = tmp;\n\n                        tmp = source;\n                        source = target;\n                        target = tmp;\n                    }\n\n                    //console.log(source, target);\n                    self.overlayInsert(nodeToModifyOverlays, source, entry.n, target);\n                }\n\n                baseOldPath = '/' + innerCore.getRelid(base) + baseOldPath;\n                base = innerCore.getParent(base);\n            }\n\n            self.deleteNode(oldNode);\n\n            return node;\n        };\n\n        this.getChildrenRelids = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            // Check if they are already cached by the node\n            if (!node.childrenRelids) {\n                node.childrenRelids = innerCore.getKeys(node, self.isValidRelid);\n            }\n\n            return node.childrenRelids;\n        };\n\n        this.getChildrenPaths = function (node) {\n            var path = innerCore.getPath(node),\n                relids = self.getChildrenRelids(node),\n                result = [],\n                i;\n\n            for (i = 0; i < relids.length; i += 1) {\n                result.push(path + '/' + relids[i]);\n            }\n\n            return result;\n        };\n\n        this.loadChildren = function (node) {\n            var children = self.getChildrenRelids(node),\n                result = [],\n                i;\n\n            for (i = 0; i < children.length; i += 1) {\n                result.push(innerCore.loadChild(node, children[i]));\n            }\n\n            return TASYNC.lift(result);\n        };\n\n        this.getPointerNames = function (node) {\n            return self.getPointerNamesFrom(node, '');\n        };\n\n        this.getPointerNamesFrom = function (node, source) {\n            ASSERT(self.isValidNode(node));\n\n            var names = [];\n\n            do {\n                var child = (innerCore.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {})[source];\n                if (child) {\n                    for (var name in child) {\n                        ASSERT(names.indexOf(name) === -1);\n                        if (self.isPointerName(name)) {\n                            names.push(name);\n                        }\n                    }\n                }\n\n                source = '/' + innerCore.getRelid(node) + source;\n                node = innerCore.getParent(node);\n            } while (node);\n\n            return names;\n        };\n\n        this.getPointerPath = function (node, name) {\n            return self.getPointerPathFrom(node, '', name);\n        };\n\n        this.getPointerPathFrom = function (node, source, name) {\n            var res = getRelativePointerPathFrom(node, source, name),\n                target;\n\n            if (res.target !== undefined) {\n                target = innerCore.joinPaths(innerCore.getPath(res.node), res.target);\n            }\n\n            return target;\n        };\n\n        this.loadPointer = function (node, name) {\n            var res = getRelativePointerPathFrom(node, '', name);\n\n            if (res.target !== undefined) {\n                return innerCore.loadByPath(res.node, res.target);\n            } else {\n                return null;\n            }\n        };\n\n        this.getCollectionNames = function (node) {\n            ASSERT(self.isValidNode(node));\n            var names = [],\n                target = '',\n                name,\n                inverseOverlays;\n\n            do {\n                inverseOverlays = self.getInverseOverlayOfNode(node);\n                if (inverseOverlays[target]) {\n                    for (name in inverseOverlays[target]) {\n                        if (names.indexOf(name) === -1) {\n                            names.push(name);\n                        }\n                    }\n                }\n\n                target = CONSTANTS.PATH_SEP + self.getRelid(node) + target;\n                node = self.getParent(node);\n            } while (node);\n\n            return names;\n        };\n\n        this.loadCollection = function (node, name) {\n            ASSERT(self.isValidNode(node) && self.isPointerName(name));\n\n            var collection = [],\n                target = '',\n                i,\n                inverseOverlays;\n\n            do {\n                inverseOverlays = self.getInverseOverlayOfNode(node);\n\n                if (inverseOverlays[target] && inverseOverlays[target][name]) {\n                    for (i = 0; i < inverseOverlays[target][name].length; i += 1) {\n                        collection.push(self.loadByPath(node, inverseOverlays[target][name][i]));\n                    }\n                }\n\n                target = CONSTANTS.PATH_SEP + self.getRelid(node) + target;\n                node = self.getParent(node);\n            } while (node);\n\n            return TASYNC.lift(collection);\n        };\n\n        this.getCollectionPaths = function (node, name) {\n            ASSERT(self.isValidNode(node) && self.isPointerName(name));\n\n            var result = [],\n                target = '',\n                inverseOverlays,\n                i,\n                prefix = '';\n\n            do {\n                inverseOverlays = self.getInverseOverlayOfNode(node);\n                if (inverseOverlays[target] && inverseOverlays[target][name]) {\n                    prefix = self.getPath(node);\n                    for (i = 0; i < inverseOverlays[target][name].length; i += 1) {\n                        result.push(prefix + inverseOverlays[target][name][i]);\n                    }\n                }\n\n                target = CONSTANTS.PATH_SEP + self.getRelid(node) + target;\n                node = self.getParent(node);\n            } while (node);\n\n            return result;\n        };\n\n        this.deletePointer = function (node, name) {\n            ASSERT(self.isValidNode(node) && typeof name === 'string');\n\n            var source = '',\n                overlays;\n\n            do {\n                overlays = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY);\n                if (overlays && overlays[source] && overlays[source][name]) {\n                    self.overlayRemove(node, source, name, overlays[source][name]);\n                }\n\n                source = CONSTANTS.PATH_SEP + self.getRelid(node) + source;\n                node = self.getParent(node);\n            } while (node);\n\n            return false;\n        };\n\n        this.setPointer = function (node, name, target) {\n            ASSERT(self.isValidNode(node) && typeof name === 'string' && (!target || self.isValidNode(target)));\n\n            var ancestor,\n                targetPath,\n                sourcePath;\n\n            self.deletePointer(node, name);\n\n            if (target) {\n                ancestor = innerCore.getAncestor(node, target);\n\n                sourcePath = innerCore.getPath(node, ancestor);\n                targetPath = innerCore.getPath(target, ancestor);\n\n                self.overlayInsert(ancestor, sourcePath, name, targetPath);\n            }\n        };\n\n        this.getChildrenHashes = function (node) {\n            var keys = self.getChildrenRelids(node),\n                i, hashes = {};\n\n            for (i = 0; i < keys.length; i++) {\n                hashes[keys[i]] = innerCore.getChildHash(node, keys[i]);\n            }\n\n            return hashes;\n        };\n\n        this.isValidRelid = RANDOM.isValidRelid;\n\n        this.isContainerPath = function (path, parentPath) {\n            var pathArray = (path || '').split('/'),\n                parentArray = (parentPath || '').split('/'),\n                i;\n\n            for (i = 0; i < parentArray.length; i += 1) {\n                if (parentArray[i] !== pathArray[i]) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n        //</editor-fold>\n    }\n\n    return CoreRel;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/setcore',['common/util/assert', 'common/core/constants'], function (ASSERT, CONSTANTS) {\n    'use strict';\n\n    function SetCore(innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized SetCore');\n\n        //<editor-fold=Helper Functions>\n        function setModified(node) {\n            innerCore.setRegistry(node, CONSTANTS.SET_MODIFIED_REGISTRY,\n                (innerCore.getRegistry(node, CONSTANTS.SET_MODIFIED_REGISTRY) || 0) + 1);\n        }\n\n        function getMemberRelId(node, setName, memberPath) {\n            var setInfo,\n                keys, i;\n\n            do {\n                setInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY);\n                if (setInfo && setInfo[setName]) {\n                    keys = self.getRawKeys(setInfo[setName], self.isValidRelid);\n                    for (i = 0; i < keys.length; i += 1) {\n                        if (innerCore.getPointerPathFrom(node, '/' + CONSTANTS.ALL_SETS_PROPERTY +\n                                    '/' + setName + '/' + keys[i], CONSTANTS.MEMBER_RELATION) ===\n                            memberPath) {\n\n                            return keys[i];\n                        }\n                    }\n                }\n                node = self.getBase(node);\n            } while (node);\n\n            return null;\n        }\n\n        function collectSetNames(node) {\n            var sets = [],\n                setsInfo,\n                keys, i;\n            do {\n                setsInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY);\n                if (setsInfo &&\n                    setsInfo[CONSTANTS.OVERLAYS_PROPERTY] &&\n                    setsInfo[CONSTANTS.OVERLAYS_PROPERTY]['']) {\n                    keys = Object.keys(setsInfo[CONSTANTS.OVERLAYS_PROPERTY]['']);\n                    for (i = 0; i < keys.length; i += 1) {\n                        if (keys[i] !== CONSTANTS.MUTABLE_PROPERTY && sets.indexOf(keys[i]) === -1) {\n                            sets.push(keys[i]);\n                        }\n                    }\n                }\n                node = self.getBase(node);\n            } while (node);\n\n            return sets;\n        }\n\n        function collectInternalMemberRelids(node, setName) {\n            var setInfo,\n                relids = [],\n                keys, i;\n\n            do {\n                setInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY);\n                if (setInfo && setInfo[setName]) {\n                    keys = self.getRawKeys(setInfo[setName], self.isValidRelid);\n                    for (i = 0; i < keys.length; i += 1) {\n                        if (relids.indexOf(keys[i]) === -1) {\n                            relids.push(keys[i]);\n                        }\n                    }\n                }\n                node = self.getBase(node);\n            } while (node);\n\n            return relids;\n        }\n\n        function getContainerNodePath(node) {\n            var ownPath = self.getPath(node);\n            return ownPath.substring(0, ownPath.indexOf('/_'));\n        }\n\n        function collectMemberPath(node, setName, innerRelid) {\n            var source = '/' + CONSTANTS.ALL_SETS_PROPERTY + '/' + setName + '/' + innerRelid,\n                path = undefined,//jshint ignore: line\n                tempPath;\n\n            do {\n                tempPath = innerCore.getPointerPathFrom(node, source, CONSTANTS.MEMBER_RELATION);\n                if (tempPath !== undefined) {\n                    path = tempPath;\n                    if (path !== getContainerNodePath(node)) {\n                        break;\n                    }\n                }\n                node = self.getBase(node);\n            } while (node);\n\n            return path;\n        }\n\n        function collectPropertyNames(node, setName, memberPath, propertyName) {\n            var relId,\n                names = [],\n                memberInfo,\n                keys, i;\n\n            do {\n                relId = getMemberRelId(node, setName, memberPath);\n                if (relId) {\n                    memberInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY) || {};\n                    memberInfo = memberInfo[setName] || {};\n                    memberInfo = memberInfo[relId] || {};\n                    memberInfo = memberInfo[propertyName] || {};\n                    keys = innerCore.getRawKeys(memberInfo, self.isValidRelid);\n                    for (i = 0; i < keys.length; i += 1) {\n                        if (names.indexOf(keys[i]) === -1) {\n                            names.push(keys[i]);\n                        }\n                    }\n                } else {\n                    return names; //because there is no more relation towards the given path\n                }\n                node = self.getBase(node);\n            } while (node);\n\n            return names;\n        }\n\n        function collectOwnPropertyNames(node, setName, memberPath, propertyName) {\n            var relId,\n                names = [],\n                memberInfo,\n                keys, i;\n\n            relId = getMemberRelId(node, setName, memberPath);\n            if (relId) {\n                memberInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY) || {};\n                memberInfo = memberInfo[setName] || {};\n                memberInfo = memberInfo[relId] || {};\n                memberInfo = memberInfo[propertyName] || {};\n                keys = innerCore.getRawKeys(memberInfo, self.isValidRelid);\n                for (i = 0; i < keys.length; i += 1) {\n                    if (names.indexOf(keys[i]) === -1) {\n                        names.push(keys[i]);\n                    }\n                }\n            }\n\n            return names;\n        }\n\n        function getPropertyValue(node, setName, memberPath, propertyCollectionName, propertyName) {\n            var relId,\n                memberInfo,\n                value;\n\n            do {\n                relId = getMemberRelId(node, setName, memberPath);\n                if (relId) {\n                    memberInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY) || {};\n                    memberInfo = memberInfo[setName] || {};\n                    memberInfo = memberInfo[relId] || {};\n                    memberInfo = memberInfo[propertyCollectionName] || {};\n                    value = memberInfo[propertyName];\n                    if (value !== undefined) {\n                        return value;\n                    }\n                } else {\n                    return undefined; //because there is no more relation towards the given path\n                }\n                node = self.getBase(node);\n            } while (node);\n\n            return undefined;\n        }\n\n        //function getOwnPropertyValue(node, setName, memberPath, propertyCollectionName, propertyName) {\n        //    var relId,\n        //        memberInfo;\n        //\n        //    relId = getMemberRelId(node, setName, memberPath);\n        //    if (relId) {\n        //        memberInfo = core.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY) || {};\n        //        memberInfo = memberInfo[setName] || {};\n        //        memberInfo = memberInfo[relId] || {};\n        //        memberInfo = memberInfo[propertyCollectionName] || {};\n        //        return memberInfo[propertyName];\n        //    }\n        //\n        //    return undefined;\n        //}\n\n        function createSetOnDemand(node, setName) {\n            //the function checks if there is no set defined on the node's level and create it\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY);\n            if (innerCore.getOwnPointerPath(setsNode, setName) === undefined) {\n                self.createSet(node, setName);\n            }\n        }\n        //</editor-fold>\n\n        //<editor-fold=Modified Methods>\n        this.getCollectionNames = function (node) {\n            var result = innerCore.getCollectionNames(node),\n                i;\n\n            for (i = 0; i < result.length; i++) {\n                // The member collection is coming from being a member of a set and is not a defined relationship.\n                if (result[i] === CONSTANTS.MEMBER_RELATION) {\n                    result.splice(i, 1);\n                    break;\n                }\n            }\n\n            return result;\n        };\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.getSetNames = function (node) {\n            //return innerCore.getPointerNames(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY)) || [];\n            return collectSetNames(node);\n        };\n\n        this.getMemberPaths = function (node, setName) {\n            var memberRelids = collectInternalMemberRelids(node, setName),\n                //pathPrefix = '/' + CONSTANTS.ALL_SETS_PROPERTY + '/' + setName + '/',\n                i, path,\n                memberPaths = [];\n            for (i = 0; i < memberRelids.length; i += 1) {\n                path = collectMemberPath(node, setName, memberRelids[i]);\n                if (path !== undefined && memberPaths.indexOf(path) === -1) { //null and '' are valid targets\n                    memberPaths.push(path);\n                }\n            }\n            return memberPaths;\n        };\n\n        this.getOwnMemberPaths = function (node, setName) {\n            var setInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY),\n                relids = setInfo && setInfo[setName] ? self.getRawKeys(setInfo[setName], self.isValidRelid) : [],\n                allPaths = self.getMemberPaths(node, setName),\n                paths = [],\n                i;\n\n            for (i = 0; i < allPaths.length; i += 1) {\n                if (relids.indexOf(getMemberRelId(node, setName, allPaths[i])) !== -1) {\n                    paths.push(allPaths[i]);\n                }\n            }\n\n            return paths;\n        };\n\n        this.delMember = function (node, setName, memberPath) {\n            ASSERT(typeof setName === 'string');\n            //we only need the path of the member so we allow to enter only it\n            if (typeof memberPath !== 'string') {\n                memberPath = innerCore.getPath(memberPath);\n            }\n\n            var setMemberRelId = getMemberRelId(node, setName, memberPath);\n            if (setMemberRelId) {\n                var setMemberNode = innerCore.getChild(\n                    innerCore.getChild(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName),\n                    setMemberRelId);\n\n                innerCore.deleteNode(setMemberNode, true);\n                setModified(node);\n            }\n        };\n\n        this.addMember = function (node, setName, member) {\n            ASSERT(typeof setName === 'string');\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY),\n                setNode = innerCore.getChild(setsNode, setName),\n                setMemberRelId = getMemberRelId(node, setName, self.getPath(member)),\n                setMemberNode;\n\n            if (setMemberRelId === null) {\n                createSetOnDemand(node, setName);\n                setMemberNode = innerCore.createChild(setNode);\n            } else if (!self.isFullyOverriddenMember(node, setName, self.getPath(member))) {\n                //it was an inherited member, now we override it\n                // TODO: We pin down the expected behavior here..\n                setMemberNode = innerCore.copyNode(innerCore.getChild(setNode, setMemberRelId), setNode);\n                innerCore.deleteNode(innerCore.getChild(setNode, setMemberRelId), true);\n            }\n\n            if (setMemberNode) {\n                innerCore.setPointer(setMemberNode, CONSTANTS.MEMBER_RELATION, member);\n\n                //TODO hack, somehow the empty children have been removed during persist\n                innerCore.setRegistry(setMemberNode, '_', '_');\n                setModified(node);\n            } else {\n                logger.warn('member already in set');\n            }\n        };\n\n        this.getMemberAttributeNames = function (node, setName, memberPath) {\n            return collectPropertyNames(node, setName, memberPath, CONSTANTS.ATTRIBUTES_PROPERTY);\n        };\n\n        this.getMemberOwnAttributeNames = function (node, setName, memberPath) {\n            return collectOwnPropertyNames(node, setName, memberPath, CONSTANTS.ATTRIBUTES_PROPERTY);\n        };\n\n        this.getMemberAttribute = function (node, setName, memberPath, attrName) {\n            return getPropertyValue(node, setName, memberPath, CONSTANTS.ATTRIBUTES_PROPERTY, attrName);\n        };\n\n        this.setMemberAttribute = function (node, setName, memberPath, attrName, attrValue) {\n            ASSERT(typeof setName === 'string' && typeof attrName === 'string' && attrValue !== undefined);\n            var memberRelId = getMemberRelId(node, setName, memberPath);\n            if (memberRelId) {\n                var memberNode = innerCore.getChild(\n                    innerCore.getChild(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName),\n                    memberRelId);\n\n                innerCore.setAttribute(memberNode, attrName, attrValue);\n                setModified(node);\n            }\n        };\n\n        this.delMemberAttribute = function (node, setName, memberPath, attrName) {\n            ASSERT(typeof setName === 'string' && typeof attrName === 'string');\n            var memberRelId = getMemberRelId(node, setName, memberPath);\n            if (memberRelId) {\n                var memberNode = innerCore.getChild(\n                    innerCore.getChild(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName),\n                    memberRelId);\n\n                innerCore.delAttribute(memberNode, attrName);\n                setModified(node);\n            }\n        };\n\n        this.getMemberRegistryNames = function (node, setName, memberPath) {\n            return collectPropertyNames(node, setName, memberPath, CONSTANTS.REGISTRY_PROPERTY);\n        };\n\n        this.getMemberOwnRegistryNames = function (node, setName, memberPath) {\n            return collectOwnPropertyNames(node, setName, memberPath, CONSTANTS.REGISTRY_PROPERTY);\n        };\n\n        this.getMemberRegistry = function (node, setName, memberPath, regName) {\n            return getPropertyValue(node, setName, memberPath, CONSTANTS.REGISTRY_PROPERTY, regName);\n        };\n\n        this.setMemberRegistry = function (node, setName, memberPath, regName, regValue) {\n            ASSERT(typeof setName === 'string' && typeof regName === 'string' && regValue !== undefined);\n            var memberRelId = getMemberRelId(node, setName, memberPath);\n            if (memberRelId) {\n                var memberNode = innerCore.getChild(\n                    innerCore.getChild(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName),\n                    memberRelId);\n\n                innerCore.setRegistry(memberNode, regName, regValue);\n                setModified(node);\n            }\n        };\n\n        this.delMemberRegistry = function (node, setName, memberPath, regName) {\n            ASSERT(typeof setName === 'string' && typeof regName === 'string');\n            var memberRelId = getMemberRelId(node, setName, memberPath);\n            if (memberRelId) {\n                var memberNode = innerCore.getChild(\n                    innerCore.getChild(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName),\n                    memberRelId);\n\n                innerCore.delRegistry(memberNode, regName);\n                setModified(node);\n            }\n        };\n\n        this.createSet = function (node, setName) {\n            ASSERT(typeof setName === 'string');\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY),\n                setNode = innerCore.getChild(setsNode, setName);\n\n            //FIXME: hack, somehow the empty children have been removed during persist\n            innerCore.setRegistry(setNode, '_', '_');\n\n            innerCore.setPointer(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName, null);\n            setModified(node);\n        };\n\n        this.deleteSet = function (node, setName) {\n            ASSERT(typeof setName === 'string');\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY),\n                setNode = innerCore.getChild(setsNode, setName);\n            innerCore.deletePointer(setsNode, setName);\n            innerCore.deleteNode(setNode, true);\n            setModified(node);\n        };\n\n        this.isMemberOf = function (node) {\n            //TODO we should find a proper way to do this - or at least some support from lower layers would be fine\n            var coll = self.getCollectionPaths(node, CONSTANTS.MEMBER_RELATION);\n            var sets = {};\n            for (var i = 0; i < coll.length; i++) {\n                var pathArray = coll[i].split('/');\n                if (pathArray.indexOf(CONSTANTS.META_NODE) === -1) {\n                    //now we simply skip META sets...\n                    var index = pathArray.indexOf(CONSTANTS.ALL_SETS_PROPERTY);\n                    if (index > 0 && pathArray.length > index + 1) {\n                        //otherwise it is not a real set\n                        var ownerPath = pathArray.slice(0, index).join('/');\n                        if (sets[ownerPath] === undefined) {\n                            sets[ownerPath] = [];\n                        }\n                        sets[ownerPath].push(pathArray[index + 1]);\n                    }\n                }\n            }\n            return sets;\n        };\n\n        this.isFullyOverriddenMember = function (node, setName, memberPath) {\n            var setNames = collectSetNames(node),\n                ownRelId,\n                baseRelId;\n            if (setNames.indexOf(setName) === -1) {\n                return false;\n            }\n            if (innerCore.getBase(node) === null) {\n                return false;\n            }\n\n            ownRelId = getMemberRelId(node, setName, memberPath);\n            baseRelId = getMemberRelId(innerCore.getBase(node), setName, memberPath);\n\n            if (ownRelId && baseRelId && ownRelId !== baseRelId) {\n                return true;\n            }\n            return false;\n        };\n        //</editor-fold>\n    }\n\n    return SetCore;\n});\n\n\n\n",
    "/*globals define*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/guidcore',[\n    'common/util/assert',\n    'common/core/tasync',\n    'common/regexp',\n    'common/util/random',\n    'common/core/constants',\n], function (ASSERT, TASYNC, REGEXP, RANDOM, CONSTANTS) {\n\n    'use strict';\n\n    var relidToInteger = RANDOM.relidToInteger,\n        GUID = RANDOM.generateGuid;\n\n    function GuidCore(innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized GuidCore');\n\n        //<editor-fold=Helper Functions>\n        function toInternalGuid(myGuid) {\n            return myGuid.replace(/-/g, '');\n        }\n\n        function toExternalGuid(myGuid) {\n            return myGuid.substr(0, 8) + '-' + myGuid.substr(8, 4) + '-' +\n                myGuid.substr(12, 4) + '-' + myGuid.substr(16, 4) + '-' + myGuid.substr(20);\n        }\n\n        function guidToArray(guid) {\n            if (guid === null || guid === undefined) {\n                return [0, 0, 0, 0, 0, 0, 0, 0];\n            }\n            var array = new Array(8);\n            for (var i = 0; i < guid.length / 4; i += 1) {\n                array[i] = parseInt(guid.substr(4 * i, 4), 16);\n            }\n            return array;\n        }\n\n        function getRelidGuid(node) {\n            //TODO we always should know what structure we should expect as a relid -\n            // now we think it is a number so it can be converted to 0xsomething\n            var relid = self.getRelid(node);\n            //relid = Number(relid);\n            relid = relidToInteger(relid);\n            if (relid === 'NaN') {\n                return null;\n            }\n\n            relid = relid.toString(16);\n\n            //now we should fill up with 0's in the beggining\n            while (relid.length < 32) {\n                relid = relid + '0';\n            }\n            return relid;\n        }\n\n        function xorGuids(a, b) {\n            var arrayA = guidToArray(a);\n            var arrayB = guidToArray(b);\n\n            ASSERT(arrayA.length === arrayB.length);\n\n            var arrayOut = [];\n            for (var i = 0; i < arrayA.length; i++) {\n                /*jshint bitwise: false*/\n                arrayOut.push(arrayA[i] ^ arrayB[i]);\n            }\n            for (i = 0; i < arrayOut.length; i++) {\n                arrayOut[i] = Number(arrayOut[i]).toString(16);\n                var difi = 4 - arrayOut[i].length;\n                while (difi > 0) {\n                    arrayOut[i] = '0' + arrayOut[i];\n                    difi--;\n                }\n            }\n            return arrayOut.join('');\n        }\n\n        function setDataGuid(node, guid) {\n            self.setAttribute(node, CONSTANTS.OWN_GUID,\n                xorGuids(\n                    toInternalGuid(guid),\n                    xorGuids(\n                        getRelidGuid(node),\n                        toInternalGuid(\n                            self.getGuid(\n                                self.getParent(node)\n                            )\n                        )\n                    )\n                )\n            );\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Modified Methods>\n        this.createNode = function (parameters) {\n            parameters = parameters || {};\n\n            var guid = parameters.guid || GUID(),\n                node;\n\n            ASSERT(REGEXP.GUID.test(guid));\n\n            node = innerCore.createNode(parameters);\n\n            setDataGuid(node, guid);\n\n            return node;\n        };\n\n        this.moveNode = function (node, parent) {\n            var oldGuid = self.getGuid(node);\n\n            node = innerCore.moveNode(node, parent);\n\n            setDataGuid(node, oldGuid);\n\n            return node;\n        };\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.getGuid = function (node) {\n            if (node) {\n                return self.getDeducedGuid(node, self.getGuid(self.getParent(node)));\n            } else {\n                return CONSTANTS.NULL_GUID;\n            }\n        };\n\n        this.setGuid = function (node, guid) {\n            ASSERT(REGEXP.GUID.test(guid));\n            return TASYNC.call(function (children) {\n                var i,\n                    childrenGuids = [];\n\n                //save children guids\n                for (i = 0; i < children.length; i += 1) {\n                    childrenGuids.push(self.getGuid(children[i]));\n                }\n\n                //setting own dataGuid\n                setDataGuid(node, guid);\n\n                //changing children data guids\n                for (i = 0; i < children.length; i += 1) {\n                    setDataGuid(children[i], childrenGuids[i]);\n                }\n            }, self.loadChildren(node));\n        };\n\n        this.getDataGuid = function (node) {\n            return toExternalGuid(self.getAttribute(node, CONSTANTS.OWN_GUID));\n        };\n\n        this.getDeducedGuid = function (node, baseGuid) {\n            if (node && REGEXP.GUID.test(baseGuid)) {\n                return toExternalGuid(\n                    xorGuids(\n                        getRelidGuid(node),\n                        xorGuids(\n                            self.getAttribute(node, CONSTANTS.OWN_GUID),\n                            toInternalGuid(baseGuid)\n                        )\n                    )\n                );\n            } else {\n                return CONSTANTS.NULL_GUID;\n            }\n        };\n        //</editor-fold>\n    }\n\n    return GuidCore;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/nullpointercore',['common/util/assert', 'common/core/constants'], function (ASSERT, CONSTANTS) {\n    'use strict';\n\n    function NullPointerCore(innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized NullPointerCore');\n\n        //<editor-fold=Modified Methods>\n        this.setPointer = function (node, name, target) {\n            if (target === null) {\n                var nullChild = innerCore.getChild(node, CONSTANTS.NULLPTR_RELID);\n                innerCore.setAttribute(nullChild, 'name', CONSTANTS.NULLPTR_NAME);\n                innerCore.setPointer(node, name, nullChild);\n            } else {\n                innerCore.setPointer(node, name, target);\n            }\n        };\n\n        this.getPointerPath = function (node, name) {\n            var path = innerCore.getPointerPath(node, name);\n            if (path && path.indexOf(CONSTANTS.NULLPTR_RELID) !== -1) {\n                return null;\n            } else {\n                return path;\n            }\n        };\n\n        this.loadPointer = function (node, name) {\n            var path = self.getPointerPath(node, name);\n            if (path === null) {\n                return null;\n            } else {\n                return innerCore.loadPointer(node, name);\n            }\n        };\n        //</editor-fold>\n\n        return self;\n    }\n\n    return NullPointerCore;\n});\n\n\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author mmaroti / https://github.com/mmaroti\n */\n\ndefine('common/core/coreunwrap',['common/util/assert', 'common/core/tasync'], function (ASSERT, TASYNC) {\n    'use strict';\n\n    // ----------------- CoreUnwrap -----------------\n\n    var CoreUnwrap = function (innercore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n        var logger = options.logger.fork('coreunwrap');\n\n        function checkNode(node) {\n            if (node === null || innercore.isValidNode(node)) {\n                return node;\n            } else {\n                throw new Error('Invalid result node');\n            }\n        }\n\n        function checkNodes(nodes) {\n            ASSERT(nodes instanceof Array);\n\n            var i;\n            for (i = 0; i < nodes.length; ++i) {\n                if (!innercore.isValidNode(nodes[i])) {\n                    throw new Error('Invalid result node array');\n                }\n            }\n\n            return nodes;\n        }\n\n        // copy all operations\n        var core = {};\n        for (var key in innercore) {\n            core[key] = innercore[key];\n        }\n        logger.debug('initialized');\n        core.loadRoot = TASYNC.unwrap(innercore.loadRoot);\n        //core.persist = TASYNC.unwrap(oldcore.persist);\n\n        // core.loadChild = TASYNC.unwrap(oldcore.loadChild);\n        core.loadChild = TASYNC.unwrap(function (node, relid) {\n            return TASYNC.call(checkNode, innercore.loadChild(node, relid));\n        });\n\n        // core.loadByPath = TASYNC.unwrap(oldcore.loadByPath);\n        core.loadByPath = TASYNC.unwrap(function (node, path) {\n            return TASYNC.call(checkNode, innercore.loadByPath(node, path));\n        });\n\n        // core.loadChildren = TASYNC.unwrap(oldcore.loadChildren);\n        core.loadChildren = TASYNC.unwrap(function (node) {\n            return TASYNC.call(checkNodes, innercore.loadChildren(node));\n        });\n\n        // core.loadOwnChildren = TASYNC.unwrap(oldcore.loadOwnChildren);\n        core.loadOwnChildren = TASYNC.unwrap(function (node) {\n            return TASYNC.call(checkNodes, innercore.loadOwnChildren(node));\n        });\n\n        core.loadPointer = TASYNC.unwrap(innercore.loadPointer);\n        core.loadCollection = TASYNC.unwrap(innercore.loadCollection);\n\n        core.loadSubTree = TASYNC.unwrap(innercore.loadSubTree);\n        core.loadOwnSubTree = TASYNC.unwrap(innercore.loadOwnSubTree);\n        core.loadTree = TASYNC.unwrap(innercore.loadTree);\n        core.traverse = TASYNC.unwrap(innercore.traverse);\n\n        core.setGuid = TASYNC.unwrap(innercore.setGuid);\n\n        //core diff async functions\n        if (typeof innercore.generateTreeDiff === 'function') {\n            core.generateTreeDiff = TASYNC.unwrap(innercore.generateTreeDiff);\n        }\n\n        if (typeof innercore.generateLightTreeDiff === 'function') {\n            core.generateLightTreeDiff = TASYNC.unwrap(innercore.generateLightTreeDiff);\n        }\n\n        if (typeof innercore.applyTreeDiff === 'function') {\n            core.applyTreeDiff = TASYNC.unwrap(innercore.applyTreeDiff);\n        }\n\n        //library functions\n\n        core.addLibrary = TASYNC.unwrap(innercore.addLibrary);\n        core.updateLibrary = TASYNC.unwrap(innercore.updateLibrary);\n\n        // core.loadInstances = TASYNC.unwrap(oldcore.loadInstances);\n        core.loadInstances = TASYNC.unwrap(function (node) {\n            return TASYNC.call(checkNodes, innercore.loadInstances(node));\n        });\n\n\n        return core;\n    };\n\n    return CoreUnwrap;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author mmaroti / https://github.com/mmaroti\n */\n\ndefine('common/core/coretype',[\n    'common/util/assert',\n    'common/core/tasync',\n    'common/core/constants'\n], function (ASSERT, TASYNC, CONSTANTS) {\n    'use strict';\n\n    var CoreType = function (innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        // //isPointerName should be removed from API at this level\n        // delete self.isPointerName;\n\n        logger.debug('initialized CoreType');\n\n        //<editor-fold=Helper Functions>\n        function test(text, cond) {\n            if (!cond) {\n                throw new Error(text);\n            }\n        }\n\n        function isFalseNode(node) {\n            //TODO this hack should be removed, but now it seems just fine :)\n            return innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER) === undefined;\n        }\n\n        function loadRoot2(node) {\n            ASSERT(node.base === undefined || node.base === null);\n            //kecso - TODO it should be undefined, but maybe because of the cache it can be null\n\n            node.base = null;\n            return node;\n        }\n\n        function loadChild(node, relid) {\n            var child = null,\n                base = self.getBase(node),\n                basechild = null;\n            if (base) {\n                //the parent is inherited\n                if (self.getChildrenRelids(base, true)[relid]) {\n                    //inherited child\n                    if (innerCore.getChildrenRelids(node).indexOf(relid) !== -1) {\n                        //but it is overwritten so we should load it\n                        child = innerCore.loadChild(node, relid);\n                    }\n                    basechild = self.loadChild(base, relid);\n                    return TASYNC.call(function (b, c, n, r) {\n                        if (c) {\n                            child = c;\n                            child.base = b;\n                            return child;\n                        } else {\n                            child = innerCore.getChild(n, r);\n                            self.setHashed(child, true, true);\n                            child.base = b;\n\n                            return child;\n                        }\n                    }, basechild, child, node, relid);\n                }\n            }\n            //normal child - as every node should have a base, it is normally mean a direct child of the ROOT\n            if (self.getChildrenRelids(node, true)[relid] !== true) {\n                return null;\n            }\n\n            return TASYNC.call(loadBase, innerCore.loadChild(node, relid));\n        }\n\n        function loadBase(node) {\n            var path = innerCore.getPath(node);\n            ASSERT(node === null || node.base === undefined || typeof node.base === 'object');\n\n            if (node.base === undefined) {\n                if (self.isEmpty(node)) {\n                    //empty nodes do not have a base\n                    node.base = null;\n                    return node;\n                } else if (isFalseNode(node)) {\n                    innerCore.deleteNode(node);\n                    //core.persist(core.getRoot(node));\n                    //TODO a notification should be generated towards the user\n                    logger.warn('node [' + path + '] removed due to missing base');\n\n                    //TODO check if some identification can be passed\n                    return null;\n                } else {\n                    var basePath = innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER);\n                    ASSERT(basePath !== undefined);\n                    if (basePath === null) {\n                        node.base = null;\n                        return node;\n                    } else if (self.isContainerPath(basePath, path)) {\n                        //contained base error\n                        logger.error('node [' + path + '] contains its own base!');\n                        innerCore.deleteNode(node);\n                        //core.persist(core.getRoot(node));\n                        return null;\n                    } else {\n                        return TASYNC.call(loadBase2, node, self.loadByPath(self.getRoot(node), basePath));\n                    }\n                }\n            } else {\n                //TODO can the base change at this point???\n                return node;\n            }\n        }\n\n        function loadBase2(node, target) {\n            if (typeof node.base !== null && typeof node.base === 'object' &&\n                (innerCore.getPath(node.base) === innerCore.getPath(target))) {\n                //TODO somehow the object already loaded properly and we do no know about it!!!\n                return node;\n            } else {\n                ASSERT(node.base === undefined || node.base === null); //kecso\n\n                if (target === null) {\n                    // At this point the base node should be a valid node\n                    logger.warn('node [' + innerCore.getPath(node) +\n                        '] removed due to missing base in inheritance chain');\n                    innerCore.deleteNode(node);\n                    //core.persist(core.getRoot(node));\n                    return null;\n                }\n\n                node.base = target;\n\n                return node;\n            }\n        }\n\n        function loadDescendantByPath(node, pathArray, index) {\n            if (node === null || index === pathArray.length) {\n                return node;\n            }\n\n            var child = self.loadChild(node, pathArray[index]);\n            return TASYNC.call(loadDescendantByPath, child, pathArray, index + 1);\n        }\n\n        function isInheritedChild(node) {\n            var parent = self.getParent(node),\n                base = self.getBase(node),\n                parentBase = parent ? self.getBase(parent) : null,\n                baseParent = base ? self.getParent(base) : null;\n\n            if (baseParent && parentBase && self.getPath(baseParent) === self.getPath(parentBase)) {\n                return true;\n            }\n            return false;\n        }\n\n        function getInstanceRoot(node) {\n\n            while (isInheritedChild(node)) {\n                node = self.getParent(node);\n            }\n\n            return node;\n        }\n\n        /**\n         * This function collects the inherited collection names.\n         * Although there is no collection inheritance, we know that if a model is instantiated its internal structure\n         * is not duplicated or no new data will be created. This means that in a sense, to keep the prototypical\n         * inheritance correct, we need to build the internal relations on the fly. This means that whenever the user\n         * has a question about the inverse relations of an internal part of the instance, we have to check the\n         * prototype for such 'internal' relations and provide them - like in case of inherited attributes.\n         * The function goes up on the inheritance chain of the questioned node.\n         * At every step, it searches the root of instantiation (the node that is the instance) and collect inverse\n         * relation names that exist in the prototype structure and has purely internal endpoints.\n         *\n         * @param node - the node in question\n         * @returns {Array} - the list of names of relations that has the node as target\n         */\n        function getInheritedCollectionNames(node) {\n            var names = [],\n                startNode = node,\n                actualNode = node,\n                endNode,\n                inverseOverlays,\n                name,\n                target;\n\n            while (startNode) {\n                actualNode = self.getBase(startNode);\n                endNode = self.getBase(getInstanceRoot(startNode));\n                target = '';\n                if (actualNode && endNode) {\n                    while (actualNode && actualNode !== self.getParent(endNode)) {\n                        inverseOverlays = innerCore.getInverseOverlayOfNode(actualNode);\n                        if (inverseOverlays[target]) {\n                            for (name in inverseOverlays[target]) {\n                                if (names.indexOf(name) === -1) {\n                                    names.push(name);\n                                }\n                            }\n                        }\n                        target = CONSTANTS.PATH_SEP + self.getRelid(actualNode) + target;\n                        actualNode = self.getParent(actualNode);\n                    }\n                }\n                startNode = self.getBase(startNode);\n            }\n\n            return names;\n        }\n\n        /**\n         * This function gathers the paths of the nodes that are pointing to the questioned node. The set of relations\n         * that are checked is the 'inherited' inverse relations.\n         *\n         * The method of this function is identical to getInheritedCollectionNames, except this function collects the\n         * sources of the given relations and not just the name of all such relation. To return a correct path (as\n         * the data exists in some bases of the actual nodes) the function always convert it back to the place of\n         * inquiry.\n         * @param node - the node in question\n         * @param name - name of the relation that we are interested in\n         * @returns {Array} - list of paths of sources of inherited relations by the given name\n         */\n        function getInheritedCollectionPaths(node, name) {\n            var paths = [],\n                startNode = node,\n                actualNode = node,\n                endNode,\n                prefixNode,\n                i,\n                inverseOverlays,\n                target;\n\n            while (startNode) {\n                actualNode = self.getBase(startNode);\n                endNode = self.getBase(getInstanceRoot(startNode));\n                target = '';\n                if (actualNode && endNode) {\n                    prefixNode = node;\n                    while (actualNode && actualNode !== self.getParent(endNode)) {\n                        inverseOverlays = innerCore.getInverseOverlayOfNode(actualNode);\n                        if (inverseOverlays[target] && inverseOverlays[target][name]) {\n                            for (i = 0; i < inverseOverlays[target][name].length; i += 1) {\n                                paths.push(self.joinPaths(self.getPath(prefixNode), inverseOverlays[target][name][i]));\n                            }\n                        }\n                        target = CONSTANTS.PATH_SEP + self.getRelid(actualNode) + target;\n                        actualNode = self.getParent(actualNode);\n                        prefixNode = self.getParent(prefixNode);\n                    }\n                }\n                startNode = self.getBase(startNode);\n            }\n\n            return paths;\n        }\n\n        function inheritedPointerNames(node) {\n            var allNames = self.getPointerNames(node),\n                ownNames = self.getOwnPointerNames(node),\n                names = [],\n                i;\n\n            for (i = 0; i < allNames.length; i++) {\n                if (ownNames.indexOf(allNames[i]) === -1) {\n                    names.push(allNames[i]);\n                }\n            }\n\n            return names;\n        }\n\n        function isValidNodeThrow(node) {\n            test('core', innerCore.isValidNode(node));\n            test('base', typeof node.base === 'object');\n        }\n\n        function getProperty(node, name) {\n            var property;\n            while (property === undefined && node !== null) {\n                property = innerCore.getProperty(node, name);\n                node = self.getBase(node);\n            }\n            return property;\n        }\n\n        function getSimpleBasePath(node, source, name) {\n            var path = innerCore.getPointerPathFrom(node, source, name);\n            if (path === undefined) {\n                if (node.base !== null && node.base !== undefined) {\n                    return getSimpleBasePath(node.base, source, name);\n                } else {\n                    return undefined;\n                }\n            } else {\n                return path;\n            }\n        }\n\n        function getParentOfBasePath(node) {\n            var parent;\n            if (node.base) {\n                parent = self.getParent(node.base);\n                if (parent) {\n                    return self.getPath(parent);\n                } else {\n                    return undefined;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        function getBaseOfParentPath(node) {\n            var parent = self.getParent(node);\n            if (parent) {\n                if (parent.base) {\n                    return self.getPath(parent.base);\n                } else {\n                    return undefined;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        function getTargetRelPath(node, relSource, name) {\n            var ovr = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY),\n                source = self.getChild(ovr, relSource);\n            return getProperty(source, name);\n        }\n\n        // function checkCollNames(node, draft) {\n        //     var filtered = [],\n        //         i, sources;\n        //     for (i = 0; i < draft.length; i++) {\n        //         sources = self.getCollectionPaths(node, draft[i]);\n        //         if (sources.length > 0) {\n        //             filtered.push(draft[i]);\n        //         }\n        //     }\n        //     return filtered;\n        // }\n\n        function isBase(node, compareNode) {\n            while (compareNode) {\n                if (compareNode === node) {\n                    return true;\n                }\n\n                compareNode = self.getBase(compareNode);\n            }\n\n            return false;\n        }\n\n        function isParent(node, compareNode) {\n            while (compareNode) {\n                if (compareNode === node) {\n                    return true;\n                }\n\n                compareNode = self.getParent(compareNode);\n            }\n\n            return false;\n        }\n\n        function isParentOrBaseRec(node, compareNode, visited, traverseContainment) {\n            var comparePath = self.getPath(compareNode);\n\n            if (traverseContainment) {\n                if (visited.containment[comparePath]) {\n                    //console.log('breaking recursion', traverseContainment, basePath);\n                    return false;\n                }\n\n                visited.containment[comparePath] = true;\n                compareNode = self.getParent(compareNode);\n            } else {\n                if (visited.inheritance[comparePath]) {\n                    //console.log('breaking recursion', traverseContainment, basePath);\n                    return false;\n                }\n\n                visited.inheritance[comparePath] = true;\n                compareNode = self.getBase(compareNode);\n            }\n\n            while (compareNode) {\n                //console.log('comparing with node', traverseContainment, basePath);\n                if (node === compareNode || isParentOrBaseRec(node, compareNode, visited, !traverseContainment)) {\n                    //console.log('Found one!');\n                    return true;\n                }\n\n                if (traverseContainment) {\n                    compareNode = self.getParent(compareNode);\n                } else {\n                    compareNode = self.getBase(compareNode);\n                }\n            }\n\n            return false;\n        }\n\n        function getBaseAncestor(node, otherNode) {\n            var bases = [],\n                base;\n\n            base = node;\n            while (base) {\n                bases.push(base);\n                base = self.getBase(base);\n            }\n\n            base = otherNode;\n            while (base) {\n                if (bases.indexOf(base) > -1) {\n                    return base;\n                }\n\n                base = self.getBase(base);\n            }\n\n            return null;\n        }\n\n        function childHasSameOrigin(node, otherNode, childRelid) {\n            var ancestor = getBaseAncestor(node, otherNode),\n                result = false;\n\n            if (ancestor) {\n                result = self.getChildrenRelids(ancestor, true).hasOwnProperty(childRelid);\n            }\n\n            return result;\n        }\n\n        function processNewRelidLength(node, newMinLength) {\n            var currMinLength;\n\n            newMinLength = newMinLength > CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH ?\n                CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH : newMinLength;\n\n            node = node.base;\n            while (node) {\n                currMinLength = innerCore.getProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY) || 0;\n                if (currMinLength >= newMinLength) {\n                    return;\n                }\n\n                // TODO: Check for library element here??\n                innerCore.setProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY, newMinLength);\n                node = node.base;\n            }\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Modified Methods>\n        this.isValidNode = function (node) {\n            try {\n                isValidNodeThrow(node);\n                return true;\n            } catch (error) {\n                logger.error(error.message, {stack: error.stack, node: node});\n                return false;\n            }\n        };\n\n        this.loadRoot = function (hash) {\n            return TASYNC.call(loadRoot2, innerCore.loadRoot(hash));\n        };\n\n        this.loadChild = function (node, relid) {\n            return TASYNC.call(function (child) {\n                if (child && self.isInheritanceContainmentCollision(child, self.getParent(child))) {\n                    logger.error('node[' + self.getPath(child) +\n                        '] was deleted due to inheritance-containment collision');\n                    self.deleteNode(child);\n                    //core.persist(core.getRoot(child));\n                    return null;\n                } else {\n                    return child;\n                }\n            }, loadChild(node, relid));\n        };\n\n        this.loadByPath = function (node, path) {\n            ASSERT(self.isValidNode(node));\n            ASSERT(path === '' || path.charAt(0) === '/');\n            path = path.split('/');\n            return loadDescendantByPath(node, path, 1);\n        };\n\n        this.loadPointer = function (node, name) {\n            //TODO the pointer loading is totally based upon the loadByPath...\n            var pointerPath = self.getPointerPath(node, name),\n                root = self.getRoot(node);\n\n            if (pointerPath === undefined) {\n                return undefined;\n            }\n            if (pointerPath === null) {\n                return null;\n            }\n            return TASYNC.call(function () {\n                return self.loadByPath(root, pointerPath);\n            }, self.loadPaths(self.getHash(root), [pointerPath]));\n        };\n\n        this.getChild = function (node, relid) {\n            ASSERT(self.isValidNode(node) && (node.base === undefined || typeof node.base === 'object'));\n            var child = innerCore.getChild(node, relid);\n            if (node.base !== null && node.base !== undefined) {\n                if (child.base === null || child.base === undefined) {\n                    child.base = self.getChild(node.base, relid);\n                }\n            } else {\n                child.base = null;\n            }\n            return child;\n        };\n\n        this.getChildrenRelids = function (node, asObject) {\n            ASSERT(self.isValidNode(node));\n            var base = node,\n                relids,\n                i;\n\n            function basesHaveSameRelids() {\n                var b = node,\n                    cnt = 0,\n                    len = node.allChildrenRelids.bases.length;\n\n                while (b) {\n                    if (cnt === len || b.childrenRelids !== node.allChildrenRelids.bases[cnt]) {\n                        return false;\n                    }\n\n                    b = b.base;\n                    cnt += 1;\n                }\n\n                return true;\n            }\n\n            if (!node.allChildrenRelids || basesHaveSameRelids() === false) {\n                // If there is no cache or the childrenRelids caches are outdated,\n                // rebuild the cache.\n                node.allChildrenRelids = {\n                    cached: {},\n                    bases: []\n                };\n\n                while (base) {\n                    relids = innerCore.getChildrenRelids(base);\n                    node.allChildrenRelids.bases.push(relids);\n\n                    for (i = 0; i < relids.length; i += 1) {\n                        node.allChildrenRelids.cached[relids[i]] = true;\n                    }\n\n                    base = base.base;\n                }\n            }\n\n            return asObject ? node.allChildrenRelids.cached : Object.keys(node.allChildrenRelids.cached);\n        };\n\n        this.loadChildren = function (node) {\n            ASSERT(self.isValidNode(node));\n            var relids = self.getChildrenRelids(node);\n            var children = [];\n            for (var i = 0; i < relids.length; i++) {\n                children[i] = self.loadChild(node, relids[i]);\n            }\n            return TASYNC.call(function (n) {\n                var newn = [];\n                for (var i = 0; i < n.length; i++) {\n                    if (n[i] !== null) {\n                        newn.push(n[i]);\n                    }\n                }\n                return newn;\n            }, TASYNC.lift(children));\n        };\n\n        this.setPointer = function (node, name, target) {\n            innerCore.setPointer(node, name, target);\n            if (isInheritedChild(node)) {\n                this.setProperty(node, CONSTANTS.INHERITED_CHILD_HAS_OWN_RELATION_PROPERTY, true);\n            }\n\n            if (isInheritedChild(target)) {\n                this.setProperty(target, CONSTANTS.INHERITED_CHILD_HAS_OWN_RELATION_PROPERTY, true);\n            }\n        };\n\n        this.getCollectionNames = function (node) {\n            ASSERT(self.isValidNode(node));\n            var ownNames = innerCore.getCollectionNames(node),\n                inhNames = getInheritedCollectionNames(node),\n                i;\n            for (i = 0; i < ownNames.length; i++) {\n                if (inhNames.indexOf(ownNames[i]) < 0) {\n                    inhNames.push(ownNames[i]);\n                }\n            }\n\n            return inhNames;\n        };\n\n        this.getCollectionPaths = function (node, name) {\n            ASSERT(self.isValidNode(node) && name);\n            var ownPaths = innerCore.getCollectionPaths(node, name),\n                inhPaths = getInheritedCollectionPaths(node, name);\n\n            inhPaths = inhPaths.concat(ownPaths);\n\n            return inhPaths;\n        };\n\n        this.loadCollection = function (node, name) {\n            var root = self.getRoot(node),\n                paths = self.getCollectionPaths(node, name),\n                nodes = [],\n                i,\n                rootHash = self.getHash(root);\n\n            return TASYNC.call(function () {\n                for (i = 0; i < paths.length; i += 1) {\n                    nodes[i] = self.loadByPath(root, paths[i]);\n                }\n                return TASYNC.lift(nodes);\n            }, self.loadPaths(rootHash, paths));\n        };\n\n        this.createChild = function (parent) {\n            var node = innerCore.createChild(parent, self.getChildrenRelids(parent, true));\n\n            this.processRelidReservation(parent, this.getRelid(node));\n\n            return self.getChild(parent, this.getRelid(node));\n        };\n\n        this.createNode = function (parameters) {\n            parameters = parameters || {};\n            var base = parameters.base || null,\n                parent = parameters.parent,\n                node,\n                relids;\n\n            ASSERT(!parent || self.isValidNode(parent));\n            ASSERT(!base || self.isValidNode(base));\n            ASSERT(!base || self.getPath(base) !== self.getPath(parent));\n\n            if (parent) {\n                relids = self.getChildrenRelids(parent, true);\n            }\n\n            node = innerCore.createNode(parameters, relids);\n            node.base = base;\n            innerCore.setPointer(node, CONSTANTS.BASE_POINTER, base);\n\n            if (parent) {\n                this.processRelidReservation(parent, this.getRelid(node));\n            }\n\n            return node;\n        };\n\n        this.isValidNewParent = function (node, parent) {\n            ASSERT(self.isValidNode(node) && self.isValidNode(parent));\n            var visited = {\n                    containment: {},\n                    inheritance: {}\n                },\n                result = true;\n\n            if (isBase(parent, node)) {\n                result = false;\n            } else if (isParentOrBaseRec(node, parent, visited, true)) {\n                result = false;\n            } else if (isParentOrBaseRec(node, parent, visited, false)) {\n                result = false;\n            }\n\n            return result;\n        };\n\n        this.moveNode = function (node, parent) {\n            ASSERT(self.isValidNewParent(node, parent),\n                'New parent would create loop in containment/inheritance tree.');\n            var base = node.base,\n                minRelidLength = innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY) || 0,\n                takenRelids = self.getChildrenRelids(parent, true),\n                moved;\n\n            if (this.getRelid(node).length < minRelidLength) {\n                takenRelids[this.getRelid(node)] = true;\n            }\n\n            moved = innerCore.moveNode(node, parent, takenRelids);\n            moved.base = base;\n\n            this.processRelidReservation(parent, this.getRelid(moved));\n\n            return moved;\n        };\n\n        this.copyNode = function (node, parent) {\n            ASSERT(!node.base || self.getPath(node.base) !== self.getPath(parent));\n            var base = node.base,\n                newnode = innerCore.copyNode(node, parent, self.getChildrenRelids(parent, true));\n\n            newnode.base = base;\n            innerCore.setPointer(newnode, CONSTANTS.BASE_POINTER, base);\n            innerCore.deleteProperty(newnode, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\n\n            this.processRelidReservation(parent, this.getRelid(newnode));\n\n            return newnode;\n        };\n\n        this.copyNodes = function (nodes, parent) {\n            var copiedNodes,\n                i, j, index, base,\n                relations = [],\n                names, pointer,\n                longestNewRelid = '',\n                paths = [];\n\n            //here we also have to copy the inherited relations which points inside the copy area\n            for (i = 0; i < nodes.length; i++) {\n                paths.push(self.getPath(nodes[i]));\n            }\n\n            for (i = 0; i < nodes.length; i++) {\n                names = inheritedPointerNames(nodes[i]);\n                pointer = {};\n                for (j = 0; j < names.length; j++) {\n                    index = paths.indexOf(self.getPointerPath(nodes[i], names[j]));\n                    if (index !== -1) {\n                        pointer[names[j]] = index;\n                    }\n                }\n                relations.push(pointer);\n            }\n\n            //making the actual copy\n            copiedNodes = innerCore.copyNodes(nodes, parent, self.getChildrenRelids(parent, true));\n\n            //setting internal-inherited relations\n            for (i = 0; i < nodes.length; i++) {\n                names = Object.keys(relations[i]);\n                for (j = 0; j < names.length; j++) {\n                    self.setPointer(copiedNodes[i], names[j], copiedNodes[relations[i][names[j]]]);\n                }\n            }\n\n            //setting base relation\n            for (i = 0; i < nodes.length; i++) {\n                base = nodes[i].base;\n                copiedNodes[i].base = base;\n                innerCore.setPointer(copiedNodes[i], CONSTANTS.BASE_POINTER, base);\n                innerCore.deleteProperty(copiedNodes[i], CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\n            }\n\n            //searching for the longest new relid and then process it towards the bases of the parent\n            for (i = 0; i < copiedNodes.length; i += 1) {\n                j = this.getRelid(copiedNodes[i]);\n                if (j.length > longestNewRelid) {\n                    longestNewRelid = j;\n                }\n            }\n\n            this.processRelidReservation(parent, longestNewRelid);\n\n            return copiedNodes;\n        };\n\n        this.deleteNode = function (node, technical) {\n            //currently we only check if the node is inherited from its parents children\n            if (node && (node.base !== null || technical === true)) {\n                var parent = self.getParent(node),\n                    parentsBase = parent ? self.getBase(node) : null,\n                    base = self.getBase(node),\n                    basesParent = base ? self.getParent(node) : null;\n\n                if (parent && parentsBase && base && basesParent) {\n                    if (self.getPath(parentsBase) !== self.getPath(basesParent)) {\n                        innerCore.deleteNode(node);\n                    }\n                } else {\n                    innerCore.deleteNode(node);\n                }\n            }\n        };\n\n        this.getAttributeNames = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            var merged = {};\n            do {\n                var names = innerCore.getAttributeNames(node);\n                for (var i = 0; i < names.length; ++i) {\n                    if (!(names[i] in merged)) {\n                        merged[names[i]] = true;\n                    }\n                }\n\n                node = node.base;\n            } while (node);\n\n            return Object.keys(merged);\n        };\n\n        this.getRegistryNames = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            var merged = {};\n            do {\n                var names = innerCore.getRegistryNames(node);\n                for (var i = 0; i < names.length; ++i) {\n                    if (!(names[i] in merged)) {\n                        merged[names[i]] = true;\n                    }\n                }\n\n                node = node.base;\n            } while (node);\n\n            return Object.keys(merged);\n        };\n\n        this.getAttribute = function (node, name) {\n            ASSERT(self.isValidNode(node));\n            var value;\n            do {\n                value = innerCore.getAttribute(node, name);\n                node = node.base;\n            } while (value === undefined && node !== null);\n\n            return value;\n        };\n\n        this.getRegistry = function (node, name) {\n            ASSERT(self.isValidNode(node));\n            var value;\n            do {\n                value = innerCore.getRegistry(node, name);\n                node = node.base;\n            } while (value === undefined && node !== null);\n\n            return value;\n        };\n\n        this.getPointerNames = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            return self.getPointerNamesFrom(node, '');\n            //var merged = {};\n            //do {\n            //    var names = oldcore.getPointerNames(node);\n            //    for (var i = 0; i < names.length; ++i) {\n            //        if (!(names[i] in merged)) {\n            //            merged[names[i]] = true;\n            //        }\n            //    }\n            //\n            //    node = node.base;\n            //} while (node);\n            //\n            //return Object.keys(merged);\n        };\n\n        this.getPointerNamesFrom = function (node, source) {\n            ASSERT(self.isValidNode(node));\n\n            var merged = {};\n            do {\n                var names = innerCore.getPointerNamesFrom(node, source);\n                for (var i = 0; i < names.length; ++i) {\n                    if (!(names[i] in merged)) {\n                        merged[names[i]] = true;\n                    }\n                }\n\n                node = node.base;\n            } while (node);\n\n            return Object.keys(merged);\n        };\n\n        this.getPointerPathFrom = function (node, source, name) {\n            ASSERT(self.isValidNode(node) && typeof name === 'string');\n\n            var ownPointerPath = innerCore.getPointerPathFrom(node, source, name);\n            if (ownPointerPath !== undefined) {\n                return ownPointerPath;\n            }\n            var target,\n                basePath,\n                hasNullTarget = false;\n\n            basePath = node.base ? getSimpleBasePath(node.base, source, name) : undefined;\n\n            while (node) {\n                target = getTargetRelPath(node, source, name);\n                if (target !== undefined) {\n                    if (target.indexOf('_nullptr') !== -1) {\n                        hasNullTarget = true;\n                        target = undefined;\n                    } else {\n                        break;\n                    }\n                }\n\n                source = '/' + self.getRelid(node) + source;\n                if (getParentOfBasePath(node) === getBaseOfParentPath(node)) {\n                    node = self.getParent(node);\n                } else {\n                    node = null;\n                }\n            }\n\n            if (target !== undefined) {\n                ASSERT(node);\n                target = innerCore.joinPaths(innerCore.getPath(node), target);\n            }\n\n            if (typeof target === 'string') {\n                return target;\n            }\n            if (typeof basePath === 'string') {\n                return basePath;\n            }\n            if (hasNullTarget === true) {\n                return null;\n            }\n            return undefined;\n\n        };\n\n        this.getPointerPath = function (node, name) {\n            return self.getPointerPathFrom(node, '', name);\n        };\n\n        this.getChildrenPaths = function (node) {\n            var path = self.getPath(node);\n\n            var relids = self.getChildrenRelids(node);\n            // Remark: It's fine to mutate this array since we're using Object.keys on the cached object..\n            for (var i = 0; i < relids.length; ++i) {\n                relids[i] = path + '/' + relids[i];\n            }\n\n            return relids;\n        };\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n\n        //check of inheritance chain and containment hierarchy collision\n        this.isInheritanceContainmentCollision = function (node, parent) {\n            var bases = [];\n\n            while (node) {\n                bases.push(self.getPath(node));\n                node = self.getBase(node);\n            }\n\n            while (parent) {\n                if (bases.indexOf(self.getPath(parent)) !== -1) {\n                    return true;\n                }\n                parent = self.getParent(parent);\n            }\n            return false;\n        };\n\n        this.getBase = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            // TODO: check if base has moved\n            return node.base;\n        };\n\n        this.isValidNewBase = function (node, base) {\n            ASSERT(self.isValidNode(node) && (base === undefined || base === null || self.isValidNode(base)));\n            var visited = {\n                    containment: {},\n                    inheritance: {}\n                },\n                result = true;\n\n            if (!base) {\n                result = true;\n            } else if (isParent(base, node)) {\n                result = false;\n            } else if (isParentOrBaseRec(node, base, visited, true)) {\n                result = false;\n            } else if (isParentOrBaseRec(node, base, visited, false)) {\n                result = false;\n            }\n\n            return result;\n        };\n\n        this.setBase = function (node, base) {\n            ASSERT(self.isValidNewBase(node, base),\n                'New base would create loop in containment/inheritance tree.');\n\n            if (base) {\n                //TODO maybe this is not the best way, needs to be double checked\n                var parent = self.getParent(node),\n                    nodeChildren = self.getOwnChildrenRelids(node), // We're only interested in the children with data.\n                    minRelidLength = innerCore.getProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY) || 0,\n                    baseChildren = self.getChildrenRelids(base, true),\n                    parentBase,\n                    baseParent,\n                    i;\n\n                if (parent) {\n                    parentBase = self.getBase(parent);\n                    baseParent = self.getParent(base);\n                    if (self.getPath(parentBase) !== self.getPath(baseParent)) {\n                        //we have to set an exact pointer only if it is not inherited child\n                        innerCore.setPointer(node, CONSTANTS.BASE_POINTER, base);\n\n                        for (i = 0; i < nodeChildren.length; i += 1) {\n                            if (baseChildren[nodeChildren[i]] && childHasSameOrigin(node, base, nodeChildren[i])) {\n                                // Currently we only keep the children data for children with same origin.\n                                // Meaning we delete all other children (including those that were created in node).\n                            } else {\n                                innerCore.deleteChild(node, nodeChildren[i]);\n                            }\n                        }\n                    } else {\n                        innerCore.deletePointer(node, CONSTANTS.BASE_POINTER); //we remove the pointer just in case\n                    }\n                } else {\n                    //if for some reason the node doesn't have a parent it is surely not an inherited child\n                    innerCore.setPointer(node, CONSTANTS.BASE_POINTER, base);\n                }\n\n                node.base = base;\n\n                // Handle the minimal new length propagation to the new base chain.\n                for (i = 0; i < nodeChildren.length; i += 1) {\n                    // Do not account for old relids..\n                    if (nodeChildren[i].length <= CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH) {\n                        minRelidLength = nodeChildren[i].length + 1 > minRelidLength ?\n                        nodeChildren[i].length + 1 : minRelidLength;\n                    }\n                }\n\n                if (minRelidLength >= 2) {\n                    processNewRelidLength(node, minRelidLength);\n                }\n            } else {\n                innerCore.setPointer(node, CONSTANTS.BASE_POINTER, null);\n                node.base = null;\n            }\n        };\n\n        this.getBaseRoot = function (node) {\n            ASSERT(self.isValidNode(node));\n            while (node.base !== null) {\n                node = node.base;\n            }\n\n            return node;\n        };\n\n        this.getTypeRoot = function (node) {\n            if (node.base) {\n                while (node.base !== null) {\n                    node = self.getBase(node);\n                }\n                return node;\n            } else {\n                return null;\n            }\n        };\n\n        this.getOwnChildrenRelids = function (node) {\n            return innerCore.getChildrenRelids(node);\n        };\n\n        this.loadOwnChildren = function (node) {\n            ASSERT(self.isValidNode(node));\n            var relids = self.getOwnChildrenRelids(node);\n            var children = [];\n            for (var i = 0; i < relids.length; i++) {\n                children[i] = self.loadChild(node, relids[i]);\n            }\n            return TASYNC.call(function (n) {\n                var newn = [];\n                for (var i = 0; i < n.length; i++) {\n                    if (n[i] !== null) {\n                        newn.push(n[i]);\n                    }\n                }\n                return newn;\n            }, TASYNC.lift(children));\n        };\n\n        this.getOwnAttributeNames = function (node) {\n            return innerCore.getAttributeNames(node);\n        };\n\n        this.getOwnRegistryNames = function (node) {\n            return innerCore.getRegistryNames(node);\n        };\n\n        this.getOwnAttribute = function (node, name) {\n            return innerCore.getAttribute(node, name);\n        };\n\n        this.getOwnRegistry = function (node, name) {\n            return innerCore.getRegistry(node, name);\n        };\n\n        this.getOwnPointerNames = function (node) {\n            ASSERT(self.isValidNode(node));\n            return innerCore.getPointerNames(node);\n        };\n\n        this.getOwnPointerNamesFrom = function (node, source) {\n            return innerCore.getPointerNamesFrom(node, source);\n        };\n\n        this.getOwnPointerPath = function (node, name) {\n            innerCore.getPointerPath(node, name);\n        };\n\n        this.getOwnPointerPathFrom = function (node, source, name) {\n            innerCore.getPointerPathFrom(node, source, name);\n        };\n\n        this.getOwnChildrenPaths = function (node) {\n            return innerCore.getChildrenPaths(node);\n        };\n\n        this.processRelidReservation = function (node, relid) {\n            processNewRelidLength(node, relid.length + 1);\n        };\n\n        this.getInstancePaths = function (node) {\n            var instances = [],\n                directCollectionPaths,\n                relPath = '',\n                i;\n\n            while (node) {\n                directCollectionPaths = innerCore.getCollectionPaths(node, CONSTANTS.BASE_POINTER);\n                for (i = 0; i < directCollectionPaths.length; i += 1) {\n                    instances.push(directCollectionPaths[i] + relPath);\n                }\n                relPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node) + relPath;\n                node = innerCore.getParent(node);\n            }\n\n            return instances;\n        };\n\n        this.loadInstances = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            var instancePaths = self.getInstancePaths(node),\n                instances = [],\n                root = self.getRoot(node),\n                i;\n\n            for (i = 0; i < instancePaths.length; i += 1) {\n                instances[i] = self.loadByPath(root, instancePaths[i]);\n            }\n\n            return TASYNC.lift(instances);\n        };\n        //</editor-fold>\n    };\n\n    return CoreType;\n})\n;\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n *\n * example constraint structure for the outside world:\n * {\n *  script:string,\n *  priority:integer,\n *  name:string,\n *  message:string\n * }\n * provided API:\n * getConstraint(node,name) -> constraintObj\n * setConstraint(node,constraintObj)\n * getConstraintNames(node)\n * delConstraint(node,name)\n */\n\ndefine('common/core/constraintcore',['common/util/assert', 'common/core/constants'], function (ASSERT, CONSTANTS) {\n    'use strict';\n\n    function ConstraintCore(innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized ConstraintCore');\n\n        //<editor-fold=Helper Functions>\n        function getConstraintRelId(constraintsNode, name) {\n            var relIds = innerCore.getChildrenRelids(constraintsNode);\n            var relId;\n            for (var i = 0; i < relIds.length; i++) {\n                if (name === innerCore.getAttribute(innerCore.getChild(constraintsNode, relIds[i]), 'name')) {\n                    relId = relIds[i];\n                    break;\n                }\n            }\n            return relId;\n        }\n\n        function getRegConstName(name) {\n            return CONSTANTS.CONSTRAINT_REGISTRY_PREFIX + name;\n        }\n\n        function getContraintNames(node, onlyOwn) {\n            ASSERT(self.isValidNode(node));\n            var constraintsNode = self.getChild(node, CONSTANTS.CONSTRAINTS_RELID),\n                relIds = onlyOwn ? self.getOwnChildrenRelids(constraintsNode) : self.getChildrenRelids(constraintsNode),\n                names = [];\n\n            for (var i = 0; i < relIds.length; i += 1) {\n                names.push(self.getAttribute(self.getChild(constraintsNode, relIds[i]), 'name'));\n            }\n            return names;\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.getConstraint = function (node, name) {\n            ASSERT(innerCore.isValidNode(node));\n            var constraintsNode = innerCore.getChild(node, CONSTANTS.CONSTRAINTS_RELID);\n            var constRelId = getConstraintRelId(constraintsNode, name);\n            if (constRelId) {\n                var constraintNode = innerCore.getChild(constraintsNode, constRelId);\n                return {\n                    script: innerCore.getAttribute(constraintNode, 'script'),\n                    priority: innerCore.getAttribute(constraintNode, 'priority'),\n                    info: innerCore.getAttribute(constraintNode, 'info')\n                };\n            } else {\n                return null;\n            }\n        };\n\n        this.setConstraint = function (node, name, constraintObj) {\n            ASSERT(innerCore.isValidNode(node));\n            ASSERT(typeof constraintObj === 'object' && typeof name === 'string');\n            var constraintsNode = innerCore.getChild(node, CONSTANTS.CONSTRAINTS_RELID),\n                constRelId = getConstraintRelId(constraintsNode, name),\n                constraintNode;\n\n            if (constRelId) {\n                constraintNode = innerCore.getChild(constraintsNode, constRelId);\n            } else {\n                constraintNode = innerCore.createChild(constraintsNode);\n            }\n\n            constraintObj.priority = constraintObj.priority || CONSTANTS.C_DEF_PRIORITY;\n            constraintObj.script = constraintObj.script || 'console.log(\"empty constraint\");';\n            constraintObj.info = constraintObj.info || '';\n            innerCore.setAttribute(constraintNode, 'name', name);\n            innerCore.setAttribute(constraintNode, 'script', constraintObj.script);\n            innerCore.setAttribute(constraintNode, 'priority', constraintObj.priority);\n            innerCore.setAttribute(constraintNode, 'info', constraintObj.info);\n            innerCore.setRegistry(node, getRegConstName(name),\n                (innerCore.getRegistry(node, getRegConstName(name)) || 0) + 1);\n        };\n\n        this.delConstraint = function (node, name) {\n            ASSERT(innerCore.isValidNode(node));\n            var constraintsNode = innerCore.getChild(node, CONSTANTS.CONSTRAINTS_RELID);\n            var constRelId = getConstraintRelId(constraintsNode, name);\n            if (constRelId) {\n                var constraintNode = innerCore.getChild(constraintsNode, constRelId);\n                innerCore.deleteNode(constraintNode, true);\n            }\n\n            innerCore.delRegistry(node, getRegConstName(name));\n        };\n\n        this.getConstraintNames = function (node) {\n            return getContraintNames(node, false);\n        };\n\n        //TODO this means we always have to have this layer above type/inheritance layer\n        this.getOwnConstraintNames = function (node) {\n            return getContraintNames(node, true);\n        };\n        //</editor-fold>\n    }\n\n    return ConstraintCore;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author mmaroti / https://github.com/mmaroti\n */\n\ndefine('common/core/coretree',[\n    'common/util/assert',\n    'common/util/key',\n    'common/core/tasync',\n    'common/util/random',\n    'common/regexp',\n    'common/core/constants',\n    'common/storage/util'\n], function (ASSERT, GENKEY, TASYNC, RANDOM, REGEXP, CONSTANTS, storageUtil) {\n\n    'use strict';\n\n    var rootCounter = 0;\n\n    function CoreTree(storage, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var gmeConfig = options.globConf,\n            logger = options.logger.fork('core'),\n            ID_NAME = storage.ID_NAME,\n            roots = [],\n            ticks = 0,\n            mutateCount = 0,\n            stackedObjects = {},\n            self = this;\n\n        storage.loadObject = TASYNC.wrap(storage.loadObject);\n\n        this.loadPaths = TASYNC.wrap(storage.loadPaths);\n        this.logger = logger;\n\n        function ASSERT_IS_OBJECT(value) {\n            ASSERT(value !== null && typeof value === 'object' && value instanceof Array === false);\n        }\n\n        // ------- memory management\n\n        function __detachChildren(node) {\n            ASSERT_IS_OBJECT(node.children);\n            ASSERT(node.age >= CONSTANTS.MAX_AGE - 1);\n\n            var children = node.children;\n            node.children = null;\n            node.age = CONSTANTS.MAX_AGE;\n\n            for (var child in children) {\n                __detachChildren(children[child]);\n            }\n        }\n\n        function __ageNodes(nodes) {\n            ASSERT_IS_OBJECT(nodes);\n\n            var keys = Object.keys(nodes),\n                node,\n                i;\n\n            for (i = 0; i < keys.length; i += 1) {\n                node = nodes[keys[i]];\n                ASSERT(node.age < CONSTANTS.MAX_AGE);\n                if (++node.age >= CONSTANTS.MAX_AGE) {\n                    delete nodes[keys[i]];\n                    __detachChildren(node);\n                } else {\n                    __ageNodes(node.children);\n                }\n            }\n        }\n\n        function __ageRoots() {\n            var root,\n                i;\n            if (++ticks >= CONSTANTS.MAX_TICKS) {\n                ticks = 0;\n                i = roots.length;\n                while (--i >= 0) {\n                    root = roots[i];\n                    ASSERT(root.age < CONSTANTS.MAX_AGE);\n                    if (++root.age >= CONSTANTS.MAX_AGE) {\n                        roots.splice(i, 1);\n                        __detachChildren(root);\n                    } else {\n                        __ageNodes(root.children);\n                    }\n                }\n            }\n        }\n\n        function __getChildNode(children, relid) {\n            ASSERT_IS_OBJECT(children);\n            ASSERT(typeof relid === 'string');\n\n            if (children.hasOwnProperty(relid)) {\n                children[relid].age = 0;\n                return children[relid];\n            }\n\n            return null;\n        }\n\n        function __getChildData(data, relid) {\n            ASSERT(typeof relid === 'string');\n\n            if (typeof data === 'object' && data !== null) {\n                data = data[relid];\n                return data === undefined ? __getEmptyData() : data;\n            } else {\n                return null;\n            }\n        }\n\n        function __isMutableData(data) {\n            return typeof data === 'object' && data !== null && data[CONSTANTS.MUTABLE_PROPERTY] === true;\n        }\n\n        function __isEmptyData(data) {\n            if (typeof data === 'string') {\n                return false;\n            } else if (typeof data === 'object' && Object.keys(data).length === 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        function __getEmptyData() {\n            return {};\n        }\n\n        function __areEquivalent(data1, data2) {\n            return data1 === data2 || (typeof data1 === 'string' && data1 === __getChildData(data2, ID_NAME)) ||\n                (__isEmptyData(data1) && __isEmptyData(data2));\n        }\n\n        function __reloadChildrenData(node) {\n            var key,\n                child;\n\n            for (key in node.children) {\n                child = node.children[key];\n\n                var data = __getChildData(node.data, child.relid);\n                if (!REGEXP.DB_HASH.test(data) || data !== __getChildData(child.data, ID_NAME)) {\n                    child.data = data;\n                    __reloadChildrenData(child);\n                }\n            }\n        }\n\n        function __noUnderscore(relid) {\n            ASSERT(typeof relid === 'string');\n            return relid.charAt(0) !== '_';\n        }\n\n        function __saveData(data, root, path) {\n            ASSERT(__isMutableData(data));\n\n            var done = __getEmptyData(),\n                keys,\n                key,\n                i, child, sub, hash;\n\n            delete data[CONSTANTS.MUTABLE_PROPERTY];\n            keys = Object.keys(data);\n\n            for (i = 0; i < keys.length; i++) {\n                key = keys[i];\n                child = data[key];\n                if (__isMutableData(child)) {\n                    sub = __saveData(child, root, path + '/' + key);\n                    if (JSON.stringify(sub) === JSON.stringify(__getEmptyData())) {\n                        delete data[key];\n                    } else {\n                        done = sub;\n                        if (typeof child[ID_NAME] === 'string') {\n                            data[key] = child[ID_NAME];\n                        }\n                    }\n                } else {\n                    done = undefined;\n                }\n            }\n\n            if (done !== __getEmptyData()) {\n                hash = data[ID_NAME];\n                ASSERT(hash === '' || hash === undefined);\n\n                if (hash === '') {\n                    hash = '#' + GENKEY(data, gmeConfig);\n                    data[ID_NAME] = hash;\n\n                    done = data;\n\n                    storage.insertObject(data, stackedObjects);\n                    stackedObjects[hash] = {\n                        newHash: hash,\n                        newData: data,\n                        oldHash: root.initial[path] && root.initial[path].hash,\n                        oldData: root.initial[path] && root.initial[path].data\n                    };\n\n                    root.initial[path] = {\n                        hash: hash,\n                        data: data\n                    };\n                    //stackedObjects[hash] = data;\n                }\n            }\n\n            return done;\n        }\n\n        function __loadRoot2(data) {\n            var root = {\n                parent: null,\n                relid: null,\n                age: 0,\n                children: {},\n                data: data,\n                initial: {\n                    '': {\n                        hash: data[storage.ID_NAME],\n                        data: data\n                    }\n                },\n                rootid: ++rootCounter\n            };\n\n            // We patch the data here, so we only do upgrade when we actually try to interpret the content\n            storageUtil.patchDataObject(data);\n\n            roots.push(root);\n\n            __ageRoots();\n            return root;\n        }\n\n        function __loadChild2(node, newdata) {\n            var root = self.getRoot(node),\n                path = self.getPath(node);\n\n            node = self.normalize(node);\n\n            // TODO: this is a hack, we should avoid loading it multiple times\n            if (REGEXP.DB_HASH.test(node.data)) {\n                ASSERT(node.data === newdata[ID_NAME]);\n\n                // We patch the data here, so we only do upgrade when we actually try to interpret the content\n                storageUtil.patchDataObject(newdata);\n\n                root.initial[path] = {\n                    hash: node.data,\n                    data: newdata\n                };\n                node.data = newdata;\n                __reloadChildrenData(node);\n            } else {\n                // TODO: if this bites you, use the Cache\n                /*if(node.data !== newdata){\n                 console.log('kecso',node);\n                 }\n                 ASSERT(node.data === newdata);*/\n            }\n\n            return node;\n        }\n\n        function __loadDescendantByPath2(node, path, index) {\n            if (node === null || index === path.length) {\n                return node;\n            }\n\n            var child = self.loadChild(node, path[index]);\n            return TASYNC.call(__loadDescendantByPath2, child, path, index + 1);\n        }\n\n        // function __printNode(node) {\n        //     var str = '{';\n        //     str += 'age:' + node.age;\n        //\n        //     if (typeof node.relid === 'string') {\n        //         str += ', relid: \"' + node.relid + '\"';\n        //     }\n        //\n        //     str += ', children:';\n        //     if (node.children === null) {\n        //         str += 'null';\n        //     } else {\n        //         str += '[';\n        //         for (var i = 0; i < node.children.length; ++i) {\n        //             if (i !== 0) {\n        //                 str += ', ';\n        //             }\n        //             str += __printNode(node.children[i]);\n        //         }\n        //         str += ']';\n        //     }\n        //\n        //     str += '}';\n        //     return str;\n        // }\n\n        function __test(text, cond) {\n            if (!cond) {\n                throw new Error(text);\n            }\n        }\n\n        function isValidNodeThrow(node) {\n            __test('object', typeof node === 'object' && node !== null);\n            __test('object 2', node.hasOwnProperty('parent') && node.hasOwnProperty('relid'));\n            __test('parent', typeof node.parent === 'object');\n            __test('relid', typeof node.relid === 'string' || node.relid === null);\n            __test('parent 2', (node.parent === null) === (node.relid === null));\n            __test('age', node.age >= 0 && node.age <= CONSTANTS.MAX_AGE);\n            //__test('children', node.children === null || node.children instanceof Array);\n            __test('children 2', (node.age === CONSTANTS.MAX_AGE) === (node.children === null));\n            __test('data', typeof node.data === 'object' || typeof node.data === 'string' ||\n                typeof node.data === 'number');\n\n            if (node.parent !== null) {\n                __test('age 2', node.age >= node.parent.age);\n                __test('mutable', !__isMutableData(node.data) || __isMutableData(node.parent.data));\n            }\n        }\n\n        // ------- static methods\n        this.getParent = function (node) {\n            ASSERT(typeof node.parent === 'object');\n\n            return node.parent;\n        };\n\n        this.getRelid = function (node) {\n            ASSERT(node.relid === null || typeof node.relid === 'string');\n\n            return node.relid;\n        };\n\n        this.getLevel = function (node) {\n            var level = 0;\n            while (node.parent !== null) {\n                ++level;\n                node = node.parent;\n            }\n            return level;\n        };\n\n        this.getRoot = function (node) {\n            while (node.parent !== null) {\n                node = node.parent;\n            }\n            return node;\n        };\n\n        this.getPath = function (node, base) {\n            if (node === null) {\n                return null;\n            }\n\n            var path = '';\n            while (node.relid !== null && node !== base) {\n                path = '/' + node.relid + path;\n                node = node.parent;\n            }\n            return path;\n        };\n\n        this.isValidPath = function (path) {\n            return typeof path === 'string' && (path === '' || path.charAt(0) === '/');\n        };\n\n        this.splitPath = function (path) {\n            ASSERT(self.isValidPath(path));\n\n            path = path.split('/');\n            path.splice(0, 1);\n\n            return path;\n        };\n\n        this.buildPath = function (path) {\n            ASSERT(path instanceof Array);\n\n            return path.length === 0 ? '' : '/' + path.join('/');\n        };\n\n        this.joinPaths = function (first, second) {\n            ASSERT(self.isValidPath(first) && self.isValidPath(second));\n\n            return first + second;\n        };\n\n        this.getCommonPathPrefixData = function (first, second) {\n            ASSERT(typeof first === 'string' && typeof second === 'string');\n\n            first = self.splitPath(first);\n            second = self.splitPath(second);\n\n            var common = [];\n            for (var i = 0; first[i] === second[i] && i < first.length; ++i) {\n                common.push(first[i]);\n            }\n\n            return {\n                common: self.buildPath(common),\n                first: self.buildPath(first.slice(i)),\n                firstLength: first.length - i,\n                second: self.buildPath(second.slice(i)),\n                secondLength: second.length - i\n            };\n        };\n\n        this.normalize = function (node) {\n            ASSERT(self.isValidNode(node));\n            // console.log('normalize start', printNode(getRoot(node)));\n\n            var parent;\n\n            if (node.children === null) {\n                ASSERT(node.age === CONSTANTS.MAX_AGE);\n\n                if (node.parent !== null) {\n                    parent = self.normalize(node.parent);\n\n                    var temp = __getChildNode(parent.children, node.relid);\n                    if (temp !== null) {\n                        // TODO: make the current node close to the returned one\n\n                        // console.log('normalize end1',\n                        // printNode(getRoot(temp)));\n                        return temp;\n                    }\n\n                    ASSERT(node.parent.children === null || __getChildNode(node.parent.children, node.relid) === null);\n                    ASSERT(__getChildNode(parent.children, node.relid) === null);\n\n                    node.parent = parent;\n                    parent.children[node.relid] = node;\n\n                    temp = __getChildData(parent.data, node.relid);\n                    if (!REGEXP.DB_HASH.test(temp) || temp !== __getChildData(node.data, ID_NAME)) {\n                        node.data = temp;\n                    }\n                } else {\n                    roots.push(node);\n                }\n\n                node.age = 0;\n                node.children = {};\n            } else if (node.age !== 0) {\n                parent = node;\n                do {\n                    parent.age = 0;\n                    parent = parent.parent;\n                } while (parent !== null && parent.age !== 0);\n            }\n\n            // console.log('normalize end2', printNode(getRoot(node)));\n            return node;\n        };\n\n        // ------- hierarchy\n\n        this.getAncestor = function (first, second) {\n            ASSERT(self.getRoot(first) === self.getRoot(second));\n\n            first = self.normalize(first);\n            second = self.normalize(second);\n\n            var a = [];\n            do {\n                a.push(first);\n                first = first.parent;\n            } while (first !== null);\n\n            var b = [];\n            do {\n                b.push(second);\n                second = second.parent;\n            } while (second !== null);\n\n            var i = a.length - 1;\n            var j = b.length - 1;\n            while (i !== 0 && j !== 0 && a[i - 1] === b[j - 1]) {\n                --i;\n                --j;\n            }\n\n            ASSERT(a[i] === b[j]);\n            return a[i];\n        };\n\n        this.isAncestor = function (node, ancestor) {\n            ASSERT(self.getRoot(node) === self.getRoot(ancestor));\n\n            node = self.normalize(node);\n            ancestor = self.normalize(ancestor);\n\n            do {\n                if (node === ancestor) {\n                    return true;\n                }\n\n                node = node.parent;\n            } while (node !== null);\n\n            return false;\n        };\n\n        this.createRoot = function () {\n            var root = {\n                parent: null,\n                relid: null,\n                age: 0,\n                children: {},\n                data: {\n                    _mutable: true\n                },\n                initial: {\n                    '': null\n                },\n                rootid: ++rootCounter\n            };\n            root.data[ID_NAME] = '';\n            roots.push(root);\n\n            __ageRoots();\n            return root;\n        };\n\n        this.getChild = function (node, relid) {\n            ASSERT(typeof relid === 'string' && relid !== ID_NAME);\n\n            node = self.normalize(node);\n\n            var child = __getChildNode(node.children, relid);\n            if (child !== null) {\n                return child;\n            }\n\n            child = {\n                parent: node,\n                relid: relid,\n                age: 0,\n                children: {},\n                data: __getChildData(node.data, relid)\n            };\n            node.children[relid] = child;\n\n            __ageRoots();\n            return child;\n        };\n\n        this.createChild = function (node, takenRelids) {\n            var minimumLength;\n\n            node = self.normalize(node);\n\n            if (typeof node.data !== 'object' || node.data === null) {\n                throw new Error('invalid node data');\n            }\n\n            minimumLength = this.getProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\n            return self.getChild(node, RANDOM.generateRelid(takenRelids || node.data, minimumLength));\n        };\n\n        // ------- data manipulation\n\n        this.isMutable = function (node) {\n            node = self.normalize(node);\n            return __isMutableData(node.data);\n        };\n\n        this.isEmpty = function (node) {\n            node = self.normalize(node);\n            if (typeof node.data !== 'object' || node.data === null) {\n                return false;\n            } else if (node.data === __getEmptyData()) {\n                return true;\n            }\n\n            return __isEmptyData(node.data);\n        };\n\n        this.mutate = function (node) {\n            ASSERT(self.isValidNode(node));\n\n            node = self.normalize(node);\n            var data = node.data;\n\n            if (typeof data !== 'object' || data === null) {\n                return false;\n            } else if (data[CONSTANTS.MUTABLE_PROPERTY] === true) {\n                return true;\n            }\n\n            // TODO: infinite cycle if MAX_MUTATE is smaller than depth!\n            // gmeConfig.storage.autoPersist is removed and always false\n            if (false && ++mutateCount > CONSTANTS.MAX_MUTATE) {\n                mutateCount = 0;\n\n                for (var i = 0; i < roots.length; ++i) {\n                    if (__isMutableData(roots[i].data)) {\n                        __saveData(roots[i].data, roots[i], '');\n                    }\n                }\n            }\n\n            if (node.parent !== null && !self.mutate(node.parent)) {\n                // this should never happen\n                return false;\n            }\n\n            var copy = __getEmptyData();\n\n            for (var key in data) {\n                copy[key] = data[key];\n            }\n            copy[CONSTANTS.MUTABLE_PROPERTY] = true;\n\n            if (typeof data[ID_NAME] === 'string') {\n                copy[ID_NAME] = '';\n            }\n\n            if (node.parent !== null) {\n                //inherited child doesn't have an entry in the parent as long as it has not been modified\n                ASSERT(node.parent.data[node.relid] === undefined ||\n                    __areEquivalent(__getChildData(node.parent.data, node.relid), node.data));\n                node.parent.data[node.relid] = copy;\n            }\n\n            node.data = copy;\n            return true;\n        };\n\n        this.getData = function (node) {\n            node = self.normalize(node);\n\n            ASSERT(!__isMutableData(node.data));\n            return node.data;\n        };\n\n        this.setData = function (node, data) {\n            ASSERT(data !== null && typeof data !== 'undefined');\n\n            node = self.normalize(node);\n            if (node.parent !== null) {\n                if (!self.mutate(node.parent)) {\n                    throw new Error('incorrect node data');\n                }\n\n                node.parent.data[node.relid] = data;\n            }\n\n            node.data = data;\n            __reloadChildrenData(node);\n        };\n\n        this.deleteData = function (node) {\n            node = self.normalize(node);\n\n            if (node.parent !== null) {\n                if (!self.mutate(node.parent)) {\n                    throw new Error('incorrect node data');\n                }\n\n                delete node.parent.data[node.relid];\n            }\n\n            var data = node.data;\n\n            node.data = __getEmptyData();\n            __reloadChildrenData(node);\n\n            return data;\n        };\n\n        this.copyData = function (node) {\n            node = self.normalize(node);\n\n            if (typeof node.data !== 'object' || node.data === null) {\n                return node.data;\n            }\n\n            // TODO: return immutable data without coping\n            return JSON.parse(JSON.stringify(node.data));\n        };\n\n        this.getProperty = function (node, name) {\n            ASSERT(typeof name === 'string' && name !== ID_NAME);\n\n            var data;\n            node = self.normalize(node);\n\n            if (typeof node.data === 'object' && node.data !== null) {\n                data = node.data[name];\n            }\n\n            // TODO: corerel uses getProperty to get the overlay content which can get mutable\n            // ASSERT(!__isMutableData(data));\n            return data;\n        };\n\n        this.setProperty = function (node, name, data) {\n            ASSERT(typeof name === 'string' && name !== ID_NAME);\n            ASSERT(!__isMutableData(data) /*&& data !== null*/ && data !== undefined);\n            //TODO is the 'null' really can be a value of a property???\n\n            node = self.normalize(node);\n            if (!self.mutate(node)) {\n                throw new Error('incorrect node data');\n            }\n\n            node.data[name] = data;\n\n            var child = __getChildNode(node.children, name);\n            if (child !== null) {\n                child.data = data;\n                __reloadChildrenData(child);\n            }\n        };\n\n        this.deleteProperty = function (node, name) {\n            ASSERT(typeof name === 'string' && name !== ID_NAME);\n\n            node = self.normalize(node);\n            if (!self.mutate(node)) {\n                throw new Error('incorrect node data');\n            }\n\n            delete node.data[name];\n\n            var child = __getChildNode(node.children, name);\n            if (child !== null) {\n                child.data = __getEmptyData();\n                __reloadChildrenData(child);\n            }\n        };\n\n        this.getKeys = function (node, predicate) {\n            var result;\n            node = self.normalize(node);\n\n            if (typeof node.data !== 'object' || node.data === null) {\n                return null;\n            }\n\n            result = this.getRawKeys(node.data, predicate);\n            return result;\n        };\n\n        this.getRawKeys = function (object, predicate) {\n            predicate = predicate || __noUnderscore;\n\n            var keys = Object.keys(object);\n\n            var i = keys.length;\n            while (--i >= 0 && !predicate(keys[i])) {\n                keys.pop();\n            }\n\n            while (--i >= 0) {\n                if (!predicate(keys[i])) {\n                    keys[i] = keys.pop();\n                }\n            }\n\n            return keys;\n        };\n\n        // ------- persistence\n\n        this.getHash = function (node) {\n            if (node === null) {\n                return null;\n            }\n\n            var hash;\n            node = self.normalize(node);\n            if (typeof node.data === 'object' && node.data !== null) {\n                hash = node.data[ID_NAME];\n            }\n\n            ASSERT(typeof hash === 'string' || hash === undefined);\n            return hash;\n        };\n\n        this.isHashed = function (node) {\n            node = self.normalize(node);\n            return typeof node.data === 'object' && node.data !== null && typeof node.data[ID_NAME] === 'string';\n        };\n\n        this.setHashed = function (node, hashed, noMutate) {\n            ASSERT(typeof hashed === 'boolean');\n\n            node = self.normalize(node);\n            if (!noMutate) {\n                if (!self.mutate(node)) {\n                    throw new Error('incorrect node data');\n                }\n            }\n\n            if (hashed) {\n                node.data[ID_NAME] = '';\n            } else {\n                delete node.data[ID_NAME];\n            }\n\n            ASSERT(node.children[ID_NAME] === undefined);\n        };\n\n        this.persist = function (node) {\n            var updated = false,\n                result;\n\n            node = self.normalize(node);\n\n            //currently there is no reason to call the persist on a non-root object\n            node = self.getRoot(node);\n\n            if (!__isMutableData(node.data)) {\n                return {rootHash: node.data[ID_NAME], objects: {}};\n            }\n\n            updated = __saveData(node.data, node, '');\n            if (updated !== __getEmptyData()) {\n                result = {};\n                result.objects = stackedObjects;\n                stackedObjects = {};\n                result.rootHash = node.data[ID_NAME];\n            } else {\n                result = {rootHash: node.data[ID_NAME], objects: {}};\n            }\n\n            return result;\n        };\n\n        this.loadRoot = function (hash) {\n            ASSERT(REGEXP.DB_HASH.test(hash));\n\n            return TASYNC.call(__loadRoot2, storage.loadObject(hash));\n        };\n\n        this.loadChild = function (node, relid) {\n            ASSERT(self.isValidNode(node));\n\n            node = self.getChild(node, relid);\n\n            if (typeof node.data === 'object') {\n                return node.data !== null ? node : null;\n            } else if (REGEXP.DB_HASH.test(node.data)) {\n                // TODO: this is a hack, we should avoid loading it multiple\n                // times\n                return TASYNC.call(__loadChild2, node, storage.loadObject(node.data));\n            } else {\n                return null;\n            }\n        };\n\n        this.getChildHash = function (node, relid) {\n            ASSERT(self.isValidNode(node));\n\n            node = self.getChild(node, relid);\n\n            if (typeof node.data === 'object') {\n                return node.data !== null ? self.getHash(node) : null;\n            } else if (REGEXP.DB_HASH.test(node.data)) {\n                // TODO: this is a hack, we should avoid loading it multiple\n                // times\n                return node.data;\n            } else {\n                return null;\n            }\n        };\n\n        this.loadByPath = function (node, path) {\n            ASSERT(self.isValidNode(node));\n            ASSERT(path === '' || path.charAt(0) === '/');\n\n            path = path.split('/');\n            return __loadDescendantByPath2(node, path, 1);\n        };\n\n        // ------- valid -------\n        this.isValidNode = function (node) {\n            try {\n                isValidNodeThrow(node);\n                return true;\n            } catch (error) {\n                logger.error(error.message, {stack: error.stack, node: node});\n                return false;\n            }\n        };\n\n        this.removeChildFromCache = function (node, relid) {\n            delete node.children[relid];\n\n            return node;\n        };\n    }\n\n    return CoreTree;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author mmaroti / https://github.com/mmaroti\n */\n\ndefine('common/core/metacore',[\n    'common/util/assert',\n    'common/core/tasync',\n    'common/util/canon',\n    'common/core/constants'\n], function (ASSERT, TASYNC, CANON, CONSTANTS) {\n    'use strict';\n\n    var MetaCore = function (innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized MetaCore');\n\n        //<editor-fold=Helper Functions>\n        function sameNode(nodeA, nodeB) {\n            if (self.getPath(nodeA) === self.getPath(nodeB)) {\n                return true;\n            }\n            return false;\n        }\n\n        function getMetaNode(node) {\n            return self.getChild(node, CONSTANTS.META_NODE);\n        }\n\n        function getMetaChildrenNode(node) {\n            return self.getChild(getMetaNode(node), CONSTANTS.META_CHILDREN);\n        }\n\n        function getMetaPointerNode(node, name) {\n            var meta = getMetaNode(node),\n                pointerNames = self.getPointerNames(meta) || [];\n            if (pointerNames.indexOf(name) !== -1) {\n                return self.getChild(meta, CONSTANTS.META_POINTER_PREFIX + name);\n            }\n            return null;\n        }\n\n        function metaPointerNode(node, name) {\n            //this function always gives back a node, use this if you just want to create the node as well\n            self.setPointer(getMetaNode(node), name, null);\n            return self.getChild(getMetaNode(node), CONSTANTS.META_POINTER_PREFIX + name);\n        }\n\n        function getMetaAspectsNode(node) {\n            return self.getChild(getMetaNode(node), CONSTANTS.META_ASPECTS);\n        }\n\n        function getMetaAspectNode(node, name) {\n            var aspectNode = getMetaAspectsNode(node),\n                names = self.getPointerNames(aspectNode) || [];\n            if (names.indexOf(name) !== -1) {\n                return self.getChild(aspectNode, CONSTANTS.META_ASPECT_PREFIX + name);\n            }\n            return null;\n        }\n\n        function metaAspectNode(node, name) {\n            //this function always gives back a node, use this if you just want to create the node as well\n            var aspectNode = self.getChild(getMetaNode(node), CONSTANTS.META_ASPECTS);\n\n            self.setPointer(aspectNode, name, null);\n            return self.getChild(aspectNode, CONSTANTS.META_ASPECT_PREFIX + name);\n        }\n\n        function getMetaObjectDiff(bigger, smaller) {\n            //TODO this is a specific diff calculation for META rule JSONs\n            var diff = {},\n                names, i,\n                itemedElementDiff = function (bigItem, smallItem) {\n                    var diffItems = {},\n                        diff, i, index, names;\n                    for (i = 0; i < bigItem.items.length; i++) {\n                        if (smallItem.items.indexOf(bigItem.items[i]) === -1) {\n                            diffItems[bigItem.items[i]] = true;\n                        }\n                    }\n                    names = Object.keys(diffItems);\n                    for (i = 0; i < names.length; i++) {\n                        diff = diff || {items: [], minItems: [], maxItems: []};\n                        index = bigItem.items.indexOf(names[i]);\n                        diff.items.push(bigItem.items[index]);\n                        diff.minItems.push(bigItem.minItems[index]);\n                        diff.maxItems.push(bigItem.maxItems[index]);\n\n                    }\n                    if (bigItem.min && ((smallItem.min && bigItem.min !== smallItem.min) || !smallItem.min)) {\n                        diff = diff || {};\n                        diff.min = bigItem.min;\n                    }\n                    if (bigItem.max && ((smallItem.max && bigItem.max !== smallItem.max) || !smallItem.max)) {\n                        diff = diff || {};\n                        diff.max = bigItem.max;\n                    }\n                    return diff || {};\n                };\n            //attributes\n            if (smaller.attributes) {\n                names = Object.keys(bigger.attributes);\n                for (i = 0; i < names.length; i++) {\n                    if (smaller.attributes[names[i]]) {\n                        //they both have the attribute - if it differs we keep the whole of the bigger\n                        if (CANON.stringify(smaller.attributes[names[i]]) !==\n                            CANON.stringify(bigger.attributes[names[i]])) {\n\n                            diff.attributes = diff.attributes || {};\n                            diff.attributes[names[i]] = bigger.attributes[names[i]];\n                        }\n                    } else {\n                        diff.attributes = diff.attributes || {};\n                        diff.attributes[names[i]] = bigger.attributes[names[i]];\n                    }\n                }\n            } else if (bigger.attributes) {\n                diff.attributes = bigger.attributes;\n            }\n            //children\n            if (smaller.children) {\n                diff.children = itemedElementDiff(bigger.children, smaller.children);\n                if (Object.keys(diff.children).length < 1) {\n                    delete diff.children;\n                }\n            } else if (bigger.children) {\n                diff.children = bigger.children;\n            }\n            //pointers\n            if (smaller.pointers) {\n                diff.pointers = {};\n                names = Object.keys(bigger.pointers);\n                for (i = 0; i < names.length; i++) {\n                    if (smaller.pointers[names[i]]) {\n                        diff.pointers[names[i]] = itemedElementDiff(bigger.pointers[names[i]],\n                            smaller.pointers[names[i]]);\n                        if (Object.keys(diff.pointers[names[i]]).length < 1) {\n                            delete diff.pointers[names[i]];\n                        }\n                    } else {\n                        diff.pointers[names[i]] = bigger.pointers[names[i]];\n                    }\n                }\n            } else if (bigger.pointers) {\n                diff.pointers = bigger.pointers;\n            }\n            if (Object.keys(diff.pointers).length < 1) {\n                delete diff.pointers;\n            }\n            //aspects\n            if (smaller.aspects) {\n                diff.aspects = {};\n                names = Object.keys(bigger.aspects);\n                for (i = 0; i < names.length; i++) {\n                    if (smaller.aspects[names[i]]) {\n                        smaller.aspects[names[i]] = smaller.aspects[names[i]].sort();\n                        bigger.aspects[names[i]] = bigger.aspects[names[i]].sort();\n                        if (bigger.aspects[names[i]].length > smaller.aspects[names[i]].length) {\n                            diff.aspects[names[i]] = bigger.aspects[names[i]].slice(smaller.aspects[names[i]].length);\n                        }\n                    } else {\n                        diff.aspects[names[i]] = bigger.aspects[names[i]];\n                    }\n                }\n            } else if (bigger.aspects) {\n                diff.aspects = bigger.aspects;\n            }\n\n            if (Object.keys(diff.aspects).length < 1) {\n                delete diff.aspects;\n            }\n            return diff;\n        }\n\n        //type related extra query functions\n        function isOnMetaSheet(node) {\n            //MetaAspectSet\n            var sets = self.isMemberOf(node);\n\n            if (sets && sets[''] && sets[''].indexOf(CONSTANTS.META_SET_NAME) !== -1) {\n                return true;\n            }\n            return false;\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.isTypeOf = function (node, typeNode) {\n            while (node) {\n                if (sameNode(node, typeNode)) {\n                    return true;\n                }\n                node = self.getBase(node);\n            }\n            return false;\n        };\n\n        this.isValidChildOf = function (node, parentNode) {\n            var validChildTypePaths = self.getMemberPaths(getMetaChildrenNode(parentNode), CONSTANTS.SET_ITEMS) || [];\n            while (node) {\n                if (validChildTypePaths.indexOf(self.getPath(node)) !== -1) {\n                    return true;\n                }\n                node = self.getBase(node);\n            }\n            return false;\n        };\n\n        this.getValidPointerNames = function (node) {\n            var metaDefNode = getMetaNode(node),\n                validNames = self.getPointerNames(metaDefNode) || [],\n                i,\n                validPointerNames = [],\n                metaPointerNode, max;\n\n            for (i = 0; i < validNames.length; i++) {\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\n                max = self.getAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\n                if (max === 1) {\n                    //TODO Specify what makes something a pointer and what a set???\n                    //TODO Can you extend a pointer to a set????\n                    validPointerNames.push(validNames[i]);\n                }\n            }\n\n            return validPointerNames;\n        };\n\n        this.getOwnValidPointerNames = function (node) {\n            var metaDefNode = getMetaNode(node),\n                validNames = self.getOwnPointerNames(metaDefNode) || [],\n                i,\n                validPointerNames = [],\n                metaPointerNode, max;\n\n            for (i = 0; i < validNames.length; i++) {\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\n                max = self.getOwnAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\n                if (max === 1) {\n                    //TODO Specify what makes something a pointer and what a set???\n                    //TODO Can you extend a pointer to a set????\n                    validPointerNames.push(validNames[i]);\n                }\n            }\n\n            return validPointerNames;\n        };\n\n        this.getValidSetNames = function (node) {\n            var metaDefNode = getMetaNode(node),\n                validNames = self.getPointerNames(metaDefNode) || [],\n                i,\n                validSetNames = [],\n                metaPointerNode, max;\n\n            for (i = 0; i < validNames.length; i++) {\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\n                max = self.getAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\n\n                // FIXME: max seems to always be undefined - there is no such attribute on the set definitions\n                if (max === undefined || max === -1 || max > 1) {\n                    //TODO specify what makes something a pointer and what a set???\n                    //TODO can you extend a pointer to a set????\n                    validSetNames.push(validNames[i]);\n                }\n            }\n\n            return validSetNames;\n        };\n\n        this.getOwnValidSetNames = function (node) {\n            var metaDefNode = getMetaNode(node),\n                validNames = self.getOwnPointerNames(metaDefNode) || [],\n                i,\n                validSetNames = [],\n                metaPointerNode, max;\n\n            for (i = 0; i < validNames.length; i++) {\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\n                max = self.getOwnAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\n\n                // FIXME: max seems to always be undefined - there is no such attribute on the set definitions\n                if (max === undefined || max === -1 || max > 1) {\n                    //TODO specify what makes something a pointer and what a set???\n                    //TODO can you extend a pointer to a set????\n                    validSetNames.push(validNames[i]);\n                }\n            }\n\n            return validSetNames;\n        };\n\n        this.isValidTargetOf = function (node, source, name) {\n            var pointerMetaNode = getMetaPointerNode(source, name);\n\n            if (pointerMetaNode) {\n                var validTargetTypePaths = self.getMemberPaths(pointerMetaNode, CONSTANTS.SET_ITEMS) || [];\n                while (node) {\n                    if (validTargetTypePaths.indexOf(self.getPath(node)) !== -1) {\n                        return true;\n                    }\n                    node = self.getBase(node);\n                }\n            }\n            return false;\n        };\n\n        this.getValidAttributeNames = function (node) {\n            return self.getAttributeNames(getMetaNode(node)) || [];\n        };\n\n        this.getOwnValidAttributeNames = function (node) {\n            return self.getOwnAttributeNames(getMetaNode(node)) || [];\n        };\n\n        this.isValidAttributeValueOf = function (node, name, value) {\n            var typedValue;\n\n            if (self.getValidAttributeNames(node).indexOf(name) === -1) {\n                return false;\n            }\n            var meta = self.getAttribute(getMetaNode(node), name);\n\n            if (meta.enum && meta.enum instanceof Array) {\n                return meta.enum.indexOf(value) !== -1; //TODO should we check type beforehand?\n            }\n\n            switch (meta.type) {\n                case CONSTANTS.ATTRIBUTE_TYPES.BOOLEAN:\n                    if (value === true || value === false) {\n                        return true;\n                    }\n                    break;\n                case CONSTANTS.ATTRIBUTE_TYPES.STRING:\n                    if (typeof value === 'string') {\n                        if (meta.regexp) {\n                            return (new RegExp(meta.regexp).test(value));\n                        }\n                        return true;\n                    }\n                    break;\n                case CONSTANTS.ATTRIBUTE_TYPES.ASSET:\n                    if (typeof value === 'string') {\n                        return true;\n                    }\n                    break;\n                case CONSTANTS.ATTRIBUTE_TYPES.INTEGER:\n                    typedValue = parseInt(value);\n                    if (!isNaN(typedValue) && parseFloat(value) === typedValue) {\n                        if ((typeof meta.min !== 'number' || typedValue >= meta.min) &&\n                            (typeof meta.max !== 'number' || typedValue <= meta.max)) {\n                            return true;\n                        }\n                        return false;\n                    }\n                    break;\n                case CONSTANTS.ATTRIBUTE_TYPES.FLOAT:\n                    typedValue = parseFloat(value);\n                    if (!isNaN(typedValue)) {\n                        if ((typeof meta.min !== 'number' || typedValue >= meta.min) &&\n                            (typeof meta.max !== 'number' || typedValue <= meta.max)) {\n                            return true;\n                        }\n                        return false;\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            return false;\n        };\n\n        this.getValidAspectNames = function (node) {\n            return self.getPointerNames(getMetaAspectsNode(node)) || [];\n        };\n\n        this.getOwnValidAspectNames = function (node) {\n            return self.getOwnPointerNames(getMetaAspectsNode(node)) || [];\n        };\n\n        this.getAspectMeta = function (node, name) {\n            return self.getMemberPaths(getMetaAspectNode(node, name), CONSTANTS.SET_ITEMS);\n        };\n\n        //additional meta functions for getting meta definitions\n        this.getJsonMeta = function (node) {\n            var meta = {children: {}, attributes: {}, pointers: {}, aspects: {}, constraints: {}},\n                tempNode,\n                names,\n                pointer,\n                i, j;\n\n            //fill children part\n            tempNode = getMetaChildrenNode(node);\n\n            meta.children.minItems = [];\n            meta.children.maxItems = [];\n            meta.children.items = self.getMemberPaths(tempNode, CONSTANTS.SET_ITEMS);\n            for (i = 0; i < meta.children.items.length; i++) {\n                meta.children.minItems.push(\n                    self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\n                        CONSTANTS.SET_ITEMS_MIN) || -1);\n\n                meta.children.maxItems.push(\n                    self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\n                        CONSTANTS.SET_ITEMS_MAX) || -1);\n            }\n            meta.children.min = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MIN);\n            meta.children.max = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MAX);\n\n            //attributes\n            names = self.getValidAttributeNames(node);\n            for (i = 0; i < names.length; i++) {\n                meta.attributes[names[i]] = self.getAttribute(getMetaNode(node), names[i]);\n            }\n\n            //pointers\n            names = self.getPointerNames(getMetaNode(node));\n            for (i = 0; i < names.length; i++) {\n                tempNode = getMetaPointerNode(node, names[i]);\n                pointer = {};\n\n                pointer.items = self.getMemberPaths(tempNode, CONSTANTS.SET_ITEMS);\n                pointer.min = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MIN);\n                pointer.max = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MAX);\n                pointer.minItems = [];\n                pointer.maxItems = [];\n\n                for (j = 0; j < pointer.items.length; j++) {\n                    pointer.minItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\n                            CONSTANTS.SET_ITEMS_MIN) || -1);\n                    pointer.maxItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\n                            CONSTANTS.SET_ITEMS_MAX) || -1);\n\n                }\n\n                meta.pointers[names[i]] = pointer;\n            }\n\n            //aspects\n            names = self.getValidAspectNames(node);\n\n            for (i = 0; i < names.length; i++) {\n                tempNode = getMetaAspectNode(node, names[i]);\n                meta.aspects[names[i]] = self.getMemberPaths(tempNode, CONSTANTS.SET_ITEMS) || [];\n            }\n\n            //constraints\n            names = self.getConstraintNames(node);\n            for (i = 0; i < names.length; i++) {\n                meta.constraints[names[i]] = self.getConstraint(node, names[i]);\n            }\n\n            return meta;\n        };\n\n        //this.getOwnJsonMeta = function (node) {\n        //    var base = self.getBase(node),\n        //        baseMeta = base ? self.getJsonMeta(base) : {},\n        //        meta = self.getJsonMeta(node);\n        //\n        //    return getMetaObjectDiff(meta, baseMeta);\n        //};\n\n        this.getOwnJsonMeta = function (node) {\n            var meta = {children: {}, attributes: {}, pointers: {}, aspects: {}, constraints: {}},\n                tempNode,\n                metaNode = getMetaNode(node),\n                childrenNode = self.getChild(metaNode, CONSTANTS.META_CHILDREN),\n                aspectsNode = self.getChild(metaNode, CONSTANTS.META_ASPECTS),\n                names,\n                pointer,\n                i, j;\n\n            //fill children part\n\n            meta.children.minItems = [];\n            meta.children.maxItems = [];\n            meta.children.items = self.getOwnMemberPaths(childrenNode, CONSTANTS.SET_ITEMS);\n            if (meta.children.items.length > 0) {\n                for (i = 0; i < meta.children.items.length; i++) {\n                    meta.children.minItems.push(\n                        self.getMemberAttribute(childrenNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\n                            CONSTANTS.SET_ITEMS_MIN) || -1);\n\n                    meta.children.maxItems.push(\n                        self.getMemberAttribute(childrenNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\n                            CONSTANTS.SET_ITEMS_MAX) || -1);\n                }\n                names = self.getOwnAttributeNames(childrenNode);\n                if (names.indexOf('min') !== -1) {\n                    meta.children.min = self.getAttribute(childrenNode, CONSTANTS.SET_ITEMS_MIN);\n                }\n                if (names.indexOf('max') !== -1) {\n                    meta.children.max = self.getAttribute(childrenNode, CONSTANTS.SET_ITEMS_MAX);\n                }\n            } else {\n                delete meta.children;\n            }\n            //attributes\n            names = self.getOwnAttributeNames(metaNode) || [];\n            if (names.length > 0) {\n                for (i = 0; i < names.length; i++) {\n                    meta.attributes[names[i]] = self.getOwnAttribute(metaNode, names[i]);\n                }\n            } else {\n                delete meta.attributes;\n            }\n\n            //pointers\n            names = self.getOwnPointerNames(metaNode);\n            if (names.length > 0) {\n                for (i = 0; i < names.length; i++) {\n                    tempNode = self.getChild(metaNode, CONSTANTS.META_POINTER_PREFIX + names[i]);\n                    pointer = {};\n\n                    pointer.items = self.getOwnMemberPaths(tempNode, CONSTANTS.SET_ITEMS);\n                    pointer.min = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MIN);\n                    pointer.max = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MAX);\n                    pointer.minItems = [];\n                    pointer.maxItems = [];\n\n                    for (j = 0; j < pointer.items.length; j++) {\n                        pointer.minItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\n                                CONSTANTS.SET_ITEMS_MIN) || -1);\n                        pointer.maxItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\n                                CONSTANTS.SET_ITEMS_MAX) || -1);\n\n                    }\n\n                    meta.pointers[names[i]] = pointer;\n                }\n            } else {\n                delete meta.pointers;\n            }\n\n            //aspects\n            names = self.getOwnPointerNames(aspectsNode) || [];\n\n            if (names.length > 0) {\n                for (i = 0; i < names.length; i++) {\n                    tempNode = self.getChild(aspectsNode, CONSTANTS.META_ASPECT_PREFIX + names[i]);\n                    meta.aspects[names[i]] = self.getOwnMemberPaths(tempNode, CONSTANTS.SET_ITEMS) || [];\n                }\n            } else {\n                delete meta.aspects;\n            }\n\n            //constraints\n            names = self.getOwnConstraintNames(node);\n\n            if (names.length > 0) {\n                for (i = 0; i < names.length; i++) {\n                    meta.constraints[names[i]] = self.getConstraint(node, names[i]);\n                }\n            } else {\n                delete meta.constraints;\n            }\n\n            return meta;\n        };\n\n        this.clearMetaRules = function (node) {\n            self.deleteNode(getMetaNode(node), true);\n        };\n\n        this.setAttributeMeta = function (node, name, value) {\n            ASSERT(typeof value === 'object' && typeof name === 'string' && name);\n            var defaultValue;\n\n            if (value.hasOwnProperty('default')) {\n                defaultValue = value.default;\n                value = JSON.parse(JSON.stringify(value));\n                delete value.default;\n            }\n\n            self.setAttribute(getMetaNode(node), name, value);\n\n            if (typeof defaultValue !== 'undefined') {\n                self.setAttribute(node, name, defaultValue);\n            }\n        };\n\n        this.delAttributeMeta = function (node, name) {\n            self.delAttribute(getMetaNode(node), name);\n        };\n\n        this.getAttributeMeta = function (node, name) {\n            return self.getAttribute(getMetaNode(node), name);\n        };\n\n        this.getValidChildrenPaths = function (node) {\n            return self.getMemberPaths(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS);\n        };\n\n        this.getOwnValidChildrenPaths = function (node) {\n            return self.getOwnMemberPaths(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS);\n        };\n\n        this.getChildrenMeta = function (node) {\n            var cMetaNode = getMetaChildrenNode(node),\n                childrenMeta = {\n                    min: self.getAttribute(cMetaNode, CONSTANTS.SET_ITEMS_MIN),\n                    max: self.getAttribute(cMetaNode, CONSTANTS.SET_ITEMS_MAX)\n                },\n                paths = self.getMemberPaths(cMetaNode, CONSTANTS.SET_ITEMS),\n                i;\n\n            for (i = 0; i < paths.length; i += 1) {\n                childrenMeta[paths[i]] = {\n                    min: self.getMemberAttribute(cMetaNode, CONSTANTS.SET_ITEMS, paths[i], CONSTANTS.SET_ITEMS_MIN),\n                    max: self.getMemberAttribute(cMetaNode, CONSTANTS.SET_ITEMS, paths[i], CONSTANTS.SET_ITEMS_MAX)\n                };\n            }\n\n            if (paths.length > 0) {\n                return childrenMeta;\n            }\n\n            return null;\n        };\n\n        this.setChildMeta = function (node, child, min, max) {\n            self.addMember(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, child);\n            min = min || -1;\n            max = max || -1;\n            self.setMemberAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, self.getPath(child),\n                CONSTANTS.SET_ITEMS_MIN, min);\n            self.setMemberAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, self.getPath(child),\n                CONSTANTS.SET_ITEMS_MAX, max);\n        };\n\n        this.delChildMeta = function (node, childPath) {\n            self.delMember(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, childPath);\n        };\n\n        this.setChildrenMetaLimits = function (node, min, max) {\n            if (min) {\n                self.setAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS_MIN, min);\n            }\n            if (max) {\n                self.setAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS_MAX, max);\n            }\n        };\n\n        this.setPointerMetaTarget = function (node, name, target, min, max) {\n            self.addMember(metaPointerNode(node, name), CONSTANTS.SET_ITEMS, target);\n            min = min || -1;\n            self.setMemberAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS, self.getPath(target),\n                CONSTANTS.SET_ITEMS_MIN, min);\n            max = max || -1;\n            self.setMemberAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS, self.getPath(target),\n                CONSTANTS.SET_ITEMS_MAX, max);\n        };\n\n        this.delPointerMetaTarget = function (node, name, targetPath) {\n            var metaNode = getMetaPointerNode(node, name);\n            if (metaNode) {\n                self.delMember(metaNode, CONSTANTS.SET_ITEMS, targetPath);\n            }\n        };\n\n        this.setPointerMetaLimits = function (node, name, min, max) {\n            if (min) {\n                self.setAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS_MIN, min);\n            }\n            if (max) {\n                self.setAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS_MAX, max);\n            }\n        };\n\n        this.delPointerMeta = function (node, name) {\n            self.deleteNode(metaPointerNode(node, name), true);\n            self.deletePointer(getMetaNode(node), name);\n        };\n\n        this.getPointerMeta = function (node, name) {\n            var pointerMeta = {},\n                members,\n                member,\n                i,\n                pointerMetaNode = getMetaPointerNode(node, name);\n\n            if (pointerMetaNode === null) {\n                return null;\n            }\n\n            //min\n            pointerMeta.min = self.getAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS_MIN);\n            if (pointerMeta.min === undefined) {\n                pointerMeta.min = -1;\n            }\n\n            //max\n            pointerMeta.max = self.getAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS_MAX);\n            if (pointerMeta.max === undefined) {\n                pointerMeta.max = -1;\n            }\n\n            members = self.getMemberPaths(pointerMetaNode, CONSTANTS.SET_ITEMS);\n            for (i = 0; i < members.length; i++) {\n                member = {\n                    min: self.getMemberAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS, members[i],\n                        CONSTANTS.SET_ITEMS_MIN),\n                    max: self.getMemberAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS, members[i],\n                        CONSTANTS.SET_ITEMS_MAX)\n                };\n                if (member.min === undefined) {\n                    member.min = -1;\n                }\n                if (member.max === undefined) {\n                    member.max = -1;\n                }\n\n                pointerMeta[members[i]] = member;\n            }\n\n            return pointerMeta;\n        };\n\n        this.getValidTargetPaths = function (node, name) {\n            var pointerNode = getMetaPointerNode(node, name);\n            if (pointerNode === null) {\n                return [];\n            }\n            return self.getMemberPaths(pointerNode, CONSTANTS.SET_ITEMS);\n        };\n\n        this.getOwnValidTargetPaths = function (node, name) {\n            var pointerNode = getMetaPointerNode(node, name);\n            if (pointerNode === null) {\n                return [];\n            }\n            return self.getOwnMemberPaths(pointerNode, CONSTANTS.SET_ITEMS);\n        };\n\n        this.setAspectMetaTarget = function (node, name, target) {\n            self.addMember(metaAspectNode(node, name), CONSTANTS.SET_ITEMS, target);\n        };\n\n        this.delAspectMetaTarget = function (node, name, targetPath) {\n            var metaNode = getMetaAspectNode(node, name);\n            if (metaNode) {\n                self.delMember(metaNode, CONSTANTS.SET_ITEMS, targetPath);\n            }\n        };\n\n        this.delAspectMeta = function (node, name) {\n            self.deleteNode(metaAspectNode(node, name), true);\n            self.deletePointer(getMetaAspectsNode(node), name);\n        };\n\n        this.getBaseType = function (node) {\n            //TODO this functions now uses the fact that we think of META as the MetaSetContainer of the ROOT\n            while (node) {\n                if (isOnMetaSheet(node)) {\n                    return node;\n                }\n                node = self.getBase(node);\n            }\n            return null;\n        };\n\n        this.isInstanceOf = function (node, name) {\n            //TODO this is name based query - doesn't check the node's own name\n            node = self.getBase(node);\n            while (node) {\n                if (self.getAttribute(node, 'name') === name) {\n                    return true;\n                }\n                node = self.getBase(node);\n            }\n\n            return false;\n        };\n        //</editor-fold>\n    };\n\n    return MetaCore;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/coretreeloader',['common/util/assert', 'common/core/tasync'], function (ASSERT, TASYNC) {\n    'use strict';\n\n    var CoreTreeLoader = function (innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized CoreTreeLoader');\n\n        //<editor-fold=Helper Functions>\n        function loadSubTree(root, own) {\n            var loadSubTrees = function (nodes) {\n                    for (var i = 0; i < nodes.length; i++) {\n                        nodes[i] = self.loadSubTree(nodes[i], own);\n                    }\n                    return TASYNC.lift(nodes);\n\n                },\n                childLoading = own === true ? self.loadOwnChildren : self.loadChildren;\n            return TASYNC.call(function (children) {\n                if (children.length < 1) {\n                    return [root];\n                } else {\n                    return TASYNC.call(function (subArrays) {\n                        var nodes = [],\n                            i;\n                        for (i = 0; i < subArrays.length; i++) {\n                            nodes = nodes.concat(subArrays[i]);\n                        }\n                        nodes.unshift(root);\n                        return nodes;\n                    }, loadSubTrees(children));\n                }\n            }, childLoading(root));\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.loadTree = function (rootHash) {\n            return TASYNC.call(self.loadSubTree, self.loadRoot(rootHash));\n        };\n\n        this.loadSubTree = function (root) {\n            return loadSubTree(root, false);\n        };\n\n        this.loadOwnSubTree = function (root) {\n            return loadSubTree(root, true);\n        };\n\n        function traverse(root, options, visitFn, callback) {\n            ASSERT(self.isValidNode(root) && typeof visitFn === 'function' && typeof callback === 'function');\n\n            var loadQueue = [],\n                ongoingVisits = 0,\n                error = null,\n                projectRoot = self.getRoot(root),\n                timerId,\n                addToQueue,\n                loadByPath = TASYNC.unwrap(self.loadByPath),\n                extendLoadQueue = function (node) {\n                    var keys = self.getChildrenPaths(node),\n                        i;\n\n                    if (self.getPath(node) !== self.getPath(root)) {\n                        for (i = 0; i < keys.length; i += 1) {\n                            addToQueue.call(loadQueue, keys[i]);\n                        }\n                    }\n\n                },\n                nodeLoaded = function (err, node) {\n                    error = error || err;\n                    if (!err && node) {\n                        extendLoadQueue(node);\n                    }\n                    visitFn(node, visitNext);\n                },\n                visitNext = function (err) {\n                    error = error || err;\n                    ongoingVisits -= 1;\n                    if (error && options.stopOnError) {\n                        loadQueue = [];\n                    }\n                };\n\n            options = options || {};\n            options.maxParallelLoad = options.maxParallelLoad || 100; //the amount of nodes we preload\n            options.excludeRoot = options.excludeRoot === true || false;\n            options.stopOnError = options.stopOnError === false ? false : true;\n\n            if (options.order === 'DFS') {\n                addToQueue = loadQueue.unshift;\n            } else {\n                addToQueue = loadQueue.push;\n            }\n\n            if (options.maxParallelLoad < 1 || options.order === 'DFS') {\n                options.maxParallelLoad = 1;\n            }\n\n            loadQueue = self.getChildrenPaths(root);\n\n            if (options.excludeRoot === false) {\n                loadQueue.unshift(self.getPath(root));\n            }\n\n            timerId = setInterval(function () {\n                if (loadQueue.length === 0 && ongoingVisits === 0) {\n                    clearInterval(timerId);\n                    callback(error);\n                } else if (loadQueue.length > 0 && ongoingVisits < options.maxParallelLoad &&\n                    (!error || options.stopOnError === false)) {\n                    ongoingVisits += 1;\n                    loadByPath(projectRoot, loadQueue.shift(), nodeLoaded);\n                }\n            }, 0);\n\n        }\n\n        this.traverse = TASYNC.wrap(traverse);\n        //</editor-fold>\n    };\n\n    return CoreTreeLoader;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n// TODO: This files needs refactoring\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/corediff',['common/util/canon',\n    'common/core/tasync',\n    'common/util/assert',\n    'common/regexp',\n    'common/util/random',\n    'common/core/constants',\n], function (CANON, TASYNC, ASSERT, REGEXP, RANDOM, CONSTANTS) {\n    'use strict';\n\n    function DiffCore(innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key,\n            //FIXME: There shouldn't be state.\n            _yetToCompute = {},\n            _DIFF = {},\n            _needChecking = true,\n            _rounds = 0,\n            _concatResult,\n            _diffMoves = {},\n            _conflictItems = [],\n            _conflictMine,\n            _conflictTheirs,\n            _concatBase,\n            _concatExtension,\n            _concatBaseRemovals,\n            _concatMoves;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized DiffCore');\n\n        //<editor-fold=Helper Functions>\n        function normalize(obj) {\n            if (!obj) {\n                return obj;\n            }\n            var keys = Object.keys(obj),\n                i;\n            if (JSON.stringify(obj.set) === JSON.stringify({})) {\n                delete obj.set;\n            }\n\n            for (i = 0; i < keys.length; i++) {\n                /*if (Array.isArray(obj[keys[i]])) {\n                 if (obj[keys[i]].length === 0) {\n                 delete obj[keys[i]];\n                 }*/\n                if (Array.isArray(obj[keys[i]])) {\n                    //do nothing, leave the array as is\n                } else if (obj[keys[i]] === undefined) {\n                    delete obj[keys[i]]; //there cannot be undefined in the object\n                } else if (keys[i] === 'set') {\n                    //do nothing with set as it can include empty set's as well\n                } else if (typeof obj[keys[i]] === 'object') {\n                    normalize(obj[keys[i]]);\n                    if (obj[keys[i]] && Object.keys(obj[keys[i]]).length === 0) {\n                        delete obj[keys[i]];\n                    }\n                }\n            }\n            keys = Object.keys(obj);\n            if (keys.length === 1) {\n                //it only has the GUID, so the node doesn't changed at all\n                delete obj.guid;\n            }\n        }\n\n        function attrDiff(source, target) {\n            var sNames = self.getOwnAttributeNames(source),\n                tNames = self.getOwnAttributeNames(target),\n                i,\n                diff = {};\n\n            for (i = 0; i < sNames.length; i++) {\n                if (tNames.indexOf(sNames[i]) === -1) {\n                    diff[sNames[i]] = CONSTANTS.TO_DELETE_STRING;\n                }\n            }\n\n            for (i = 0; i < tNames.length; i++) {\n                if (self.getAttribute(source, tNames[i]) === undefined) {\n                    diff[tNames[i]] = self.getAttribute(target, tNames[i]);\n                } else {\n                    if (CANON.stringify(self.getAttribute(source, tNames[i])) !==\n                        CANON.stringify(self.getAttribute(target, tNames[i]))) {\n\n                        diff[tNames[i]] = self.getAttribute(target, tNames[i]);\n                    }\n                }\n            }\n\n            return diff;\n        }\n\n        function regDiff(source, target) {\n            var sNames = self.getOwnRegistryNames(source),\n                tNames = self.getOwnRegistryNames(target),\n                i,\n                diff = {};\n\n            for (i = 0; i < sNames.length; i++) {\n                if (tNames.indexOf(sNames[i]) === -1) {\n                    diff[sNames[i]] = CONSTANTS.TO_DELETE_STRING;\n                }\n            }\n\n            for (i = 0; i < tNames.length; i++) {\n                if (self.getRegistry(source, tNames[i]) === undefined) {\n                    diff[tNames[i]] = self.getRegistry(target, tNames[i]);\n                } else {\n                    if (CANON.stringify(self.getRegistry(source, tNames[i])) !==\n                        CANON.stringify(self.getRegistry(target, tNames[i]))) {\n\n                        diff[tNames[i]] = self.getRegistry(target, tNames[i]);\n                    }\n                }\n            }\n\n            return diff;\n        }\n\n        function childrenDiff(source, target) {\n            var sRelids = self.getChildrenRelids(source, true),\n                tRelids = self.getChildrenRelids(target, true),\n                tHashes = self.getChildrenHashes(target),\n                sHashes = self.getChildrenHashes(source),\n                relid,\n                diff = {added: [], removed: []};\n\n            for (relid in sRelids) {\n                if (tRelids.hasOwnProperty(relid) === false) {\n                    diff.removed.push({relid: relid, hash: sHashes[relid]});\n                }\n            }\n\n            for (relid in tRelids) {\n                if (sRelids.hasOwnProperty(relid) === false) {\n                    diff.added.push({relid: relid, hash: tHashes[relid]});\n                }\n            }\n\n            return diff;\n\n        }\n\n        function pointerDiff(source, target) {\n            var getPointerData = function (node) {\n                    var data = {},\n                        names = self.getPointerNames(node),\n                        i;\n                    for (i = 0; i < names.length; i++) {\n                        data[names[i]] = self.getPointerPath(node, names[i]);\n                    }\n                    return data;\n                },\n                sPointer = getPointerData(source),\n                tPointer = getPointerData(target);\n\n            if (CANON.stringify(sPointer) !== CANON.stringify(tPointer)) {\n                return {source: sPointer, target: tPointer};\n            }\n            return {};\n        }\n\n        function setDiff(source, target) {\n            var getSetData = function (node) {\n                    var data = {},\n                        names, targets, keys, i, j, k;\n\n                    names = self.getSetNames(node);\n                    for (i = 0; i < names.length; i++) {\n                        data[names[i]] = {};\n                        targets = self.getMemberPaths(node, names[i]);\n                        for (j = 0; j < targets.length; j++) {\n                            data[names[i]][targets[j]] = {attr: {}, reg: {}};\n                            keys = self.getMemberOwnAttributeNames(node, names[i], targets[j]);\n                            for (k = 0; k < keys.length; k++) {\n                                data[names[i]][targets[j]].attr[keys[k]] = self.getMemberAttribute(node,\n                                    names[i], targets[j], keys[k]);\n                            }\n                            keys = self.getMemberRegistryNames(node, names[i], targets[j]);\n                            for (k = 0; k < keys.length; k++) {\n                                data[names[i]][targets[j]].reg[keys[k]] = self.getMemberRegistry(node,\n                                    names[i], targets[j], keys[k]);\n                            }\n                        }\n                    }\n\n                    return data;\n\n                },\n                sSet = getSetData(source),\n                tSet = getSetData(target);\n\n            if (CANON.stringify(sSet) !== CANON.stringify(tSet)) {\n                return {source: sSet, target: tSet};\n            }\n            return {};\n        }\n\n        function ovrDiff(source, target) {\n            var getOvrData = function (node) {\n                    var paths, names, i, j,\n                        ovr = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {},\n                        data = {},\n                        base = self.getPath(node);\n\n                    paths = Object.keys(ovr);\n                    for (i = 0; i < paths.length; i++) {\n                        if (paths[i].indexOf('_') === -1) {\n                            data[paths[i]] = {};\n                            names = Object.keys(ovr[paths[i]]);\n                            for (j = 0; j < names.length; j++) {\n                                if (ovr[paths[i]][names[j]] === '/_nullptr') {\n                                    data[paths[i]][names[j]] = null;\n                                } else if (names[j].slice(-4) !== '-inv' && names[j].indexOf('_') === -1 &&\n                                    ovr[paths[i]][names[j]].indexOf('_') === -1) {\n                                    data[paths[i]][names[j]] = self.joinPaths(base, ovr[paths[i]][names[j]]);\n                                }\n                            }\n                        }\n                    }\n                    return data;\n                },\n                sOvr = getOvrData(source),\n                tOvr = getOvrData(target);\n\n            if (CANON.stringify(sOvr) !== CANON.stringify(tOvr)) {\n                return {source: sOvr, target: tOvr};\n            }\n            return {};\n        }\n\n        function metaDiff(source, target) {\n            //TODO jsonMeta format should be changed in all places!!!\n            var convertJsonMeta = function (jsonMeta) {\n                    var i, j, names, itemsObject;\n                    //children\n                    if (jsonMeta.children) {\n                        itemsObject = jsonMeta.children;\n                        for (i = 0; i < itemsObject.items.length; i += 1) {\n                            itemsObject[itemsObject.items[i]] = {\n                                min: itemsObject.minItems[i],\n                                max: itemsObject.maxItems[i]\n                            };\n                        }\n                        delete itemsObject.items;\n                        delete itemsObject.minItems;\n                        delete itemsObject.maxItems;\n                    }\n                    //ptr\n                    if (jsonMeta.pointers) {\n                        names = Object.keys(jsonMeta.pointers);\n\n                        for (j = 0; j < names.length; j += 1) {\n                            itemsObject = jsonMeta.pointers[names[j]];\n                            for (i = 0; i < itemsObject.items.length; i += 1) {\n                                itemsObject[itemsObject.items[i]] = {\n                                    min: itemsObject.minItems[i],\n                                    max: itemsObject.maxItems[i]\n                                };\n                            }\n                            delete itemsObject.items;\n                            delete itemsObject.minItems;\n                            delete itemsObject.maxItems;\n                        }\n                    }\n                    return jsonMeta;\n                },\n                sMeta = convertJsonMeta(self.getOwnJsonMeta(source)),\n                tMeta = convertJsonMeta(self.getOwnJsonMeta(target));\n            if (CANON.stringify(sMeta) !== CANON.stringify(tMeta)) {\n                return {source: sMeta, target: tMeta};\n            }\n            return {};\n        }\n\n        function combineMoveIntoMetaDiff(diff) {\n            var keys = Object.keys(diff),\n                i;\n            for (i = 0; i < keys.length; i++) {\n                if (_diffMoves[keys[i]]) {\n                    diff[_diffMoves[keys[i]]] = diff[keys[i]];\n                    delete diff[keys[i]];\n                } else if (typeof diff[keys[i]] === 'object') {\n                    combineMoveIntoMetaDiff(diff[keys[i]]);\n                }\n            }\n        }\n\n        function combineMoveIntoPointerDiff(diff) {\n            var keys = Object.keys(diff),\n                i;\n            for (i = 0; i < keys.length; i++) {\n                if (_diffMoves[diff[keys[i]]]) {\n                    diff[keys[i]] = _diffMoves[diff[keys[i]]];\n                }\n            }\n        }\n\n        function finalizeDiff() {\n            finalizeMetaDiff(_DIFF);\n            finalizePointerDiff(_DIFF);\n            finalizeSetDiff(_DIFF);\n            normalize(_DIFF);\n        }\n\n        function finalizeMetaDiff(diff) {\n            //at this point _DIFF is ready and the _diffMoves is complete...\n            var relids = getDiffChildrenRelids(diff),\n                i, sMeta, tMeta;\n            if (diff.meta) {\n                sMeta = diff.meta.source || {};\n                tMeta = diff.meta.target || {};\n                combineMoveIntoMetaDiff(sMeta);\n                diff.meta = diffObjects(sMeta, tMeta);\n            }\n            for (i = 0; i < relids.length; i++) {\n                finalizeMetaDiff(diff[relids[i]]);\n            }\n        }\n\n        function finalizePointerDiff(diff) {\n            var relids = getDiffChildrenRelids(diff),\n                i, sPointer, tPointer;\n            if (diff.pointer) {\n                sPointer = diff.pointer.source || {};\n                tPointer = diff.pointer.target || {};\n                /*if(diff.movedFrom && !sPointer.base && tPointer.base){\n                 delete tPointer.base;\n                 }*/\n                combineMoveIntoPointerDiff(sPointer);\n                diff.pointer = diffObjects(sPointer, tPointer);\n            }\n            for (i = 0; i < relids.length; i++) {\n                finalizePointerDiff(diff[relids[i]]);\n            }\n        }\n\n        function finalizeSetDiff(diff) {\n            var relids = getDiffChildrenRelids(diff),\n                i, sSet, tSet;\n            if (diff.set) {\n                sSet = diff.set.source || {};\n                tSet = diff.set.target || {};\n                combineMoveIntoMetaDiff(sSet);\n                diff.set = diffObjects(sSet, tSet);\n            }\n            for (i = 0; i < relids.length; i++) {\n                finalizeSetDiff(diff[relids[i]]);\n            }\n        }\n\n        function isEmptyNodeDiff(diff) {\n            if (\n                Object.keys(diff.children || {}).length > 0 ||\n                Object.keys(diff.attr || {}).length > 0 ||\n                Object.keys(diff.reg || {}).length > 0 ||\n                Object.keys(diff.pointer || {}).length > 0 ||\n                Object.keys(diff.set || {}).length > 0 ||\n                diff.meta\n            ) {\n                return false;\n            }\n            return true;\n        }\n\n        function getPathOfDiff(diff, path) {\n            var pathArray = path.split('/'),\n                i;\n            pathArray.shift();\n            for (i = 0; i < pathArray.length; i++) {\n                diff[pathArray[i]] = diff[pathArray[i]] || {};\n                diff = diff[pathArray[i]];\n            }\n\n            return diff;\n        }\n\n        function extendDiffWithOvr(diff, oDiff) {\n            var i, paths, names, j, tDiff,\n                onlyBaseRemoved = function (path) {\n                    var sCopy = JSON.parse(JSON.stringify(oDiff.source[path] || {})),\n                        tCopy = JSON.parse(JSON.stringify(oDiff.target[path] || {}));\n\n                    if (tCopy['base']) {\n                        return false;\n                    }\n\n                    delete sCopy['base'];\n\n                    return CANON.stringify(sCopy) === CANON.stringify(tCopy);\n                };\n\n            //first extend sources\n            paths = Object.keys(oDiff.source || {});\n            for (i = 0; i < paths.length; i++) {\n                tDiff = getPathOfDiff(diff, paths[i]);\n                if (tDiff.removed !== true && !onlyBaseRemoved(paths[i])) {\n                    tDiff.pointer = tDiff.pointer || {source: {}, target: {}};\n                    tDiff.pointer.source = tDiff.pointer.source || {};\n                    tDiff.pointer.target = tDiff.pointer.target || {};\n                    names = Object.keys(oDiff.source[paths[i]]);\n                    for (j = 0; j < names.length; j++) {\n                        tDiff.pointer.source[names[j]] = oDiff.source[paths[i]][names[j]];\n                    }\n                }\n            }\n            //then targets\n            paths = Object.keys(oDiff.target || {});\n            for (i = 0; i < paths.length; i++) {\n                tDiff = getPathOfDiff(diff, paths[i]);\n                if (tDiff.removed !== true && !onlyBaseRemoved(paths[i])) {\n                    tDiff.pointer = tDiff.pointer || {source: {}, target: {}};\n                    names = Object.keys(oDiff.target[paths[i]]);\n                    for (j = 0; j < names.length; j++) {\n                        tDiff.pointer.target[names[j]] = oDiff.target[paths[i]][names[j]];\n                    }\n                }\n            }\n        }\n\n        function updateDiff(sourceRoot, targetRoot) {\n            var diff = self.nodeDiff(sourceRoot, targetRoot) || {},\n                oDiff = ovrDiff(sourceRoot, targetRoot),\n                getChild = function (childArray, relid) {\n                    for (var i = 0; i < childArray.length; i++) {\n                        if (self.getRelid(childArray[i]) === relid) {\n                            return childArray[i];\n                        }\n                    }\n                    return null;\n                };\n            return TASYNC.call(function (sChildren, tChildren) {\n                ASSERT(sChildren.length >= 0 && tChildren.length >= 0);\n                function compareRelids(a, b) {\n                    var aRel = self.getRelid(a),\n                        bRel = self.getRelid(b);\n\n                    if (aRel < bRel) {\n                        return -1;\n                    } else if (aRel > bRel) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                }\n\n                sChildren.sort(compareRelids);\n                tChildren.sort(compareRelids);\n\n                var i, child, done, tDiff, guid, base,\n                    childComputationFinished = function (cDiff, relid/*, d*/) {\n                        diff[relid] = cDiff;\n                        return null;\n                    };\n\n                tDiff = diff.children ? diff.children.removed || [] : [];\n                for (i = 0; i < tDiff.length; i++) {\n                    diff.childrenListChanged = true;\n                    child = getChild(sChildren, tDiff[i].relid);\n                    if (child) {\n                        guid = self.getGuid(child);\n                        diff[tDiff[i].relid] = {guid: guid, removed: true, hash: self.getHash(child)};\n                        _yetToCompute[guid] = _yetToCompute[guid] || {};\n                        _yetToCompute[guid].from = child;\n                        _yetToCompute[guid].fromExpanded = false;\n                    }\n                }\n\n                tDiff = diff.children ? diff.children.added || [] : [];\n                for (i = 0; i < tDiff.length; i++) {\n                    diff.childrenListChanged = true;\n                    child = getChild(tChildren, tDiff[i].relid);\n                    if (child) {\n                        guid = self.getGuid(child);\n                        base = self.getBase(child);\n                        diff[tDiff[i].relid] = {\n                            guid: guid,\n                            removed: false,\n                            hash: self.getHash(child),\n                            pointer: {source: {}, target: {base: base === null ? null : self.getPath(base)}}\n                        };\n                        _yetToCompute[guid] = _yetToCompute[guid] || {};\n                        _yetToCompute[guid].to = child;\n                        _yetToCompute[guid].toExpanded = false;\n                    }\n                }\n\n                for (i = 0; i < tChildren.length; i++) {\n                    child = getChild(sChildren, self.getRelid(tChildren[i]));\n                    if (child && self.getHash(tChildren[i]) !== self.getHash(child)) {\n                        done = TASYNC.call(childComputationFinished,\n                            updateDiff(child, tChildren[i]), self.getRelid(child), done);\n                    }\n                }\n                return TASYNC.call(function () {\n                    delete diff.children;\n                    extendDiffWithOvr(diff, oDiff);\n\n                    normalize(diff);\n\n                    if (Object.keys(diff).length > 0) {\n                        diff.guid = self.getGuid(targetRoot);\n                        diff.hash = self.getHash(targetRoot);\n                        diff.oGuids = gatherObstructiveGuids(targetRoot);\n                        return TASYNC.call(function (finalDiff) {\n                            return finalDiff;\n                        }, fillMissingGuid(targetRoot, sourceRoot, '', diff));\n                    } else {\n                        return diff;\n                    }\n\n                }, done);\n            }, self.loadChildren(sourceRoot), self.loadChildren(targetRoot));\n        }\n\n        function gatherObstructiveGuids(node) {\n            var result = {},\n                putParents = function (n) {\n                    while (n) {\n                        result[self.getGuid(n)] = true;\n                        n = self.getParent(n);\n                    }\n                };\n            while (node) {\n                putParents(node);\n                node = self.getBase(node);\n            }\n            return result;\n        }\n\n        function fillMissingGuid(root, sRoot, path, diff) {\n            var relids = getDiffChildrenRelids(diff),\n                i,\n                done,\n                subComputationFinished = function (cDiff, relid) {\n                    diff[relid] = cDiff;\n                    return null;\n                };\n\n            for (i = 0; i < relids.length; i++) {\n                done = TASYNC.call(subComputationFinished,\n                    fillMissingGuid(root, sRoot, path + '/' + relids[i], diff[relids[i]]), relids[i]);\n            }\n\n            return TASYNC.call(function () {\n                // if (diff.guid) {\n                //     return diff;\n                // } else {\n                //     return TASYNC.call(function (child) {\n                //         diff.guid = self.getGuid(child);\n                //         diff.hash = self.getHash(child);\n                //         diff.oGuids = gatherObstructiveGuids(child);\n                //         return diff;\n                //     }, self.loadByPath(root, path));\n                // }\n                return TASYNC.call(function (child, sChild) {\n                    if (!child) {\n                        child = sChild;\n                    }\n                    diff.guid = self.getGuid(child);\n                    diff.hash = self.getHash(child);\n                    diff.oGuids = gatherObstructiveGuids(child);\n                    return diff;\n                }, self.loadByPath(root, path), self.loadByPath(sRoot, path));\n            }, done);\n        }\n\n        function expandDiff(root, isDeleted) {\n            var diff = {\n                guid: self.getGuid(root),\n                hash: self.getHash(root),\n                removed: isDeleted === true\n            };\n            return TASYNC.call(function (children) {\n                var guid;\n                for (var i = 0; i < children.length; i++) {\n                    guid = self.getGuid(children[i]);\n                    diff[self.getRelid(children[i])] = {\n                        guid: guid,\n                        hash: self.getHash(children[i]),\n                        removed: isDeleted === true\n                    };\n\n                    if (isDeleted) {\n                        _yetToCompute[guid] = _yetToCompute[guid] || {};\n                        _yetToCompute[guid].from = children[i];\n                        _yetToCompute[guid].fromExpanded = false;\n                    } else {\n                        _yetToCompute[guid] = _yetToCompute[guid] || {};\n                        _yetToCompute[guid].to = children[i];\n                        _yetToCompute[guid].toExpanded = false;\n                    }\n                }\n                return diff;\n            }, self.loadChildren(root));\n        }\n\n        function insertIntoDiff(path, diff) {\n            var pathArray = path.split('/'),\n                relid = pathArray.pop(),\n                sDiff = _DIFF,\n                i;\n            pathArray.shift();\n            for (i = 0; i < pathArray.length; i++) {\n                sDiff = sDiff[pathArray[i]];\n            }\n            //sDiff[relid] = diff;\n            sDiff[relid] = mergeObjects(sDiff[relid], diff);\n        }\n\n        function diffObjects(source, target) {\n            var diff = {},\n                sKeys = Object.keys(source),\n                tKeys = Object.keys(target),\n                tDiff, i;\n            for (i = 0; i < sKeys.length; i++) {\n                if (tKeys.indexOf(sKeys[i]) === -1) {\n                    diff[sKeys[i]] = CONSTANTS.TO_DELETE_STRING;\n                }\n            }\n            for (i = 0; i < tKeys.length; i++) {\n                if (sKeys.indexOf(tKeys[i]) === -1) {\n                    diff[tKeys[i]] = target[tKeys[i]];\n                } else {\n                    if (typeof target[tKeys[i]] === typeof source[tKeys[i]] &&\n                        typeof target[tKeys[i]] === 'object' &&\n                        (target[tKeys[i]] !== null && source[tKeys[i]] !== null)) {\n                        tDiff = diffObjects(source[tKeys[i]], target[tKeys[i]]);\n                        if (Object.keys(tDiff).length > 0) {\n                            diff[tKeys[i]] = tDiff;\n                        }\n                    } else if (source[tKeys[i]] !== target[tKeys[i]]) {\n                        diff[tKeys[i]] = target[tKeys[i]];\n                    }\n                }\n            }\n            return diff;\n        }\n\n        function mergeObjects(source, target) {\n            var merged = {},\n                sKeys = Object.keys(source),\n                tKeys = Object.keys(target),\n                i;\n            for (i = 0; i < sKeys.length; i++) {\n                merged[sKeys[i]] = source[sKeys[i]];\n            }\n            for (i = 0; i < tKeys.length; i++) {\n                if (sKeys.indexOf(tKeys[i]) === -1) {\n                    merged[tKeys[i]] = target[tKeys[i]];\n                } else {\n                    if (typeof target[tKeys[i]] === typeof source[tKeys[i]] &&\n                        typeof target[tKeys[i]] === 'object' && !(target instanceof Array)) {\n                        merged[tKeys[i]] = mergeObjects(source[tKeys[i]], target[tKeys[i]]);\n                    } else {\n                        merged[tKeys[i]] = target[tKeys[i]];\n                    }\n                }\n            }\n\n            return merged;\n        }\n\n        function removePathFromDiff(diff, path) {\n            var relId, i, pathArray;\n            if (path === '') {\n                diff = null;\n            } else {\n                pathArray = path.split('/');\n                pathArray.shift();\n                relId = pathArray.pop();\n                for (i = 0; i < pathArray.length; i++) {\n                    diff = diff[pathArray[i]];\n                }\n                delete diff[relId];\n            }\n        }\n\n        function shrinkDiff(rootDiff) {\n            var _shrink = function (diff) {\n                if (diff) {\n                    var keys = getDiffChildrenRelids(diff),\n                        i;\n                    if (typeof diff.movedFrom === 'string') {\n                        removePathFromDiff(rootDiff, diff.movedFrom);\n                    }\n\n                    if (diff.removed !== false || typeof diff.movedFrom === 'string') {\n                        delete diff.hash;\n                    }\n\n                    if (diff.removed === true) {\n                        for (i = 0; i < keys.length; i++) {\n                            delete diff[keys[i]];\n                        }\n                    } else {\n\n                        for (i = 0; i < keys.length; i++) {\n                            _shrink(diff[keys[i]]);\n                        }\n                    }\n                }\n            };\n            _shrink(rootDiff);\n        }\n\n        function checkRound() {\n            var guids = Object.keys(_yetToCompute),\n                done, ytc,\n                i,\n                computingMove = function (mDiff, info) {\n                    mDiff.guid = self.getGuid(info.from);\n                    mDiff.movedFrom = self.getPath(info.from);\n                    mDiff.ooGuids = gatherObstructiveGuids(info.from);\n                    _diffMoves[self.getPath(info.from)] = self.getPath(info.to);\n                    insertAtPath(_DIFF, self.getPath(info.to), mDiff);\n                    return null;\n                },\n                expandFrom = function (mDiff, info) {\n                    mDiff.hash = self.getHash(info.from);\n                    mDiff.removed = true;\n                    insertIntoDiff(self.getPath(info.from), mDiff);\n                    return null;\n                },\n                expandTo = function (mDiff, info) {\n                    if (!mDiff.hash) {\n                        mDiff.hash = self.getHash(info.to);\n                    }\n                    mDiff.removed = false;\n                    insertIntoDiff(self.getPath(info.to), mDiff);\n                    return null;\n                };\n\n            if (_needChecking !== true || guids.length < 1) {\n                shrinkDiff(_DIFF);\n                finalizeDiff();\n                return JSON.parse(JSON.stringify(_DIFF));\n            }\n\n            _needChecking = false;\n            for (i = 0; i < guids.length; i++) {\n                ytc = _yetToCompute[guids[i]];\n                if (ytc.from && ytc.to) {\n                    //move\n                    _needChecking = true;\n                    delete _yetToCompute[guids[i]];\n                    done = TASYNC.call(computingMove, updateDiff(ytc.from, ytc.to), ytc);\n                } else {\n                    if (ytc.from && ytc.fromExpanded === false) {\n                        //expand from\n                        ytc.fromExpanded = true;\n                        _needChecking = true;\n                        done = TASYNC.call(expandFrom, expandDiff(ytc.from, true), ytc);\n                    } else if (ytc.to && ytc.toExpanded === false) {\n                        //expand to\n                        ytc.toExpanded = true;\n                        _needChecking = true;\n                        done = TASYNC.call(expandTo, expandDiff(ytc.to, false), ytc);\n                    }\n                }\n            }\n            return TASYNC.call(checkRound, done);\n        }\n\n        function hasRealChange(diffNode) {\n            var keys = Object.keys(diffNode || {}),\n                searchedKeywords = {\n                    hash: true,\n                    attr: true,\n                    reg: true,\n                    pointer: true,\n                    set: true,\n                    meta: true,\n                    movedFrom: true,\n                    removed: true\n                },\n                i;\n\n            for (i = 0; i < keys.length; i += 1) {\n                if (searchedKeywords[keys[i]]) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function getDiffChildrenRelids(diff) {\n            var keys = Object.keys(diff || {}),\n                i,\n                filteredKeys = [],\n                forbiddenWords = {\n                    guid: true,\n                    hash: true,\n                    attr: true,\n                    reg: true,\n                    pointer: true,\n                    set: true,\n                    meta: true,\n                    removed: true,\n                    movedFrom: true,\n                    childrenListChanged: true,\n                    oGuids: true,\n                    ooGuids: true,\n                    min: true,\n                    max: true\n                };\n            for (i = 0; i < keys.length; i++) {\n                if (!forbiddenWords[keys[i]]) {\n                    filteredKeys.push(keys[i]);\n                }\n            }\n            return filteredKeys;\n        }\n\n        function getMoveSources(diff, path, toFrom, fromTo) {\n            var relids = getDiffChildrenRelids(diff),\n                i;\n\n            for (i = 0; i < relids.length; i++) {\n                getMoveSources(diff[relids[i]], path + '/' + relids[i], toFrom, fromTo);\n            }\n\n            if (typeof diff.movedFrom === 'string') {\n                toFrom[path] = diff.movedFrom;\n                fromTo[diff.movedFrom] = path;\n            }\n        }\n\n        function getParentPath(path) {\n            path = path.split('/');\n            path.splice(-1, 1);\n            return path.join('/');\n        }\n\n        function fixCollision(path, relid, diffBase, diffExtension) {\n            //a generic approach, to check if both diff has the same path\n            // but for a different node\n            //there is three types of path equality:\n            //1. same guids -> same node\n            //2. both was moved -> different nodes\n            //3. one was moved and the other is created ->different nodes (here we always have to generate\n            // new relid to the moved one)\n            var i,\n                keys = getDiffChildrenRelids(diffBase),\n                globalDiff,\n                newRelid,\n                newPath,\n                nodeDiff,\n                relids,\n                dst2src,\n                src2dst,\n                relidObj = {},\n                parent;\n\n            if (diffBase.guid !== diffExtension.guid &&\n                (typeof diffBase.guid === 'string' && typeof diffExtension.guid === 'string')) {\n                if (diffBase.movedFrom && diffExtension.movedFrom) {\n                    //relocate the extension\n                    globalDiff = _concatExtension;\n                    nodeDiff = diffExtension;\n                    dst2src = _concatMoves.getExtensionSourceFromDestination;\n                    src2dst = _concatMoves.getExtensionDestinationFromSource;\n                } else if (diffBase.movedFrom && diffExtension.removed === false) {\n                    globalDiff = _concatBase;\n                    nodeDiff = diffBase;\n                    dst2src = _concatMoves.getBaseSourceFromDestination;\n                    src2dst = _concatMoves.getBaseDestinationFromSource;\n                } else if (diffExtension.movedFrom && diffBase.removed === false) {\n                    globalDiff = _concatExtension;\n                    nodeDiff = diffExtension;\n                    dst2src = _concatMoves.getExtensionSourceFromDestination;\n                    src2dst = _concatMoves.getExtensionDestinationFromSource;\n                } else {\n                    throw new Error('there is a guid mismatch among the two diffs: ' +\n                        diffBase.guid + ' vs ' + diffExtension.guid);\n                }\n\n                relids = getDiffChildrenRelids(getPathOfDiff(_concatBase, getParentPath(path)))\n                    .concat(getDiffChildrenRelids(getPathOfDiff(_concatExtension, getParentPath(path))));\n\n                relidObj = {};\n                for (i = 0; i < relids.length; i += 1) {\n                    relidObj[relids[i]] = {};\n                }\n                // TODO: Could this lead to collisions on bases/instances?\n                newRelid = RANDOM.generateRelid(relidObj);\n                newPath = getParentPath(path) + '/' + newRelid;\n\n                //now the actual place switching\n                parent = getPathOfDiff(globalDiff, getParentPath(path));\n                parent[newRelid] = nodeDiff;\n                delete parent[relid];\n                dst2src[newPath] = dst2src[path];\n                delete dst2src[path];\n                src2dst[dst2src[newPath]] = newPath;\n            }\n\n            //recursive calls - only if there were no replacement due to collision\n            for (i = 0; i < keys.length; i += 1) {\n                if (diffExtension[keys[i]]) {\n                    fixCollision(path + '/' + keys[i], keys[i], diffBase[keys[i]], diffExtension[keys[i]]);\n                }\n            }\n        }\n\n        function getAncestorPath(onePath, otherPath) {\n            var ancestorPath = '',\n                onePathArray = onePath.split('/'),\n                otherPathArray = otherPath.split('/'),\n                i = 0;\n            onePathArray.shift();\n            otherPathArray.shift();\n            if (onePathArray.length > 0 && otherPathArray.length > 0) {\n                while (i < onePathArray.length && onePathArray[i] === otherPathArray[i]) {\n                    ancestorPath += '/' + onePathArray[i];\n                    i += 1;\n                }\n            }\n            return ancestorPath;\n        }\n\n        function setBaseOfNewNode(root, nodePath, basePath) {\n            var ancestorPath = getAncestorPath(nodePath, basePath);\n            return TASYNC.call(function (node) {\n                var sourcePath = nodePath.substr(ancestorPath.length),\n                    targetPath = basePath.substr(ancestorPath.length);\n                innerCore.overlayInsert(node, sourcePath, 'base', targetPath);\n            }, self.loadByPath(root, ancestorPath));\n        }\n\n        function getOrderedRelids(diffObject) {\n            //those nodes that were changing relid as a result of move should be handled last\n            var keys = getDiffChildrenRelids(diffObject),\n                i,\n                ordered = [],\n                sourceRelid;\n            for (i = 0; i < keys.length; i += 1) {\n                if (diffObject[keys[i]].movedFrom) {\n                    sourceRelid = diffObject[keys[i]].movedFrom;\n                    sourceRelid = sourceRelid.split('/');\n                    sourceRelid = sourceRelid[sourceRelid.length - 1];\n                    if (sourceRelid !== keys[i]) {\n                        ordered.push(keys[i]);\n                    } else {\n                        ordered.unshift(keys[i]);\n                    }\n                } else {\n                    ordered.unshift(keys[i]);\n                }\n            }\n            return ordered;\n        }\n\n        function makeInitialContainmentChanges(node, diff) {\n            var relids = getOrderedRelids(diff),\n                i, done, child, moved,\n                moving = function (n, di, r, p, m, a/*, d*/) {\n                    var nRelid;\n                    if (m === true) {\n                        n = self.moveNode(n, p);\n                        nRelid = self.getRelid(n);\n\n                        if (r !== nRelid) {\n                            //we have to make additional changes to our move table\n                            diff[nRelid] = JSON.parse(JSON.stringify(diff[r]));\n                            delete diff[r];\n                        }\n                    }\n                    return makeInitialContainmentChanges(n, di, a);\n                };\n\n            for (i = 0; i < relids.length; i++) {\n                moved = false;\n                if (diff[relids[i]].movedFrom) {\n                    //moved node\n                    moved = true;\n                    child = self.loadByPath(self.getRoot(node), diff[relids[i]].movedFrom);\n                    done = TASYNC.call(moving, child, diff[relids[i]], relids[i], node, moved, done);\n                } else if (diff[relids[i]].removed === false) {\n                    //added node\n                    if (diff[relids[i]].hash) {\n                        self.setProperty(node, relids[i], diff[relids[i]].hash);\n                        node.childrenRelids = null;\n                    }\n                } else {\n                    //simple node\n                    child = self.loadChild(node, relids[i]);\n                    done = TASYNC.call(moving, child, diff[relids[i]], relids[i], node, moved, done);\n                }\n            }\n\n            return TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n        }\n\n        function setBaseRelationsOfNewNodes(root, path, diff, added) {\n            var relids = getOrderedRelids(diff),\n                i,\n                children = [],\n                newNode = false;\n\n            for (i = 0; i < relids.length; i += 1) {\n                if ((diff[relids[i]].removed === false || added)\n                    && diff[relids[i]].pointer && diff[relids[i]].pointer.base) {\n                    newNode = true;\n                    children[i] = TASYNC.join(\n                        setBaseOfNewNode(root, path + '/' + relids[i], diff[relids[i]].pointer.base),\n                        setBaseRelationsOfNewNodes(root, path + '/' + relids[i], diff[relids[i]], added || newNode)\n                    );\n                } else {\n                    children[i] = TASYNC.call(\n                        setBaseRelationsOfNewNodes, root, path + '/' + relids[i], diff[relids[i]], added\n                    );\n                }\n            }\n\n            return TASYNC.lift(children);\n        }\n\n        function applyNodeChange(root, path, nodeDiff) {\n            //check for move\n            var node;\n\n            node = self.loadByPath(root, path);\n\n            return TASYNC.call(function (n) {\n                var done,\n                    relids = getDiffChildrenRelids(nodeDiff),\n                    i;\n                if (n === null) {\n                    logger.warn('Missing node [' + path + '] during patch application. ' +\n                        'Could be a conflicting conflict resolution.');\n                    return;\n                }\n                if (nodeDiff.removed === true) {\n                    self.deleteNode(n);\n                    return;\n                }\n                applyAttributeChanges(n, nodeDiff.attr || {});\n                applyRegistryChanges(n, nodeDiff.reg || {});\n                done = applyPointerChanges(n, nodeDiff);\n                done = TASYNC.call(applySetChanges, n, nodeDiff.set || {}, done);\n                if (nodeDiff.meta) {\n                    delete nodeDiff.meta.empty;\n                    done = TASYNC.call(applyMetaChanges, n, nodeDiff.meta, done);\n                }\n                for (i = 0; i < relids.length; i++) {\n                    done = TASYNC.call(function () {\n                        return null;\n                    }, applyNodeChange(root, path + '/' + relids[i], nodeDiff[relids[i]]), done);\n                    // done = TASYNC.join(done, applyNodeChange(root, path + '/' + relids[i], nodeDiff[relids[i]]));\n                }\n                /*TASYNC.call(function (d) {\n                 return done;\n                 }, done);*/\n\n                //we should check for possible guid change and restore the expected guid\n                if (self.getGuid(n) !== nodeDiff.guid && nodeDiff.guid) {\n                    done = TASYNC.call(function () {\n                        return null;\n                    }, self.setGuid(n, nodeDiff.guid), done);\n                }\n                return done;\n            }, node);\n        }\n\n        function applyAttributeChanges(node, attrDiff) {\n            var i, keys;\n            keys = Object.keys(attrDiff);\n            for (i = 0; i < keys.length; i++) {\n                if (attrDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    self.delAttribute(node, keys[i]);\n                } else {\n                    self.setAttribute(node, keys[i], attrDiff[keys[i]]);\n                }\n            }\n        }\n\n        function applyRegistryChanges(node, regDiff) {\n            var i, keys;\n            keys = Object.keys(regDiff);\n            for (i = 0; i < keys.length; i++) {\n                if (regDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    self.delRegistry(node, keys[i]);\n                } else {\n                    self.setRegistry(node, keys[i], regDiff[keys[i]]);\n                }\n            }\n        }\n\n        function setPointer(node, name, target) {\n            var targetNode;\n            if (target === null) {\n                targetNode = null;\n            } else {\n                targetNode = self.loadByPath(self.getRoot(node), target);\n            }\n            return TASYNC.call(function (t) {\n                //TODO watch if handling of base changes!!!\n                self.setPointer(node, name, t);\n                return;\n            }, targetNode);\n        }\n\n        function applyPointerChanges(node, diff) {\n            var done,\n                pointerDiff = diff.pointer || {},\n                keys = Object.keys(pointerDiff),\n                i;\n            for (i = 0; i < keys.length; i++) {\n                if (pointerDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    self.deletePointer(node, keys[i]);\n                } else if (diff.removed !== false || keys[i] !== 'base') {\n                    done = setPointer(node, keys[i], pointerDiff[keys[i]]);\n                }\n            }\n\n            return TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n\n        }\n\n        function addMember(node, name, target, data) {\n            var memberAttrSetting = function (diff) {\n                    var keys = self.getMemberOwnAttributeNames(node, name, target),\n                        i;\n                    for (i = 0; i < keys.length; i++) {\n                        self.delMemberAttribute(node, name, target, keys[i]);\n                    }\n\n                    keys = Object.keys(diff);\n                    for (i = 0; i < keys.length; i++) {\n                        self.setMemberAttribute(node, name, target, keys[i], diff[keys[i]]);\n                    }\n                },\n                memberRegSetting = function (diff) {\n                    var keys = self.getMemberOwnRegistryNames(node, name, target),\n                        i;\n                    for (i = 0; i < keys.length; i++) {\n                        self.delMemberRegistry(node, name, target, keys[i]);\n                    }\n\n                    keys = Object.keys(diff);\n                    for (i = 0; i < keys.length; i++) {\n                        self.setMemberRegistry(node, name, target, keys[i], diff[keys[i]]);\n                    }\n                };\n            return TASYNC.call(function (t) {\n                self.addMember(node, name, t);\n                memberAttrSetting(data.attr || {});\n                memberRegSetting(data.reg || {});\n                return;\n            }, self.loadByPath(self.getRoot(node), target));\n        }\n\n        function applySetChanges(node, setDiff) {\n            var done,\n                setNames = Object.keys(setDiff),\n                elements, i, j;\n            for (i = 0; i < setNames.length; i++) {\n                if (setDiff[setNames[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    self.deleteSet(node, setNames[i]);\n                } else {\n                    self.createSet(node, setNames[i]);\n                    elements = Object.keys(setDiff[setNames[i]]);\n                    for (j = 0; j < elements.length; j++) {\n                        if (setDiff[setNames[i]][elements[j]] === CONSTANTS.TO_DELETE_STRING) {\n                            self.delMember(node, setNames[i], elements[j]);\n                        } else {\n                            done = addMember(node, setNames[i], elements[j], setDiff[setNames[i]][elements[j]]);\n                        }\n                    }\n                }\n            }\n\n            return TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n\n        }\n\n        function applyMetaAttributes(node, metaAttrDiff) {\n            var i, keys, newValue;\n            if (metaAttrDiff === CONSTANTS.TO_DELETE_STRING) {\n                //we should delete all MetaAttributes\n                keys = self.getValidAttributeNames(node);\n                for (i = 0; i < keys.length; i++) {\n                    self.delAttributeMeta(node, keys[i]);\n                }\n            } else {\n                keys = Object.keys(metaAttrDiff);\n                for (i = 0; i < keys.length; i++) {\n                    if (metaAttrDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                        self.delAttributeMeta(node, keys[i]);\n                    } else {\n                        newValue = jsonConcat(self.getAttributeMeta(node, keys[i]) || {}, metaAttrDiff[keys[i]]);\n                        self.setAttributeMeta(node, keys[i], newValue);\n                    }\n                }\n            }\n        }\n\n        function applyMetaConstraints(node, metaConDiff) {\n            var keys, i;\n            if (metaConDiff === CONSTANTS.TO_DELETE_STRING) {\n                //remove all constraints\n                keys = self.getConstraintNames(node);\n                for (i = 0; i < keys.length; i++) {\n                    self.delConstraint(node, keys[i]);\n                }\n            } else {\n                keys = Object.keys(metaConDiff);\n                for (i = 0; i < keys.length; i++) {\n                    if (metaConDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                        self.delConstraint(node, keys[i]);\n                    } else {\n                        self.setConstraint(node, keys[i], jsonConcat(self.getConstraint(node, keys[i]) || {},\n                            metaConDiff[keys[i]]));\n                    }\n                }\n            }\n        }\n\n        function applyMetaChildren(node, metaChildrenDiff) {\n            var keys, i, done,\n                setChild = function (target, data/*, d*/) {\n                    self.setChildMeta(node, target, data.min, data.max);\n                };\n            if (metaChildrenDiff === CONSTANTS.TO_DELETE_STRING) {\n                //remove all valid child\n                keys = self.getValidChildrenPaths(node);\n                for (i = 0; i < keys.length; i++) {\n                    self.delChildMeta(node, keys[i]);\n                }\n            } else {\n                self.setChildrenMetaLimits(node, metaChildrenDiff.min, metaChildrenDiff.max);\n                delete metaChildrenDiff.max; //TODO we do not need it anymore, but maybe there is a better way\n                delete metaChildrenDiff.min;\n                keys = Object.keys(metaChildrenDiff);\n                for (i = 0; i < keys.length; i++) {\n                    if (metaChildrenDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                        self.delChildMeta(node, keys[i]);\n                    } else {\n                        done = TASYNC.call(setChild, self.loadByPath(self.getRoot(node), keys[i]),\n                            metaChildrenDiff[keys[i]], done);\n                    }\n                }\n            }\n\n            TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n        }\n\n        function applyMetaPointers(node, metaPointerDiff) {\n            var names, targets, i, j, done,\n                setPointer = function (name, target, data/*, d*/) {\n                    self.setPointerMetaTarget(node, name, target, data.min, data.max);\n                };\n            if (metaPointerDiff === CONSTANTS.TO_DELETE_STRING) {\n                //remove all pointers,sets and their targets\n                names = self.getValidPointerNames(node);\n                for (i = 0; i < names.length; i++) {\n                    self.delPointerMeta(node, names[i]);\n                }\n\n                names = self.getValidSetNames(node);\n                for (i = 0; i < names.length; i++) {\n                    self.delPointerMeta(node, names[i]);\n                }\n                return;\n            }\n\n            names = Object.keys(metaPointerDiff);\n            for (i = 0; i < names.length; i++) {\n                if (metaPointerDiff[names[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    self.delPointerMeta(node, names[i]);\n                } else {\n                    self.setPointerMetaLimits(node, names[i], metaPointerDiff[names[i]].min,\n                        metaPointerDiff[names[i]].max);\n                    //TODO we do not need it anymore, but maybe there is a better way\n                    delete metaPointerDiff[names[i]].max;\n                    delete metaPointerDiff[names[i]].min;\n                    targets = Object.keys(metaPointerDiff[names[i]]);\n                    for (j = 0; j < targets.length; j++) {\n                        if (metaPointerDiff[names[i]][targets[j]] === CONSTANTS.TO_DELETE_STRING) {\n                            self.delPointerMetaTarget(node, names[i], targets[j]);\n                        } else {\n                            done = TASYNC.call(setPointer, names[i], self.loadByPath(self.getRoot(node), targets[j]),\n                                metaPointerDiff[names[i]][targets[j]], done);\n                        }\n                    }\n                }\n            }\n\n            TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n        }\n\n        function applyMetaAspects(node, metaAspectsDiff) {\n            var names, targets, i, j, done,\n                setAspect = function (name, target/*, d*/) {\n                    self.setAspectMetaTarget(node, name, target);\n                };\n            if (metaAspectsDiff === CONSTANTS.TO_DELETE_STRING) {\n                //remove all aspects\n                names = self.getValidAspectNames(node);\n                for (i = 0; i < names.length; i++) {\n                    self.delAspectMeta(node, names[i]);\n                }\n                return;\n            }\n\n            names = Object.keys(metaAspectsDiff);\n            for (i = 0; i < names.length; i++) {\n                if (metaAspectsDiff[names[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    self.delAspectMeta(node, names[i]);\n                } else {\n                    targets = metaAspectsDiff[names[i]];\n                    for (j = 0; j < targets.length; j++) {\n                        if (metaAspectsDiff[names[i]][targets[j]] === CONSTANTS.TO_DELETE_STRING) {\n                            self.delAspectMetaTarget(node, names[i], targets[j]);\n                        } else {\n                            done = TASYNC.call(setAspect, names[i], self.loadByPath(self.getRoot(node), targets[j]),\n                                done);\n                        }\n                    }\n                }\n            }\n\n            TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n        }\n\n        function applyMetaChanges(node, metaDiff) {\n            var done;\n            applyMetaAttributes(node, metaDiff.attributes || CONSTANTS.TO_DELETE_STRING);\n            applyMetaConstraints(node, metaDiff.constraints || CONSTANTS.TO_DELETE_STRING);\n            done = applyMetaChildren(node, metaDiff.children || CONSTANTS.TO_DELETE_STRING);\n            done = TASYNC.call(applyMetaPointers, node, metaDiff.pointers || CONSTANTS.TO_DELETE_STRING, done);\n            done = TASYNC.call(applyMetaAspects, node, metaDiff.aspects || CONSTANTS.TO_DELETE_STRING, done);\n\n            TASYNC.call(function (/*d*/) {\n                return null;\n            }, done);\n        }\n\n        function getNodeByGuid(diff, guid) {\n            var relids, i, node;\n\n            if (REGEXP.GUID.test(guid) !== true) {\n                return null;\n            }\n\n            if (diff.guid === guid) {\n                return diff;\n            }\n\n            relids = getDiffChildrenRelids(diff);\n            for (i = 0; i < relids.length; i++) {\n                node = getNodeByGuid(diff[relids[i]], guid);\n                if (node) {\n                    return node;\n                }\n            }\n            return null;\n        }\n\n        function insertAtPath(diff, path, object) {\n            ASSERT(typeof path === 'string');\n            var i, base, relid, nodepath;\n\n            if (path === '') {\n                _concatResult = JSON.parse(JSON.stringify(object));\n                return;\n            }\n            nodepath = path.match(/\\/\\/.*\\/\\//) || [];\n            nodepath = nodepath[0] || 'there is no nodepath in the path';\n            path = path.replace(nodepath, '/*nodepath*/');\n            nodepath = nodepath.replace(/\\/\\//g, '/');\n            nodepath = nodepath.slice(0, -1);\n            path = path.split('/');\n            path.shift();\n            if (path.indexOf('*nodepath*') !== -1) {\n                path[path.indexOf('*nodepath*')] = nodepath;\n            }\n            relid = path.pop();\n            base = diff;\n            for (i = 0; i < path.length; i++) {\n                base[path[i]] = base[path[i]] || {};\n                base = base[path[i]];\n            }\n            base[relid] = JSON.parse(JSON.stringify(object));\n            return;\n        }\n\n        function getSingleNode(node) {\n            //removes the children from the node\n            var result = JSON.parse(JSON.stringify(node)),\n                keys = getDiffChildrenRelids(result),\n                i;\n            for (i = 0; i < keys.length; i++) {\n                delete result[keys[i]];\n            }\n            //changeMovedPaths(result);\n            return result;\n        }\n\n        function jsonConcat(base, extension) {\n            var baseKeys = Object.keys(base),\n                extKeys = Object.keys(extension),\n                concat = JSON.parse(JSON.stringify(base)),\n                i;\n            for (i = 0; i < extKeys.length; i++) {\n                if (baseKeys.indexOf(extKeys[i]) === -1) {\n                    concat[extKeys[i]] = JSON.parse(JSON.stringify(extension[extKeys[i]]));\n                } else {\n                    if (typeof base[extKeys[i]] === 'object' && typeof extension[extKeys[i]] === 'object') {\n                        concat[extKeys[i]] = jsonConcat(base[extKeys[i]], extension[extKeys[i]]);\n                    } else { //either from value to object or object from value we go with the extension\n                        concat[extKeys[i]] = JSON.parse(JSON.stringify(extension[extKeys[i]]));\n                    }\n                }\n            }\n            return concat;\n        }\n\n        //FIXME are we going to use this function\n        //function getConflictByGuid(conflict, guid) {\n        //    var relids, i, result;\n        //    if (conflict.guid === guid) {\n        //        return conflict;\n        //    }\n        //    relids = getDiffChildrenRelids(conflict);\n        //    for (i = 0; i < relids.length; i++) {\n        //        result = getConflictByGuid(conflict[relids[i]], guid);\n        //        if (result) {\n        //            return result;\n        //        }\n        //    }\n        //    return null;\n        //}\n\n        function getPathByGuid(conflict, guid, path) {\n            var relids, i, result;\n\n            if (REGEXP.GUID.test(guid) !== true) {\n                return null;\n            }\n\n            if (conflict.guid === guid) {\n                return path;\n            }\n            relids = getDiffChildrenRelids(conflict);\n            for (i = 0; i < relids.length; i++) {\n                result = getPathByGuid(conflict[relids[i]], guid, path + '/' + relids[i]);\n                if (result) {\n                    return result;\n                }\n            }\n            return null;\n        }\n\n        //now we try a different approach, which maybe more simple\n        function getCommonPathForConcat(path) {\n            if (_concatMoves.getExtensionSourceFromDestination[path]) {\n                path = _concatMoves.getExtensionSourceFromDestination[path];\n            }\n            if (_concatMoves.getBaseDestinationFromSource[path]) {\n                path = _concatMoves.getBaseDestinationFromSource[path];\n            }\n            return path;\n        }\n\n        function getConcatBaseRemovals(diff) {\n            var relids = getDiffChildrenRelids(diff),\n                i;\n            if (diff.removed !== true) {\n                if (diff.movedFrom) {\n                    if (_concatBaseRemovals[diff.guid] !== undefined) {\n                        delete _concatBaseRemovals[diff.guid];\n                    } else {\n                        _concatBaseRemovals[diff.guid] = false;\n                    }\n                }\n                for (i = 0; i < relids.length; i++) {\n                    getConcatBaseRemovals(diff[relids[i]]);\n                }\n            } else {\n                if (_concatBaseRemovals[diff.guid] === false) {\n                    delete _concatBaseRemovals[diff.guid];\n                } else {\n                    _concatBaseRemovals[diff.guid] = true;\n                }\n            }\n        }\n\n        function completeConcatBase(baseDiff, extensionDiff) {\n            var recursiveComplete = function (base, extension, newItem) {\n                var i, keys;\n                if (newItem === true) {\n                    if (extension.guid) {\n                        base.guid = extension.guid;\n                    }\n                    if (extension.oGuids) {\n                        base.oGuids = extension.oGuids;\n                    }\n                    if (extension.ooGuids) {\n                        base.ooGuids = extension.ooGuids;\n                    }\n\n                    if (typeof extension.removed === 'boolean' && !extension.removed) {\n                        base.removed = extension.removed;\n                    }\n\n                    if (extension.hash) {\n                        base.hash = extension.hash;\n                    }\n\n                    if (extension.childrenListChanged) {\n                        base.childrenListChanged = true;\n                    }\n                }\n\n                keys = getDiffChildrenRelids(extension);\n                for (i = 0; i < keys.length; i += 1) {\n                    if (base[keys[i]] === undefined) {\n                        if (typeof extension[keys[i]].movedFrom !== 'string') {\n                            base[keys[i]] = {};\n                            recursiveComplete(base[keys[i]], extension[keys[i]], true);\n                        }\n                    } else {\n                        recursiveComplete(base[keys[i]], extension[keys[i]], false);\n                    }\n                }\n            };\n\n            recursiveComplete(baseDiff, extensionDiff, Object.keys(baseDiff).length === 0);\n        }\n\n        function getObstructiveGuids(diffNode) {\n            var result = [],\n                keys, i;\n            keys = Object.keys(diffNode.oGuids || {});\n            for (i = 0; i < keys.length; i++) {\n                if (_concatBaseRemovals[keys[i]]) {\n                    result.push(keys[i]);\n                }\n            }\n            keys = Object.keys(diffNode.ooGuids || {});\n            for (i = 0; i < keys.length; i++) {\n                if (_concatBaseRemovals[keys[i]]) {\n                    result.push(keys[i]);\n                }\n            }\n            return result;\n        }\n\n        function getWhomIObstructGuids(guid) {\n            //this function is needed when the extension contains a deletion where the base did not delete the node\n            var guids = [],\n                checkNode = function (diffNode) {\n                    var relids, i;\n                    if ((diffNode.oGuids && diffNode.oGuids[guid]) || (diffNode.ooGuids && diffNode.ooGuids[guid])) {\n                        guids.push(diffNode.guid);\n                    }\n\n                    relids = getDiffChildrenRelids(diffNode);\n                    for (i = 0; i < relids.length; i++) {\n                        checkNode(diffNode[relids[i]]);\n                    }\n                };\n            checkNode(_concatBase);\n            return guids;\n        }\n\n        function gatherFullNodeConflicts(diffNode, mine, path, opposingPath) {\n            var conflict,\n                opposingConflict,\n                keys, i,\n                createSingleKeyValuePairConflicts = function (pathBase, data) {\n                    var keys, i;\n                    keys = Object.keys(data);\n                    for (i = 0; i < keys.length; i++) {\n                        conflict[pathBase + '/' + keys[i]] = conflict[pathBase + '/' + keys[i]] || {\n                                value: data[keys[i]],\n                                conflictingPaths: {}\n                            };\n                        conflict[pathBase + '/' + keys[i]].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[pathBase + '/' + keys[i]] = true;\n                    }\n                };\n\n            //setting the conflicts\n            if (mine === true) {\n                conflict = _conflictMine;\n                opposingConflict = _conflictTheirs[opposingPath];\n            } else {\n                conflict = _conflictTheirs;\n                opposingConflict = _conflictMine[opposingPath];\n            }\n            ASSERT(opposingConflict);\n            //if the node was moved we should make a conflict for the whole node as well\n            if (diffNode.movedFrom) {\n                conflict[path] = conflict[path] || {value: path, conflictingPaths: {}};\n                conflict[path].conflictingPaths[opposingPath] = true;\n                opposingConflict.conflictingPaths[path] = true;\n            }\n            createSingleKeyValuePairConflicts(path + '/attr', diffNode.attr || {});\n            createSingleKeyValuePairConflicts(path + '/reg', diffNode.reg || {});\n            createSingleKeyValuePairConflicts(path + '/pointer', diffNode.pointer || {});\n\n            if (diffNode.set) {\n                if (diffNode.set === CONSTANTS.TO_DELETE_STRING) {\n                    conflict[path + '/set'] = conflict[path + '/set'] || {\n                            value: CONSTANTS.TO_DELETE_STRING,\n                            conflictingPaths: {}\n                        };\n                    conflict[path + '/set'].conflictingPaths[opposingPath] = true;\n                    opposingConflict.conflictingPaths[path + '/set'] = true;\n                } else {\n                    keys = Object.keys(diffNode.set);\n                    for (i = 0; i < keys.length; i++) {\n                        if (diffNode.set[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                            conflict[path + '/set/' + keys[i]] = conflict[path + '/set/' + keys[i]] || {\n                                    value: CONSTANTS.TO_DELETE_STRING,\n                                    conflictingPaths: {}\n                                };\n                            conflict[path + '/set/' + keys[i]].conflictingPaths[opposingPath] = true;\n                            opposingConflict.conflictingPaths[path + '/set/' + keys[i]] = true;\n                        } else {\n                            gatherFullSetConflicts(diffNode.set[keys[i]], mine, path + '/set/' + keys[i], opposingPath);\n                        }\n                    }\n                }\n            }\n\n            if (diffNode.meta) {\n                gatherFullMetaConflicts(diffNode.meta, mine, path + '/meta', opposingPath);\n            }\n\n            //if the opposing item is theirs, we have to recursively go down in our changes\n            if (mine) {\n                keys = getDiffChildrenRelids(diffNode);\n                for (i = 0; i < keys.length; i++) {\n                    gatherFullNodeConflicts(diffNode[keys[i]], true, path + '/' + keys[i], opposingPath);\n                }\n            }\n\n        }\n\n        function gatherFullSetConflicts(diffSet, mine, path, opposingPath) {\n            var relids = getDiffChildrenRelids(diffSet),\n                i, keys, j, conflict, opposingConflict;\n\n            //setting the conflicts\n            if (mine === true) {\n                conflict = _conflictMine;\n                opposingConflict = _conflictTheirs[opposingPath];\n            } else {\n                conflict = _conflictTheirs;\n                opposingConflict = _conflictMine[opposingPath];\n            }\n            for (i = 0; i < relids.length; i++) {\n                if (diffSet[relids[i]] === CONSTANTS.TO_DELETE_STRING) {\n                    //single conflict as the element was removed\n                    conflict[path + '/' + relids[i] + '/'] = conflict[path + '/' + relids[i] + '/'] || {\n                            value: CONSTANTS.TO_DELETE_STRING,\n                            conflictingPaths: {}\n                        };\n                    conflict[path + '/' + relids[i] + '/'].conflictingPaths[opposingPath] = true;\n                    opposingConflict.conflictingPaths[path + '/' + relids[i] + '/'] = true;\n                } else {\n                    keys = Object.keys(diffSet[relids[i]].attr || {});\n                    for (j = 0; j < keys.length; j++) {\n                        conflict[path + '/' + relids[i] + '//attr/' + keys[j]] =\n                            conflict[path + '/' + relids[i] + '//attr/' + keys[j]] || {\n                                value: diffSet[relids[i]].attr[keys[j]],\n                                conflictingPaths: {}\n                            };\n                        conflict[path + '/' + relids[i] + '//attr/' + keys[j]].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[path + '/' + relids[i] + '//attr/' + keys[j]] = true;\n                    }\n                    keys = Object.keys(diffSet[relids[i]].reg || {});\n                    for (j = 0; j < keys.length; j++) {\n                        conflict[path + '/' + relids[i] + '//reg/' + keys[j]] =\n                            conflict[path + '/' + relids[i] + '//reg/' + keys[j]] || {\n                                value: diffSet[relids[i]].reg[keys[j]],\n                                conflictingPaths: {}\n                            };\n                        conflict[path + '/' + relids[i] + '//reg/' + keys[j]].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[path + '/' + relids[i] + '//reg/' + keys[j]] = true;\n                    }\n                }\n            }\n        }\n\n        function concatSingleKeyValuePairs(path, base, extension) {\n            var keys, i, temp;\n            keys = Object.keys(extension);\n            for (i = 0; i < keys.length; i++) {\n                temp = extension[keys[i]];\n                if (typeof temp === 'string' && temp !== CONSTANTS.TO_DELETE_STRING) {\n                    temp = getCommonPathForConcat(temp);\n                }\n                if (base[keys[i]] !== undefined && CANON.stringify(base[keys[i]]) !== CANON.stringify(temp)) {\n                    //conflict\n                    _conflictMine[path + '/' + keys[i]] = {value: base[keys[i]], conflictingPaths: {}};\n                    _conflictTheirs[path + '/' + keys[i]] = {value: extension[keys[i]], conflictingPaths: {}};\n                    _conflictMine[path + '/' + keys[i]].conflictingPaths[path + '/' + keys[i]] = true;\n                    _conflictTheirs[path + '/' + keys[i]].conflictingPaths[path + '/' + keys[i]] = true;\n                } else {\n                    base[keys[i]] = extension[keys[i]];\n                }\n            }\n        }\n\n        function concatSet(path, base, extension) {\n            var names = Object.keys(extension),\n                members, i, j, memberPath;\n\n            for (i = 0; i < names.length; i++) {\n                if (base[names[i]]) {\n                    if (base[names[i]] === CONSTANTS.TO_DELETE_STRING) {\n                        if (extension[names[i]] !== CONSTANTS.TO_DELETE_STRING) {\n                            //whole set conflict\n                            _conflictMine[path + '/' + names[i]] = {\n                                value: CONSTANTS.TO_DELETE_STRING,\n                                conflictingPaths: {}\n                            };\n                            gatherFullSetConflicts(extension[names[i]],\n                                false, path + '/' + names[i], path + '/' + names[i]);\n                        }\n                    } else {\n                        if (extension[names[i]] === CONSTANTS.TO_DELETE_STRING) {\n                            //whole set conflict\n                            _conflictTheirs[path + '/' + names[i]] = {\n                                value: CONSTANTS.TO_DELETE_STRING,\n                                conflictingPaths: {}\n                            };\n                            gatherFullSetConflicts(base[names[i]], true, path + '/' + names[i], path + '/' + names[i]);\n                        } else {\n                            //now we can only have member or sub-member conflicts...\n                            members = getDiffChildrenRelids(extension[names[i]]);\n                            for (j = 0; j < members.length; j++) {\n                                memberPath = getCommonPathForConcat(members[j]);\n                                if (base[names[i]][memberPath]) {\n                                    if (base[names[i]][memberPath] === CONSTANTS.TO_DELETE_STRING) {\n                                        if (extension[names[i]][members[j]] !== CONSTANTS.TO_DELETE_STRING) {\n                                            //whole member conflict\n                                            _conflictMine[path + '/' + names[i] + '/' + memberPath + '//'] = {\n                                                value: CONSTANTS.TO_DELETE_STRING,\n                                                conflictingPaths: {}\n                                            };\n                                            gatherFullNodeConflicts(extension[names[i]][members[j]],\n                                                false,\n                                                path + '/' + names[i] + '/' + memberPath + '//', path +\n                                                '/' + names[i] + '/' + memberPath + '//');\n                                        }\n                                    } else {\n                                        if (extension[names[i]][members[j]] === CONSTANTS.TO_DELETE_STRING) {\n                                            //whole member conflict\n                                            _conflictTheirs[path + '/' + names[i] + '/' + memberPath + '//'] = {\n                                                value: CONSTANTS.TO_DELETE_STRING,\n                                                conflictingPaths: {}\n                                            };\n                                            gatherFullNodeConflicts(base[names[i]][memberPath],\n                                                true,\n                                                path + '/' + names[i] + '/' + memberPath + '//', path +\n                                                '/' + names[i] + '/' + memberPath + '//');\n                                        } else {\n                                            if (extension[names[i]][members[j]].attr) {\n                                                if (base[names[i]][memberPath].attr) {\n                                                    concatSingleKeyValuePairs(path + '/' +\n                                                        names[i] + '/' + memberPath + '/' + '/attr',\n                                                        base[names[i]][memberPath].attr,\n                                                        extension[names[i]][members[j]].attr);\n                                                } else {\n                                                    base[names[i]][memberPath].attr =\n                                                        extension[names[i]][members[j]].attr;\n                                                }\n                                            }\n                                            if (extension[names[i]][members[j]].reg) {\n                                                if (base[names[i]][memberPath].reg) {\n                                                    concatSingleKeyValuePairs(path + '/' +\n                                                        names[i] + '/' + memberPath + '/' + '/reg',\n                                                        base[names[i]][memberPath].reg,\n                                                        extension[names[i]][members[j]].reg);\n                                                } else {\n                                                    base[names[i]][memberPath].reg =\n                                                        extension[names[i]][members[j]].reg;\n                                                }\n                                            }\n\n                                        }\n                                    }\n                                } else {\n                                    //concat\n                                    base[names[i]][memberPath] = extension[names[i]][members[j]];\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    //simple concatenation\n                    //TODO the path for members should be replaced here as well...\n                    base[names[i]] = extension[names[i]];\n                }\n            }\n        }\n\n        function gatherFullMetaConflicts(diffMeta, mine, path, opposingPath) {\n            var conflict, opposingConflict,\n                relids, i, j, keys, tPath, key;\n\n            if (mine) {\n                conflict = _conflictMine;\n                opposingConflict = _conflictTheirs[opposingPath];\n            } else {\n                conflict = _conflictTheirs;\n                opposingConflict = _conflictMine[opposingPath];\n            }\n\n            if (diffMeta === CONSTANTS.TO_DELETE_STRING) {\n                conflict[path] = conflict[path] || {value: CONSTANTS.TO_DELETE_STRING, conflictingPaths: {}};\n                conflict[path].conflictingPaths[opposingPath] = true;\n                opposingConflict.conflictingPaths[path] = true;\n                return; //there is no other conflict\n            }\n\n            //children\n            if (diffMeta.children) {\n                if (diffMeta.children === CONSTANTS.TO_DELETE_STRING) {\n                    conflict[path + '/children'] = conflict[path + '/children'] || {\n                            value: CONSTANTS.TO_DELETE_STRING,\n                            conflictingPaths: {}\n                        };\n                    conflict[path + '/children'].conflictingPaths[opposingPath] = true;\n                    opposingConflict.conflictingPaths[path + '/children'] = true;\n                } else {\n                    if (diffMeta.children.max) {\n                        conflict[path + '/children/max'] = conflict[path + '/children/max'] || {\n                                value: diffMeta.children.max,\n                                conflictingPaths: {}\n                            };\n                        conflict[path + '/children/max'].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[path + '/children/max'] = true;\n                    }\n                    if (diffMeta.children.min) {\n                        conflict[path + '/children/min'] = conflict[path + '/children/min'] || {\n                                value: diffMeta.children.min,\n                                conflictingPaths: {}\n                            };\n                        conflict[path + '/children/min'].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[path + '/children/min'] = true;\n                    }\n                    relids = getDiffChildrenRelids(diffMeta.children);\n                    for (i = 0; i < relids.length; i++) {\n                        conflict[path + '/children/' + relids[i]] = conflict[path + '/children/' + relids[i]] || {\n                                value: diffMeta.children[relids[i]],\n                                conflictingPaths: {}\n                            };\n                        conflict[path + '/children/' + relids[i]].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[path + '/children/' + relids[i]] = true;\n                    }\n                }\n            }\n            //attributes\n            if (diffMeta.attributes) {\n                if (diffMeta.attributes === CONSTANTS.TO_DELETE_STRING) {\n                    conflict[path + '/attributes'] = conflict[path + '/attributes'] || {\n                            value: CONSTANTS.TO_DELETE_STRING,\n                            conflictingPaths: {}\n                        };\n                    conflict[path + '/attributes'].conflictingPaths[opposingPath] = true;\n                    opposingConflict.conflictingPaths[path + '/attributes'] = true;\n                } else {\n                    keys = Object.keys(diffMeta.attributes);\n                    for (i = 0; i < keys.length; i++) {\n                        key = path + '/attributes/' + keys[i];\n                        conflict[key] = conflict[key] || {\n                                value: diffMeta.attributes[keys[i]],\n                                conflictingPaths: {}\n                            };\n                        conflict[key].conflictingPaths[opposingPath] = true;\n                        opposingConflict.conflictingPaths[key] = true;\n                    }\n                }\n            }\n            //pointers\n            if (diffMeta.pointers) {\n                if (diffMeta.pointers === CONSTANTS.TO_DELETE_STRING) {\n                    conflict[path + '/pointers'] = conflict[path + '/pointers'] || {\n                            value: CONSTANTS.TO_DELETE_STRING,\n                            conflictingPaths: {}\n                        };\n                    conflict[path + '/pointers'].conflictingPaths[opposingPath] = true;\n                    opposingConflict.conflictingPaths[path + '/pointers'] = true;\n                } else {\n                    keys = Object.keys(diffMeta.pointers);\n                    for (i = 0; i < keys.length; i++) {\n                        if (diffMeta.pointers[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                            conflict[path + '/pointers/' + keys[i]] = conflict[path + '/pointers/' + keys[i]] || {\n                                    value: CONSTANTS.TO_DELETE_STRING,\n                                    conflictingPaths: {}\n                                };\n                            conflict[path + '/pointers/' + keys[i]].conflictingPaths[opposingPath] = true;\n                            opposingConflict.conflictingPaths[path + '/pointers/' + keys[i]] = true;\n                        } else {\n                            if (diffMeta.pointers[keys[i]].max) {\n                                conflict[path + '/pointers/' + keys[i] + '/max'] =\n                                    conflict[path + '/pointers/' + keys[i] + '/max'] || {\n                                        value: diffMeta.pointers[keys[i]].max,\n                                        conflictingPaths: {}\n                                    };\n                                conflict[path + '/pointers/' + keys[i] + '/max'].conflictingPaths[opposingPath] = true;\n                                opposingConflict.conflictingPaths[path + '/pointers/' + keys[i] + '/max'] = true;\n                            }\n                            if (diffMeta.pointers[keys[i]].min) {\n                                conflict[path + '/pointers/' + keys[i] + '/min'] =\n                                    conflict[path + '/pointers/' + keys[i] + '/min'] || {\n                                        value: diffMeta.pointers[keys[i]].min,\n                                        conflictingPaths: {}\n                                    };\n                                conflict[path + '/pointers/' + keys[i] + '/min'].conflictingPaths[opposingPath] = true;\n                                opposingConflict.conflictingPaths[path + '/pointers/' + keys[i] + '/min'] = true;\n                            }\n                            relids = getDiffChildrenRelids(diffMeta.pointers[keys[i]]);\n                            for (j = 0; j < relids.length; j++) {\n                                tPath = getCommonPathForConcat(relids[j]);\n                                conflict[path + '/pointers/' + keys[i] + '/' + tPath + '//'] =\n                                    conflict[path + '/pointers/' + keys[i] + '/' + tPath + '//'] || {\n                                        value: diffMeta.pointers[keys[i]][relids[j]],\n                                        conflictingPaths: {}\n                                    };\n                                conflict[path + '/pointers/' + keys[i] + '/' + tPath + '//']\n                                    .conflictingPaths[opposingPath] = true;\n                                opposingConflict.conflictingPaths[path + '/pointers/' +\n                                keys[i] + '/' + tPath + '//'] = true;\n                            }\n                        }\n                    }\n                }\n            }\n            //aspects\n            //TODO\n        }\n\n        function concatMeta(path, base, extension) {\n            var keys, i, tPath, j, paths, t2Path,\n                mergeMetaItems = function (bPath, bData, eData) {\n                    var bKeys, tKeys, i, tPath, t2Path;\n                    //delete checks\n                    if (bData === CONSTANTS.TO_DELETE_STRING || eData === CONSTANTS.TO_DELETE_STRING) {\n                        if (CANON.stringify(bData) !== CANON.stringify(eData)) {\n                            _conflictMine[bPath] = _conflictMine[bPath] || {value: bData, conflictingPaths: {}};\n                            _conflictMine[bPath].conflictingPaths[bPath] = true;\n                            _conflictTheirs[bPath] = _conflictTheirs[bPath] || {value: eData, conflictingPaths: {}};\n                            _conflictTheirs[bPath].conflictingPaths[bPath] = true;\n                        }\n                    } else {\n                        //max\n                        if (eData.max) {\n                            if (bData.max && bData.max !== eData.max) {\n                                tPath = bPath + '/max';\n                                _conflictMine[tPath] = _conflictMine[tPath] || {\n                                        value: bData.max,\n                                        conflictingPaths: {}\n                                    };\n                                _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                        value: eData.max,\n                                        conflictingPaths: {}\n                                    };\n                                _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                            } else {\n                                bData.max = eData.max;\n                            }\n                        }\n                        //min\n                        if (eData.min) {\n                            if (bData.min && bData.min !== eData.min) {\n                                tPath = bPath + '/min';\n                                _conflictMine[tPath] = _conflictMine[tPath] || {\n                                        value: bData.min,\n                                        conflictingPaths: {}\n                                    };\n                                _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                        value: eData.min,\n                                        conflictingPaths: {}\n                                    };\n                                _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                            } else {\n                                bData.min = eData.min;\n                            }\n                        }\n                        //targets\n                        bKeys = getDiffChildrenRelids(bData);\n                        tKeys = getDiffChildrenRelids(eData);\n                        for (i = 0; i < tKeys.length; i++) {\n                            tPath = getCommonPathForConcat(tKeys[i]);\n                            if (bKeys.indexOf(tPath) !== -1 && CANON.stringify(bData[tPath]) !==\n                                CANON.stringify(eData[tKeys[i]])) {\n\n                                t2Path = tPath;\n                                tPath = bPath + '/' + tPath + '//';\n                                _conflictMine[tPath] = _conflictMine[tPath] || {\n                                        value: bData[t2Path],\n                                        conflictingPaths: {}\n                                    };\n                                _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                        value: eData[tKeys[i]],\n                                        conflictingPaths: {}\n                                    };\n                                _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                            } else {\n                                bData[tPath] = eData[tKeys[i]];\n                            }\n                        }\n                    }\n                };\n            if (CANON.stringify(base) !== CANON.stringify(extension)) {\n                if (base === CONSTANTS.TO_DELETE_STRING) {\n                    _conflictMine[path] = _conflictMine[path] || {\n                            value: CONSTANTS.TO_DELETE_STRING,\n                            conflictingPaths: {}\n                        };\n                    gatherFullMetaConflicts(extension, false, path, path);\n                } else {\n                    if (extension === CONSTANTS.TO_DELETE_STRING) {\n                        _conflictTheirs[path] = _conflictTheirs[path] || {\n                                value: CONSTANTS.TO_DELETE_STRING,\n                                conflictingPaths: {}\n                            };\n                        gatherFullMetaConflicts(base, true, path, path);\n                    } else {\n                        //now check for sub-meta conflicts\n\n                        //children\n                        if (extension.children) {\n                            if (base.children) {\n                                mergeMetaItems(path + '/children', base.children, extension.children);\n                            } else {\n                                //we just simply merge the extension's\n                                base.children = extension.children;\n                            }\n                        }\n                        //pointers\n                        if (extension.pointers) {\n                            if (base.pointers) {\n                                //complete deletion\n                                if (base.pointers === CONSTANTS.TO_DELETE_STRING ||\n                                    extension.pointers === CONSTANTS.TO_DELETE_STRING) {\n                                    if (CANON.stringify(base.pointers) !== CANON.stringify(extension.pointers)) {\n                                        tPath = path + '/pointers';\n                                        _conflictMine[tPath] = _conflictMine[tPath] || {\n                                                value: base.pointers,\n                                                conflictingPaths: {}\n                                            };\n                                        _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                                value: extension.pointers,\n                                                conflictingPaths: {}\n                                            };\n                                        _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                                    }\n                                } else {\n                                    keys = Object.keys(extension.pointers);\n                                    for (i = 0; i < keys.length; i++) {\n                                        if (base.pointers[keys[i]]) {\n                                            mergeMetaItems(path + '/pointers/' + keys[i], base.pointers[keys[i]],\n                                                extension.pointers[keys[i]]);\n                                        } else {\n                                            base.pointers[keys[i]] = extension.pointers[keys[i]];\n                                        }\n                                    }\n                                }\n                            } else {\n                                base.pointers = extension.pointers;\n                            }\n                        }\n                        //attributes\n                        if (extension.attributes) {\n                            if (base.attributes) {\n                                if (extension.attributes === CONSTANTS.TO_DELETE_STRING ||\n                                    base.attributes === CONSTANTS.TO_DELETE_STRING) {\n                                    if (CANON.stringify(base.attributes) !== CANON.stringify(extension.attributes)) {\n                                        tPath = path + '/attributes';\n                                        _conflictMine[tPath] = _conflictMine[tPath] || {\n                                                value: base.attributes,\n                                                conflictingPaths: {}\n                                            };\n                                        _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                                value: extension.attributes,\n                                                conflictingPaths: {}\n                                            };\n                                        _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                                    }\n                                } else {\n                                    keys = Object.keys(extension.attributes);\n                                    for (i = 0; i < keys.length; i++) {\n                                        if (base.attributes[keys[i]]) {\n                                            if (extension.attributes[keys[i]] === CONSTANTS.TO_DELETE_STRING ||\n                                                base.attributes[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n\n                                                if (CANON.stringify(base.attributes[keys[i]]) !==\n                                                    CANON.stringify(extension.attributes[keys[i]])) {\n\n                                                    tPath = path + '/attributes/' + [keys[i]];\n                                                    _conflictMine[tPath] = _conflictMine[tPath] || {\n                                                            value: base.attributes[keys[i]],\n                                                            conflictingPaths: {}\n                                                        };\n                                                    _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                                    _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                                            value: extension.attributes[keys[i]],\n                                                            conflictingPaths: {}\n                                                        };\n                                                    _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                                                }\n                                            } else {\n                                                concatSingleKeyValuePairs(path + '/attributes/' + keys[i],\n                                                    base.attributes[keys[i]], extension.attributes[keys[i]]);\n                                            }\n                                        } else {\n                                            base.attributes[keys[i]] = extension.attributes[keys[i]];\n                                        }\n                                    }\n\n                                }\n                            } else {\n                                base.attributes = extension.attributes;\n                            }\n                        }\n\n                        //aspects\n                        if (extension.aspects) {\n                            if (base.aspects) {\n                                if (extension.aspects === CONSTANTS.TO_DELETE_STRING ||\n                                    base.aspects === CONSTANTS.TO_DELETE_STRING) {\n                                    if (CANON.stringify(base.aspects) !== CANON.stringify(extension.aspects)) {\n                                        tPath = path + '/aspects';\n                                        _conflictMine[tPath] = _conflictMine[tPath] || {\n                                                value: base.aspects,\n                                                conflictingPaths: {}\n                                            };\n                                        _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                                value: extension.aspects,\n                                                conflictingPaths: {}\n                                            };\n                                        _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                                    }\n                                } else {\n                                    keys = Object.keys(extension.aspects);\n                                    for (i = 0; i < keys.length; i++) {\n                                        if (base.aspects[keys[i]]) {\n                                            if (extension.aspects[keys[i]] === CONSTANTS.TO_DELETE_STRING ||\n                                                base.aspects[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\n                                                if (CANON.stringify(base.aspects[keys[i]]) !==\n                                                    CANON.stringify(extension.aspects[keys[i]])) {\n                                                    tPath = path + '/aspects/' + keys[i];\n                                                    _conflictMine[tPath] = _conflictMine[tPath] || {\n                                                            value: base.aspects[keys[i]],\n                                                            conflictingPaths: {}\n                                                        };\n                                                    _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                                    _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                                            value: extension.aspects[keys[i]],\n                                                            conflictingPaths: {}\n                                                        };\n                                                    _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                                                }\n                                            } else {\n                                                paths = Object.keys(extension.aspects[keys[i]]);\n                                                for (j = 0; j < paths.length; j++) {\n                                                    tPath = getCommonPathForConcat(paths[j]);\n                                                    if (base.aspects[keys[i]][tPath]) {\n                                                        if (CANON.stringify(base.aspects[keys[i]][tPath]) !==\n                                                            CANON.stringify(extension.aspects[keys[i]][paths[j]])) {\n                                                            t2Path = tPath;\n                                                            tPath = path + '/aspects/' + keys[i] + '/' + tPath + '//';\n                                                            _conflictMine[tPath] = _conflictMine[tPath] || {\n                                                                    value: base.aspects[keys[i]][t2Path],\n                                                                    conflictingPaths: {}\n                                                                };\n                                                            _conflictMine[tPath].conflictingPaths[tPath] = true;\n                                                            _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\n                                                                    value: extension.aspects[keys[i]][paths[j]],\n                                                                    conflictingPaths: {}\n                                                                };\n                                                            _conflictTheirs[tPath].conflictingPaths[tPath] = true;\n                                                        }\n                                                    } else {\n                                                        base.aspects[keys[i]][tPath] =\n                                                            extension.aspects[keys[i]][paths[j]];\n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            base.aspects[keys[i]] = extension.aspects[keys[i]];\n                                        }\n                                    }\n                                }\n                            } else {\n                                base.aspects = extension.aspects;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function tryToConcatNodeChange(extNode, path) {\n            var guid = extNode.guid,\n                oGuids = getObstructiveGuids(extNode),\n                baseNode = getNodeByGuid(_concatBase, guid),\n                basePath = getPathByGuid(_concatBase, guid, ''),\n                realBaseNode = baseNode,\n                i, tPath,\n                relids = getDiffChildrenRelids(extNode);\n\n            if (extNode.removed === true) {\n                if (baseNode && baseNode.removed !== true && hasRealChange(baseNode)) {\n                    tPath = basePath + '/removed';\n                    _conflictTheirs[tPath] = _conflictTheirs[tPath] || {value: true, conflictingPaths: {}};\n                    oGuids = getWhomIObstructGuids(guid);\n                    ASSERT(oGuids.length > 0);\n                    for (i = 0; i < oGuids.length; i++) {\n                        baseNode = getNodeByGuid(_concatBase, oGuids[i]);\n                        basePath = getPathByGuid(_concatBase, oGuids[i], '');\n                        gatherFullNodeConflicts(baseNode, true, basePath, tPath);\n                    }\n                } else {\n                    //we simply concat the deletion\n                    insertAtPath(_concatBase, path, extNode);\n                }\n            } else {\n                if (oGuids.length > 0) {\n                    for (i = 0; i < oGuids.length; i++) {\n                        baseNode = getNodeByGuid(_concatBase, oGuids[i]);\n                        basePath = getPathByGuid(_concatBase, oGuids[i], '');\n                        if (hasRealChange(extNode)) {\n                            _conflictMine[basePath + '/removed'] = _conflictMine[basePath + '/removed'] || {\n                                    value: true,\n                                    conflictingPaths: {}\n                                };\n                            gatherFullNodeConflicts(extNode, false, path, basePath + '/removed');\n                        } else {\n                            _conflictTheirs[basePath + '/removed'] = _conflictTheirs[basePath + '/removed'] || {\n                                    value: true,\n                                    conflictingPaths: {}\n                                };\n                            gatherFullNodeConflicts(realBaseNode, true, path, basePath + '/removed');\n                        }\n                    }\n                } else if (baseNode) {\n                    //here we are able to check the sub-node conflicts\n                    //check double moves - we do not care if they moved under the same parent\n                    if (extNode.movedFrom) {\n                        if (baseNode.movedFrom && path !== basePath) {\n                            _conflictMine[basePath] = _conflictMine[basePath] || {\n                                    value: 'move',\n                                    conflictingPaths: {}\n                                };\n                            _conflictTheirs[path] = _conflictTheirs[path] || {value: 'move', conflictingPaths: {}};\n                            _conflictMine[basePath].conflictingPaths[path] = true;\n                            _conflictTheirs[path].conflictingPaths[basePath] = true;\n                            //we keep the node where it is, but synchronize the paths\n                            path = basePath;\n                        } else if (path !== basePath) {\n                            //first we move the base object to its new path\n                            //we copy the moved from information right here\n                            baseNode.movedFrom = extNode.movedFrom;\n                            insertAtPath(_concatBase, path, baseNode);\n                            removePathFromDiff(_concatBase, basePath);\n                            baseNode = getNodeByGuid(_concatBase, guid);\n                            basePath = getPathByGuid(_concatBase, guid, '');\n                            ASSERT(path === basePath);\n                        }\n                    }\n\n                    ASSERT(basePath === path || baseNode.movedFrom === path);\n                    path = basePath; //the base was moved\n\n                    //and now the sub-node conflicts\n                    if (extNode.attr) {\n                        if (baseNode.attr) {\n                            concatSingleKeyValuePairs(path + '/attr', baseNode.attr, extNode.attr);\n                        } else {\n                            insertAtPath(_concatBase, path + '/attr', extNode.attr);\n                        }\n                    }\n                    if (extNode.reg) {\n                        if (baseNode.reg) {\n                            concatSingleKeyValuePairs(path + '/reg', baseNode.reg, extNode.reg);\n                        } else {\n                            insertAtPath(_concatBase, path + '/reg', extNode.reg);\n                        }\n                    }\n                    if (extNode.pointer) {\n                        if (baseNode.pointer) {\n                            concatSingleKeyValuePairs(path + '/pointer', baseNode.pointer, extNode.pointer);\n                        } else {\n                            insertAtPath(_concatBase, path + '/pointer', extNode.pointer);\n                        }\n                    }\n                    if (extNode.set) {\n                        if (baseNode.set) {\n                            concatSet(path + '/set', baseNode.set, extNode.set);\n                        } else {\n                            insertAtPath(_concatBase, path + '/set', extNode.set);\n                        }\n                    }\n                    if (extNode.meta) {\n                        if (baseNode.meta) {\n                            concatMeta(path + '/meta', baseNode.meta, extNode.meta);\n                        } else {\n                            insertAtPath(_concatBase, path + '/meta', extNode.meta);\n                        }\n                    }\n                } else {\n                    //there is no basenode so we can concat the whole node\n                    insertAtPath(_concatBase, path, getSingleNode(extNode));\n                }\n            }\n\n            //here comes the recursion\n            for (i = 0; i < relids.length; i++) {\n                tryToConcatNodeChange(extNode[relids[i]], path + '/' + relids[i]);\n            }\n\n        }\n\n        function generateConflictItems() {\n            var items = [],\n                keys, i, j, conflicts;\n            keys = Object.keys(_conflictMine);\n\n            for (i = 0; i < keys.length; i++) {\n                conflicts = Object.keys(_conflictMine[keys[i]].conflictingPaths || {});\n                ASSERT(conflicts.length > 0);\n                for (j = 0; j < conflicts.length; j++) {\n                    items.push({\n                        selected: 'mine',\n                        mine: {\n                            path: keys[i],\n                            info: keys[i].replace(/\\//g, ' / '),\n                            value: _conflictMine[keys[i]].value\n                        },\n                        theirs: {\n                            path: conflicts[j],\n                            info: conflicts[j].replace(/\\//g, ' / '),\n                            value: _conflictTheirs[conflicts[j]].value\n                        }\n                    });\n                }\n            }\n            return items;\n        }\n\n        function harmonizeConflictPaths(diff) {\n            var relids = getDiffChildrenRelids(diff),\n                keys, i, members, j;\n\n            keys = Object.keys(diff.pointer || {});\n            for (i = 0; i < keys.length; i++) {\n                diff.pointer[keys[i]] = getCommonPathForConcat(diff.pointer[keys[i]]);\n            }\n            keys = Object.keys(diff.set || {});\n            for (i = 0; i < keys.length; i++) {\n                members = Object.keys(diff.set[keys[i]] || {});\n                for (j = 0; j < members.length; j++) {\n                    if (members[j] !== getCommonPathForConcat(members[j])) {\n                        diff.set[keys[i]][getCommonPathForConcat(members[j])] = diff.set[keys[i]][members[j]];\n                        delete diff.set[keys[i]][members[j]];\n                    }\n                }\n            }\n\n            //TODO we have to do the meta as well\n            for (i = 0; i < relids.length; i++) {\n                harmonizeConflictPaths(diff[relids[i]]);\n            }\n        }\n\n        function depthOfPath(path) {\n            ASSERT(typeof path === 'string');\n            return path.split('/').length;\n        }\n\n        function resolveMoves(resolveObject) {\n            var i, moves = {},\n                filteredItems = [],\n                path,\n                moveBaseOfPath = function (path) {\n                    var keys = Object.keys(moves),\n                        i, maxDepth = -1,\n                        base = null;\n                    for (i = 0; i < keys.length; i++) {\n                        if (path.indexOf(keys[i]) === 1 && depthOfPath(keys[i]) > maxDepth) {\n                            base = keys[i];\n                            maxDepth = depthOfPath(keys[i]);\n                        }\n                    }\n                    return base;\n                };\n            for (i = 0; i < resolveObject.items.length; i++) {\n                if (resolveObject.items[i].selected === 'theirs' && resolveObject.items[i].theirs.value === 'move') {\n                    moves[resolveObject.items[i].mine.path] = resolveObject.items[i].theirs.path;\n                    //and we also make the move\n                    insertAtPath(resolveObject.merge,\n                        resolveObject.items[i].theirs.path,\n                        getPathOfDiff(resolveObject.merge, resolveObject.items[i].mine.path));\n                    removePathFromDiff(resolveObject.merge, resolveObject.items[i].mine.path);\n                } else {\n                    filteredItems.push(resolveObject.items[i]);\n                }\n            }\n            resolveObject.items = filteredItems;\n\n            //in a second run we modify all sub-path of the moves paths\n            for (i = 0; i < resolveObject.items.length; i++) {\n                if (resolveObject.items[i].selected === 'theirs') {\n                    path = moveBaseOfPath(resolveObject.items[i].theirs.path);\n                    if (path) {\n                        resolveObject.items[i].theirs.path =\n                            resolveObject.items[i].theirs.path.replace(path, moves[path]);\n                    }\n                    path = moveBaseOfPath(resolveObject.items[i].mine.path);\n                    if (path) {\n                        resolveObject.items[i].mine.path = resolveObject.items[i].mine.path.replace(path, moves[path]);\n                    }\n                }\n            }\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.nodeDiff = function (source, target) {\n            var diff = {\n                children: childrenDiff(source, target),\n                attr: attrDiff(source, target),\n                reg: regDiff(source, target),\n                pointer: pointerDiff(source, target),\n                set: setDiff(source, target),\n                meta: metaDiff(source, target)\n            };\n\n            normalize(diff);\n\n            return isEmptyNodeDiff(diff) ? null : diff;\n        };\n\n        this.generateTreeDiff = function (sRoot, tRoot) {\n            _yetToCompute = {};\n            _DIFF = {};\n            _diffMoves = {};\n            _needChecking = true;\n            _rounds = 0;\n            return TASYNC.call(function (d) {\n                _DIFF = d;\n                return checkRound();\n            }, updateDiff(sRoot, tRoot));\n        };\n\n        this.generateLightTreeDiff = function (sRoot, tRoot) {\n            return updateDiff(sRoot, tRoot);\n        };\n\n        this.applyTreeDiff = function (root, diff) {\n            // return TASYNC.join(makeInitialContainmentChanges(root, diff), applyNodeChange(root, '', diff));\n            // return makeInitialContainmentChanges(root,diff);\n            var done = makeInitialContainmentChanges(root, diff);\n\n            done = TASYNC.call(setBaseRelationsOfNewNodes, root, '', diff, done);\n\n            return TASYNC.call(function () {\n                return applyNodeChange(root, '', diff);\n            }, done);\n            // done = TASYNC.call(applyNodeChange, root, '', diff, done);\n\n            // return done;\n        };\n\n        this.tryToConcatChanges = function (base, extension) {\n            var result = {};\n            _conflictItems = [];\n            _conflictMine = {};\n            _conflictTheirs = {};\n            _concatBase = base;\n            _concatExtension = extension;\n            _concatBaseRemovals = {};\n            _concatMoves = {\n                getBaseSourceFromDestination: {},\n                getBaseDestinationFromSource: {},\n                getExtensionSourceFromDestination: {},\n                getExtensionDestinationFromSource: {}\n            };\n\n            completeConcatBase(base, extension);\n            getMoveSources(base,\n                '', _concatMoves.getBaseSourceFromDestination, _concatMoves.getBaseDestinationFromSource);\n            getMoveSources(extension,\n                '', _concatMoves.getExtensionSourceFromDestination, _concatMoves.getExtensionDestinationFromSource);\n            getConcatBaseRemovals(base);\n            getConcatBaseRemovals(extension);\n\n            fixCollision('', null, _concatBase, _concatExtension);\n            tryToConcatNodeChange(_concatExtension, '');\n\n            result.items = generateConflictItems();\n            result.mine = _conflictMine;\n            result.theirs = _conflictTheirs;\n            result.merge = _concatBase;\n            harmonizeConflictPaths(result.merge);\n\n            return result;\n        };\n\n        this.applyResolution = function (conflictObject) {\n            //we apply conflict items to the merge and return it as a diff\n            var i;\n            resolveMoves(conflictObject);\n            for (i = 0; i < conflictObject.items.length; i++) {\n                if (conflictObject.items[i].selected !== 'mine') {\n                    removePathFromDiff(conflictObject.merge, conflictObject.items[i].mine.path);\n                    insertAtPath(conflictObject.merge,\n                        conflictObject.items[i].theirs.path, conflictObject.items[i].theirs.value);\n                }\n            }\n\n            return conflictObject.merge;\n        };\n        //</editor-fold>\n    }\n\n    return DiffCore;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/metacachecore',[\n        'common/util/assert',\n        'common/core/tasync',\n        'common/core/constants'\n    ], function (ASSERT, TASYNC, CONSTANTS) {\n        'use strict';\n\n        var MetaCacheCore = function (innerCore, options) {\n            ASSERT(typeof options === 'object');\n            ASSERT(typeof options.globConf === 'object');\n            ASSERT(typeof options.logger !== 'undefined');\n\n            var logger = options.logger,\n                self = this,\n                key;\n\n            for (key in innerCore) {\n                this[key] = innerCore[key];\n            }\n\n            logger.debug('initialized MetaCacheCore');\n\n            //<editor-fold=Helper Functions>\n            function loadMetaSet(root) {\n                var paths = innerCore.getMemberPaths(root, CONSTANTS.META_SET_NAME),\n                    i,\n                    metaNodes = [];\n\n                return TASYNC.call(function () {\n                    for (i = 0; i < paths.length; i += 1) {\n                        metaNodes.push(innerCore.loadByPath(root, paths[i]));\n                    }\n\n                    return TASYNC.lift(metaNodes);\n                }, self.loadPaths(self.getHash(root), JSON.parse(JSON.stringify(paths))));\n            }\n\n            //</editor-fold>\n\n            //<editor-fold=Modified Methods>\n            this.loadRoot = function (hash) {\n                return TASYNC.call(function (root) {\n                    return TASYNC.call(function (elements) {\n                        var i = 0;\n                        root.metaNodes = {};\n                        for (i = 0; i < elements.length; i += 1) {\n                            // It can happen that some elements just been removed during load because of missing base.\n                            if (elements[i]) {\n                                root.metaNodes[innerCore.getPath(elements[i])] = elements[i];\n                            }\n                        }\n                        return root;\n                    }, loadMetaSet(root));\n                }, innerCore.loadRoot(hash));\n            };\n\n            this.loadByPath = function (node, path) {\n                return TASYNC.call(function () {\n                    return innerCore.loadByPath(node, path);\n                }, self.loadPaths(self.getHash(node), [path]));\n            };\n\n            //functions where the cache may needs to be updated\n            this.createNode = function (parameters) {\n                var node = innerCore.createNode(parameters);\n\n                if (!parameters || !parameters.parent) {\n                    //a root just have been created\n                    node.metaNodes = {};\n                }\n\n                return node;\n            };\n\n            this.addMember = function (node, setName, member) {\n                var root = self.getRoot(node);\n                innerCore.addMember(node, setName, member);\n\n                //check if our cache needs to be updated\n                if (setName === CONSTANTS.META_SET_NAME && self.getPath(node) === self.getPath(root)) {\n                    root.metaNodes[self.getPath(member)] = member;\n                }\n            };\n\n            this.delMember = function (node, setName, memberPath) {\n                var root = self.getRoot(node);\n                innerCore.delMember(node, setName, memberPath);\n\n                //check if our cache needs to be updated\n                if (setName === CONSTANTS.META_SET_NAME && self.getPath(node) === self.getPath(root)) {\n                    delete root.metaNodes[memberPath];\n                }\n            };\n\n            this.deleteNode = function (node, technical) {\n                var root = self.getRoot(node);\n                if (root.metaNodes[self.getPath(node)]) {\n                    delete root.metaNodes[self.getPath(node)];\n                }\n                innerCore.deleteNode(node, technical);\n            };\n\n            this.moveNode = function (node, parent) {\n                var root = self.getRoot(node),\n                    oldpath = self.getPath(node),\n                    moved = innerCore.moveNode(node, parent);\n\n                if (root.metaNodes[oldpath]) {\n                    delete root.metaNodes[oldpath];\n                    root.metaNodes[self.getPath(moved)] = moved;\n                }\n\n                return moved;\n            };\n            //</editor-fold>\n\n            //<editor-fold=Added Methods>\n            this.isMetaNode = function (node) {\n                var root = self.getRoot(node);\n                if (root.metaNodes && root.metaNodes[self.getPath(node)]) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            this.getAllMetaNodes = function (node) {\n                var root = self.getRoot(node);\n\n                if (root.metaNodes) {\n                    return root.metaNodes;\n                }\n\n                return {};\n            };\n\n            this.getFCO = function (node) {\n                var root = self.getRoot(node),\n                    key;\n\n                for (key in root.metaNodes) {\n                    return self.getBaseRoot(root.metaNodes[key]);\n                }\n\n                return null; //if there is no object on META, there is no FCO!!! \n            };\n\n            //</editor-fold>\n        };\n\n        return MetaCacheCore;\n    }\n);\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/mixincore',[\n    'common/util/assert',\n    'common/core/tasync',\n    'common/util/canon',\n    'common/core/constants'\n], function (ASSERT, TASYNC, CANON, CONSTANTS) {\n    'use strict';\n\n    var MixinCore = function (innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            key,\n            self = this;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized MixinCore');\n\n        //<editor-fold=Helper Functions>\n\n        function realNode(node) { //TODO we have to make some more sophisticated distinction\n            if (self.getPath(node).indexOf('_') !== -1) {\n                return false;\n            }\n            return true;\n        }\n\n        function getOrderedMixinList(node) {\n            var paths = self.getMixinPaths(node),\n                metaNodes,\n                helper = {},\n                orderedList = [],\n                guid,\n                i;\n\n            if (paths.length === 0) {\n                return orderedList;\n            }\n\n            metaNodes = self.getAllMetaNodes(node);\n\n            for (i = 0; i < paths.length; i += 1) {\n                if (metaNodes[paths[i]]) {\n                    guid = self.getGuid(metaNodes[paths[i]]);\n                    helper[guid] = paths[i];\n                    orderedList.push(guid);\n                }\n\n            }\n\n            orderedList.sort();\n\n            for (i = 0; i < orderedList.length; i += 1) {\n                orderedList[i] = metaNodes[helper[orderedList[i]]];\n            }\n\n            return orderedList;\n        }\n\n        function getNodeDictionary(node, paths) {\n            var allMetaNodes = self.getAllMetaNodes(node),\n                dictionary = {},\n                i;\n\n            for (i = 0; i < paths.length; i += 1) {\n                if (allMetaNodes[paths[i]]) {\n                    dictionary[paths[i]] = allMetaNodes[paths[i]];\n                }\n            }\n\n            return dictionary;\n        }\n\n        function extendUniqueArray(base, extension) {\n            var i;\n\n            for (i = 0; i < extension.length; i += 1) {\n                if (base.indexOf(extension[i]) === -1) {\n                    base.push(extension[i]);\n                }\n            }\n        }\n\n        function getExtendedUniqueKeyedObject(base, extension) {\n            var extended = {},\n                key;\n            for (key in base) {\n                extended[key] = base[key];\n            }\n\n            for (key in extension) {\n                if (!base[key]) {\n                    extended[key] = extension[key];\n                }\n            }\n\n            return extended;\n        }\n\n        function getValidNames(node, getter, alreadyVisited) {\n            var base = self.getBase(node),\n                path = self.getPath(node),\n                names,\n                mixins = getOrderedMixinList(node),\n                i;\n\n            if (alreadyVisited[path]) {\n                return [];\n            }\n\n            if (base) {\n                names = getValidNames(base, getter, alreadyVisited);\n            } else {\n                names = [];\n            }\n\n            extendUniqueArray(names, getter(node));\n            alreadyVisited[path] = true;\n\n            for (i = 0; i < mixins.length; i += 1) {\n                extendUniqueArray(names, getValidNames(mixins[i], getter, alreadyVisited));\n            }\n\n            return names;\n        }\n\n        function getFirstMatchingRuleHolder(node, name, getter, alreadyVisited) {\n            var base = self.getBase(node),\n                path = self.getPath(node),\n                mixins = getOrderedMixinList(node),\n                ruleHolder = null,\n                i;\n\n            if (alreadyVisited[path]) {\n                return null;\n            }\n\n            //when it comes to rule holder, always the given node's own rule-set is the first\n            alreadyVisited[path] = true;\n            if (getter(node).indexOf(name) !== -1) {\n                return node;\n            }\n\n            if (base) {\n                ruleHolder = getFirstMatchingRuleHolder(base, name, getter, alreadyVisited);\n\n                if (ruleHolder) {\n                    return ruleHolder;\n                }\n            }\n\n            for (i = 0; i < mixins.length; i += 1) {\n                ruleHolder = getFirstMatchingRuleHolder(mixins[i], name, getter, alreadyVisited);\n                if (ruleHolder) {\n                    return ruleHolder;\n                }\n            }\n\n            return null;\n        }\n\n        function getAllMatchingRuleHolders(node, name, getter, alreadyVisited) {\n            var base = self.getBase(node),\n                path = self.getPath(node),\n                mixins = getOrderedMixinList(node),\n                ruleHolders = [],\n                i;\n\n            if (alreadyVisited[path]) {\n                return [];\n            }\n\n            //when it comes to rule holder, always the given node's own rule-set is the first\n            alreadyVisited[path] = true;\n            if (getter(node).indexOf(name) !== -1) {\n                ruleHolders.push(node);\n            }\n\n            if (base) {\n                ruleHolders = ruleHolders.concat(getAllMatchingRuleHolders(base, name, getter, alreadyVisited));\n            }\n\n            for (i = 0; i < mixins.length; i += 1) {\n                ruleHolders = ruleHolders.concat(getAllMatchingRuleHolders(mixins[i], name, getter, alreadyVisited));\n\n            }\n\n            return ruleHolders;\n        }\n\n        function getFirstMatchingMeta(node, name, matchFuction, getFunction) {\n            var metaRuleHolder = getFirstMatchingRuleHolder(node, name, matchFuction, {});\n\n            if (metaRuleHolder) {\n                return getFunction(metaRuleHolder, name);\n            }\n\n            return undefined;\n        }\n\n        function allValidRelationsNameGetter(node) {\n            return innerCore.getOwnValidPointerNames(node).concat(innerCore.getOwnValidSetNames(node));\n        }\n\n        function containmentGetter(node) {\n            return ['containment'];\n        }\n\n        function isTypeOf(node, typeNode, alreadyVisited) {\n            var base, mixins, i,\n                path = self.getPath(node);\n\n            if (alreadyVisited[path]) {\n                return false;\n            }\n\n            alreadyVisited[path] = true;\n\n            if (innerCore.isTypeOf(node, typeNode)) {\n                return true;\n            }\n\n            base = self.getBase(node);\n            if (base && isTypeOf(base, typeNode, alreadyVisited)) {\n                return true;\n            }\n\n            mixins = getOrderedMixinList(node);\n            for (i = 0; i < mixins.length; i += 1) {\n                if (isTypeOf(mixins[i], typeNode, alreadyVisited)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function convertRuleToItemizedArraySet(rule) {\n            var items = [],\n                minItems = [],\n                maxItems = [],\n                i;\n\n            for (i in rule) {\n                if (i !== 'min' && i !== 'max') {\n                    items.push(i);\n                    minItems.push(rule[i].min || -1);\n                    maxItems.push(rule[i].max || -1);\n                    delete rule[i];\n                }\n            }\n\n            rule.items = items;\n            rule.minItems = minItems;\n            rule.maxItems = maxItems;\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Modified Methods>\n\n        this.isTypeOf = function (node, typeNode) {\n            //TODO implement\n            if (!realNode(node)) {\n                return false;\n            }\n\n            return isTypeOf(node, typeNode, {});\n        };\n\n        this.isValidChildOf = function (node, parentNode) {\n            if (!realNode(node)) {\n                return true;\n            }\n            var childrenPaths,\n                metaNodes,\n                i;\n\n            if (innerCore.isValidChildOf(node, parentNode)) {\n                return true;\n            }\n\n            // Now we have to look deeper as containment rule may come from a mixin\n            childrenPaths = self.getValidChildrenPaths(parentNode);\n            metaNodes = self.getAllMetaNodes(node);\n\n            for (i = 0; i < childrenPaths.length; i += 1) {\n                if (metaNodes[childrenPaths[i]] && self.isTypeOf(node, metaNodes[childrenPaths[i]])) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        this.isValidTargetOf = function (node, source, name) {\n            if (!realNode(source) || node === null) {\n                return true;\n            }\n\n            var targetPaths,\n                metaNodes,\n                i;\n\n            if (innerCore.isValidTargetOf(node, source, name)) {\n                return true;\n            }\n\n            // Now we have to look deeper as pointer rule may come from a mixin\n            targetPaths = self.getValidTargetPaths(source, name);\n            metaNodes = self.getAllMetaNodes(node);\n\n            for (i = 0; i < targetPaths.length; i += 1) {\n                if (metaNodes[targetPaths[i]] && self.isTypeOf(node, metaNodes[targetPaths[i]])) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        this.isValidAttributeValueOf = function (node, name, value) {\n            if (!realNode(node)) {\n                return true;\n            }\n\n            var ruleHolder = getFirstMatchingRuleHolder(node, name, innerCore.getOwnValidAttributeNames, {});\n\n            if (ruleHolder) {\n                return innerCore.isValidAttributeValueOf(ruleHolder, name, value);\n            }\n\n            return false;\n        };\n\n        this.getValidPointerNames = function (node) {\n            return getValidNames(node, innerCore.getOwnValidPointerNames, {});\n        };\n\n        this.getValidSetNames = function (node) {\n            return getValidNames(node, innerCore.getOwnValidSetNames, {});\n        };\n\n        this.getValidAttributeNames = function (node) {\n            if (!realNode(node)) {\n                return [];\n            }\n\n            return getValidNames(node, innerCore.getOwnValidAttributeNames, {});\n        };\n\n        this.getValidAspectNames = function (node) {\n            return getValidNames(node, innerCore.getOwnValidAspectNames, {});\n        };\n\n        this.getConstraintNames = function (node) {\n            return getValidNames(node, innerCore.getConstraintNames, {});\n        };\n\n        this.getJsonMeta = function (node) {\n            var meta = {children: {}, attributes: {}, pointers: {}, aspects: {}, constraints: {}},\n                nullRule = {items: [], minItems: [], maxItems: []},\n                tempNode,\n                names,\n                pointer,\n                i, j;\n\n            meta.children = self.getChildrenMeta(node);\n            if (meta.children) {\n                convertRuleToItemizedArraySet(meta.children);\n            } else {\n                meta.children = nullRule;\n            }\n\n            //attributes\n            names = self.getValidAttributeNames(node);\n            for (i = 0; i < names.length; i += 1) {\n                meta.attributes[names[i]] = self.getAttributeMeta(node, names[i]);\n            }\n\n            //pointers\n            names = self.getValidPointerNames(node);\n            for (i = 0; i < names.length; i += 1) {\n                meta.pointers[names[i]] = self.getPointerMeta(node, names[i]);\n                convertRuleToItemizedArraySet(meta.pointers[names[i]]);\n            }\n\n            //sets\n            names = self.getValidSetNames(node);\n            for (i = 0; i < names.length; i += 1) {\n                meta.pointers[names[i]] = self.getPointerMeta(node, names[i]);\n                convertRuleToItemizedArraySet(meta.pointers[names[i]]);\n            }\n\n            //aspects\n            names = self.getValidAspectNames(node);\n\n            for (i = 0; i < names.length; i += 1) {\n                meta.aspects[names[i]] = self.getAspectMeta(node, names[i]);\n            }\n\n            //constraints\n            names = self.getConstraintNames(node);\n            for (i = 0; i < names.length; i += 1) {\n                meta.constraints[names[i]] = self.getConstraint(node, names[i]);\n            }\n\n            return meta;\n        };\n\n        this.getOwnJsonMeta = function (node) {\n            // We have to extend the meta definition by the mixins, but only if we talk about the own rule-set.\n            var jsonMeta = innerCore.getOwnJsonMeta(node),\n                mixins = this.getMixinPaths(node);\n\n            if (mixins.length > 0) {\n                jsonMeta.mixins = mixins;\n            }\n\n            return jsonMeta;\n        };\n\n        this.getValidChildrenPaths = function (node) {\n            return getValidNames(node, innerCore.getValidChildrenPaths, {});\n        };\n\n        this.getChildrenMeta = function (node) {\n            var ruleHolders = getAllMatchingRuleHolders(node, 'containment', containmentGetter, {}),\n                childrenMeta = {},\n                i;\n\n            for (i = 0; i < ruleHolders.length; i += 1) {\n                childrenMeta = getExtendedUniqueKeyedObject(childrenMeta, innerCore.getChildrenMeta(ruleHolders[i]));\n            }\n\n            if (Object.keys(childrenMeta).length === 0) {\n                return null;\n            }\n\n            return childrenMeta;\n        };\n\n        this.getPointerMeta = function (node, name) {\n            var ruleHolders = getAllMatchingRuleHolders(node, name, allValidRelationsNameGetter, {}),\n                i,\n                pointerMeta = {};\n\n            if (ruleHolders.length === 0) {\n                return undefined;\n            }\n\n            for (i = 0; i < ruleHolders.length; i += 1) {\n                pointerMeta = getExtendedUniqueKeyedObject(pointerMeta, innerCore.getPointerMeta(ruleHolders[i], name));\n            }\n            return pointerMeta;\n        };\n\n        this.getValidTargetPaths = function (node, name) {\n            var getTargetPaths = function (getNode) {\n                return innerCore.getValidTargetPaths(getNode, name);\n            };\n\n            return getValidNames(node, getTargetPaths, {});\n        };\n\n        this.getAttributeMeta = function (node, name) {\n            return getFirstMatchingMeta(node, name, innerCore.getOwnValidAttributeNames, innerCore.getAttributeMeta);\n        };\n\n        this.getAspectMeta = function (node, name) {\n            return getFirstMatchingMeta(node, name, innerCore.getOwnValidAspectNames, innerCore.getAspectMeta);\n        };\n\n        this.getSetNames = function (node) {\n            var rawNames = innerCore.getSetNames(node),\n                index = rawNames.indexOf(CONSTANTS.MIXINS_SET);\n\n            if (index !== -1) {\n                rawNames.splice(index, 1);\n            }\n\n            return rawNames;\n        };\n\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n\n        this.getMixinErrors = function (node) {\n            var errors = [],\n                mixinPaths = self.getMixinPaths(node),\n                allMetaNodes = self.getAllMetaNodes(node),\n                mixinNodes = getOrderedMixinList(node),\n                targetNode,\n                targetInfoTxt,\n                definitions,\n                ownName = self.getAttribute(node, 'name'),\n                names,\n                base = self.getBase(node),\n                ownKeys,\n                keys,\n                name,\n                path,\n                i, j, k;\n\n            logger.debug('getMixinErrors(' + ownName + ')');\n\n            //mixin is missing from meta\n            for (i = 0; i < mixinPaths.length; i += 1) {\n                if (!allMetaNodes[mixinPaths[i]]) {\n                    logger.error('mixin node is missing from Meta [' + mixinPaths[i] + ']');\n                    errors.push({\n                        severity: 'error',\n                        nodeName: ownName,\n                        type: CONSTANTS.MIXIN_ERROR_TYPE.MISSING,\n                        targetInfo: mixinPaths[i],\n                        message: '[' + ownName + ']: mixin node \\'' + mixinPaths[i] + '\\' is missing from the Meta',\n                        hint: 'Remove mixin or add to the Meta'\n                    });\n                }\n            }\n\n            //attribute definition collisions\n            definitions = {};\n            ownKeys = [];\n            if (base) {\n                ownKeys = self.getValidAttributeNames(base);\n            }\n            extendUniqueArray(ownKeys, self.getOwnValidAttributeNames(node));\n\n            for (i = 0; i < mixinNodes.length; i += 1) {\n                name = self.getAttribute(mixinNodes[i], 'name');\n                path = self.getPath(mixinNodes[i]);\n                keys = self.getValidAttributeNames(mixinNodes[i]);\n\n                for (j = 0; j < keys.length; j += 1) {\n                    if (ownKeys.indexOf(keys[j]) === -1) {\n                        if (definitions[keys[j]]) {\n                            logger.warn('colliding attribute (' + keys[j] + ') definition [' +\n                                definitions[keys[j]].name + ']vs[' + name + ']');\n                            errors.push({\n                                severity: 'warning',\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.ATTRIBUTE_COLLISION,\n                                nodeName: ownName,\n                                ruleName: keys[j],\n                                collisionPaths: [definitions[keys[j]].path, path],\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\n                                message: '[' + ownName + ']: inherits attribute definition \\'' +\n                                keys[j] + '\\' from [' + definitions[keys[j]].name + '] and [' + name + ']',\n                                hint: 'Remove one of the mixin relations'\n                            });\n                        } else {\n                            definitions[keys[j]] = {name: name, path: path, index: i};\n                        }\n                    }\n                }\n            }\n\n            //containment collisions\n            definitions = {};\n            ownKeys = [];\n            if (base) {\n                ownKeys = self.getValidChildrenPaths(base);\n            }\n            extendUniqueArray(ownKeys, self.getOwnValidChildrenPaths(node));\n\n            for (i = 0; i < mixinNodes.length; i += 1) {\n                name = self.getAttribute(mixinNodes[i], 'name');\n                keys = self.getValidChildrenPaths(mixinNodes[i]);\n                path = self.getPath(mixinNodes[i]);\n\n                for (j = 0; j < keys.length; j += 1) {\n                    if (ownKeys.indexOf(keys[j]) === -1) {\n                        if (definitions[keys[j]]) {\n                            targetNode = allMetaNodes[keys[j]];\n                            if (targetNode) {\n                                targetInfoTxt = '[' + self.getAttribute(targetNode, 'name') + ']';\n                            } else {\n                                targetInfoTxt = '\\'' + keys[j] + '\\'';\n                            }\n                            logger.warn('colliding child (' + keys[j] + ') definition [' +\n                                definitions[keys[j]].name + ']vs[' + name + ']');\n                            errors.push({\n                                severity: 'warning',\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.CONTAINMENT_COLLISION,\n                                nodeName: ownName,\n                                targetInfo: keys[j],\n                                targetNode: targetNode,\n                                collisionPaths: [definitions[keys[j]].path, path],\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\n                                message: '[' + ownName + ']: inherits child definition for ' +\n                                targetInfoTxt + ' from [' + definitions[keys[j]].name + '] and [' + name + ']',\n                                hint: 'Remove one of the mixin relations'\n                            });\n                        } else {\n                            definitions[keys[j]] = {name: name, path: path, index: i};\n                        }\n                    }\n                }\n            }\n\n            //pointer target collisions\n            names = this.getValidPointerNames(node);\n            for (i = 0; i < names.length; i += 1) {\n                definitions = {};\n                ownKeys = [];\n                if (base) {\n                    ownKeys = self.getValidTargetPaths(base, names[i]);\n                }\n                extendUniqueArray(ownKeys, self.getOwnValidTargetPaths(node, names[i]));\n                for (j = 0; j < mixinNodes.length; j += 1) {\n                    keys = self.getValidTargetPaths(mixinNodes[j], names[i]);\n                    name = self.getAttribute(mixinNodes[j], 'name');\n                    path = self.getPath(mixinNodes[j]);\n                    for (k = 0; k < keys.length; k += 1) {\n                        if (ownKeys.indexOf(keys[k]) === -1 && keys[k] !== 'min' && keys[k] !== 'max') {\n                            if (definitions[keys[k]]) {\n                                targetNode = allMetaNodes[keys[k]];\n                                if (targetNode) {\n                                    targetInfoTxt = '[' + self.getAttribute(targetNode, 'name') + ']';\n                                } else {\n                                    targetInfoTxt = '\\'' + keys[k] + '\\'';\n                                }\n                                logger.warn('colliding pointer (' + names[i] + ') target (' + keys[k] +\n                                    ') definition [' + definitions[keys[k]].name + ']vs[' + name + ']');\n                                errors.push({\n                                    severity: 'warning',\n                                    type: CONSTANTS.MIXIN_ERROR_TYPE.POINTER_COLLISION,\n                                    nodeName: ownName,\n                                    ruleName: names[i],\n                                    targetInfo: keys[k],\n                                    targetNode: targetNode,\n                                    collisionPaths: [definitions[keys[k]].path, path],\n                                    collisionNodes: [mixinNodes[definitions[keys[k]].index], mixinNodes[j]],\n                                    message: '[' + ownName + ']: inherits pointer (' + names[i]\n                                    + ') target definition of ' + targetInfoTxt +\n                                    ' from [' + definitions[keys[k]].name + '] and [' + name + ']',\n                                    hint: 'Remove one of the mixin relations'\n                                });\n                            } else {\n                                definitions[keys[k]] = {name: name, path: path, index: i};\n                            }\n                        }\n                    }\n                }\n            }\n\n            //set member collisions\n            names = this.getValidSetNames(node);\n            for (i = 0; i < names.length; i += 1) {\n                definitions = {};\n                ownKeys = [];\n                if (base) {\n                    ownKeys = self.getValidTargetPaths(base, names[i]);\n                }\n                extendUniqueArray(ownKeys, self.getOwnValidTargetPaths(node, names[i]));\n                for (j = 0; j < mixinNodes.length; j += 1) {\n                    keys = self.getValidTargetPaths(mixinNodes[j], names[i]);\n                    name = self.getAttribute(mixinNodes[j], 'name');\n                    path = self.getPath(mixinNodes[j]);\n                    for (k = 0; k < keys.length; k += 1) {\n                        if (ownKeys.indexOf(keys[k]) === -1 && keys[k] !== 'min' && keys[k] !== 'max') {\n                            if (definitions[keys[k]]) {\n                                targetNode = allMetaNodes[keys[k]];\n                                if (targetNode) {\n                                    targetInfoTxt = '[' + self.getAttribute(targetNode, 'name') + ']';\n                                } else {\n                                    targetInfoTxt = '\\'' + keys[k] + '\\'';\n                                }\n                                logger.warn('colliding set (' + names[i] + ') member (' + keys[k] +\n                                    ') definition [' + definitions[keys[k]].name + ']vs[' + name + ']');\n                                errors.push({\n                                    severity: 'warning',\n                                    type: CONSTANTS.MIXIN_ERROR_TYPE.SET_COLLISION,\n                                    nodeName: ownName,\n                                    ruleName: names[i],\n                                    targetInfo: keys[k],\n                                    targetNode: targetNode,\n                                    collisionPaths: [definitions[keys[k]].path, path],\n                                    collisionNodes: [mixinNodes[definitions[keys[k]].index], mixinNodes[j]],\n                                    message: '[' + ownName + ']: inherits set (' + names[i]\n                                    + ') member definition of ' + targetInfoTxt +\n                                    ' from [' + definitions[keys[k]].name + '] and [' + name + ']',\n                                    hint: 'Remove one of the mixin relations'\n                                });\n                            } else {\n                                definitions[keys[k]] = {name: name, path: path, index: i};\n                            }\n                        }\n                    }\n                }\n            }\n\n            //aspect collisions\n            definitions = {};\n            ownKeys = [];\n            if (base) {\n                ownKeys = self.getValidAspectNames(base);\n            }\n            extendUniqueArray(ownKeys, self.getOwnValidAspectNames(node));\n            for (i = 0; i < mixinNodes.length; i += 1) {\n                keys = self.getValidAspectNames(mixinNodes[i]);\n                name = self.getAttribute(mixinNodes[i], 'name');\n                path = self.getPath(mixinNodes[i]);\n                for (j = 0; j < keys.length; j += 1) {\n                    if (ownKeys.indexOf(keys[j]) === -1) {\n                        if (definitions[keys[j]]) {\n                            logger.warn('colliding aspect (' + keys[j] + ') definition [' +\n                                definitions[keys[j]].name + ']vs[' + name + ']');\n                            errors.push({\n                                severity: 'warning',\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.ASPECT_COLLISION,\n                                nodeName: ownName,\n                                ruleName: keys[j],\n                                collisionPaths: [definitions[keys[j]].path, path],\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\n                                message: '[' + ownName + ']: inherits aspect definition \\'' + keys[j] +\n                                '\\' from [' + definitions[keys[j]].name + '] and [' + name + ']',\n                                hint: 'Remove one of the mixin relations'\n                            });\n                        } else {\n                            definitions[keys[j]] = {name: name, path: path, index: i};\n                        }\n                    }\n                }\n            }\n\n            //constraint collision\n            definitions = {};\n            ownKeys = [];\n            if (base) {\n                ownKeys = self.getConstraintNames(base);\n            }\n            extendUniqueArray(ownKeys, self.getOwnConstraintNames(node));\n            for (i = 0; i < mixinNodes.length; i += 1) {\n                keys = self.getConstraintNames(mixinNodes[i]);\n                name = self.getAttribute(mixinNodes[i], 'name');\n                for (j = 0; j < keys.length; j += 1) {\n                    if (ownKeys.indexOf(keys[j]) === -1) {\n                        if (definitions[keys[j]]) {\n                            logger.warn('colliding constraint (' + keys[j] + ') definition [' +\n                                definitions[keys[j]].name + ']vs[' + name + ']');\n                            errors.push({\n                                severity: 'warning',\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.CONSTRAINT_COLLISION,\n                                nodeName: ownName,\n                                ruleName: keys[j],\n                                collisionPaths: [definitions[keys[j]].path, path],\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\n                                message: '[' + ownName + ']: inherits constraint definition \\'' + keys[j] +\n                                '\\' from [' + definitions[keys[j]].name + '] and [' + name + ']',\n                                hint: 'Remove one of the mixin relations'\n                            });\n                        } else {\n                            definitions[keys[j]] = {name: name, path: path, index: i};\n                        }\n                    }\n                }\n            }\n\n            logger.debug('getMixinErrors(' + ownName + ') finished');\n            return errors;\n        };\n\n        this.getMixinPaths = function (node) {\n            return innerCore.getOwnMemberPaths(node, CONSTANTS.MIXINS_SET);\n        };\n\n        this.getMixinNodes = function (node) {\n            var paths = self.getMixinPaths(node);\n            return getNodeDictionary(node, paths);\n        };\n\n        this.delMixin = function (node, mixinPath) {\n            var metaNodes = innerCore.getAllMetaNodes(node);\n\n            innerCore.delMember(node, CONSTANTS.MIXINS_SET, mixinPath);\n        };\n\n        this.addMixin = function (node, mixinPath) {\n            var metaNodes = innerCore.getAllMetaNodes(node);\n\n            if (metaNodes[mixinPath]) {\n                innerCore.addMember(node, CONSTANTS.MIXINS_SET, metaNodes[mixinPath]);\n            }\n        };\n\n        this.clearMixins = function (node) {\n            self.deleteSet(node, CONSTANTS.MIXINS_SET);\n        };\n\n        this.getBaseTypes = function (node) {\n            var metaType = innerCore.getBaseType(node),\n                metaTypes = [];\n\n            if (metaType) {\n                metaTypes = getOrderedMixinList(metaType);\n                metaTypes.unshift(metaType);\n            }\n\n            return metaTypes;\n        };\n\n        this.canSetAsMixin = function (node, mixinPath) {\n            var result = {\n                    isOk: true,\n                    reason: ''\n                },\n                mixinNode = self.getAllMetaNodes(node)[mixinPath];\n\n            if (self.getPath(node) === mixinPath) {\n                result.isOk = false;\n                result.reason = 'Node cannot be mixin of itself!';\n            } else if (!mixinNode) {\n                result.isOk = false;\n                result.reason = 'Mixin must be on the Meta!';\n            } else if (innerCore.isTypeOf(node, mixinNode)) {\n                result.isOk = false;\n                result.reason = 'Base of node cannot be its mixin as well!';\n            }\n\n            return result;\n        };\n        //</editor-fold>\n    };\n\n    return MixinCore;\n});\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/metaquerycore',[\n    'common/util/assert'\n], function (ASSERT) {\n    'use strict';\n\n    var MetaQueryCore = function (innerCore, options) {\n        ASSERT(typeof options === 'object');\n        ASSERT(typeof options.globConf === 'object');\n        ASSERT(typeof options.logger !== 'undefined');\n\n        var logger = options.logger,\n            self = this,\n            key;\n\n        for (key in innerCore) {\n            this[key] = innerCore[key];\n        }\n\n        logger.debug('initialized MetaQueryCore');\n\n        //<editor-fold=Helper Functions>\n        function sensitiveFilter(validNodes) {\n            var i;\n\n            i = validNodes.length;\n            while (i--) {\n                if (self.isConnection(validNodes[i]) || self.isAbstract(validNodes[i])) {\n                    validNodes.splice(i, 1);\n                }\n            }\n        }\n\n        //</editor-fold>\n\n        //<editor-fold=Modified Methods>\n        //</editor-fold>\n\n        //<editor-fold=Added Methods>\n        this.isAbstract = function (node) {\n            return self.getRegistry(node, 'isAbstract') === true;\n        };\n\n        this.isConnection = function (node) {\n            var validPtrNames = innerCore.getValidPointerNames(node);\n\n            return validPtrNames.indexOf('dst') !== -1 && validPtrNames.indexOf('src') !== -1;\n        };\n\n        this.getValidChildrenMetaNodes = function (parameters) {\n            var validNodes = [],\n                node = parameters.node,\n                metaNodes = self.getAllMetaNodes(node),\n                keys = Object.keys(metaNodes || {}),\n                i, j,\n                typeCounters = {},\n                children = parameters.children || [],\n                rules,\n                inAspect;\n\n            rules = innerCore.getChildrenMeta(node) || {};\n\n            for (i = 0; i < keys.length; i += 1) {\n                if (self.isValidChildOf(metaNodes[keys[i]], node)) {\n                    validNodes.push(metaNodes[keys[i]]);\n                }\n            }\n\n            //before every next step we check if we still have potential nodes\n            if (validNodes.length === 0) {\n                return validNodes;\n            }\n\n            if (parameters.sensitive === true) {\n                sensitiveFilter(validNodes);\n            }\n\n            //before every next step we check if we still have potential nodes\n            if (validNodes.length === 0) {\n                return validNodes;\n            }\n\n            if (parameters.multiplicity === true) {\n                if (rules.max && rules.max > -1 && innerCore.getChildrenRelids(node).length >= rules.max) {\n                    validNodes = [];\n                    return validNodes;\n                }\n                if (children.length === 0) {\n                    return validNodes; //we cannot check type-multiplicity without children\n                }\n\n                delete rules.max;\n                delete rules.min;\n\n                //we need to clear nodes that are not on the meta sheet\n                // and we have to initialize the counters\n                keys = Object.keys(rules);\n                for (i = 0; i < keys.length; i += 1) {\n                    if (metaNodes[keys[i]]) {\n                        typeCounters[keys[i]] = 0;\n                    } else {\n                        delete rules[keys[i]];\n                    }\n                }\n\n                keys = Object.keys(rules);\n                for (i = 0; i < children.length; i += 1) {\n                    for (j = 0; j < keys.length; j += 1) {\n                        if (innerCore.isTypeOf(children[i], metaNodes[keys[j]])) {\n                            typeCounters[keys[j]] += 1;\n                        }\n                    }\n                }\n\n                i = validNodes.length;\n                keys = Object.keys(typeCounters);\n                while (i--) {\n                    for (j = 0; j < keys.length; j += 1) {\n                        if (rules[keys[j]].max &&\n                            rules[keys[j]].max > -1 &&\n                            rules[keys[j]].max <= typeCounters[keys[j]] &&\n                            innerCore.isTypeOf(validNodes[i], metaNodes[keys[j]])) {\n                            validNodes.splice(i, 1); //FIXME slow, use only push instead\n                            break;\n                        }\n                    }\n                }\n            }\n\n            //before every next step we check if we still have potential nodes\n            if (validNodes.length === 0) {\n                return validNodes;\n            }\n\n            if (parameters.aspect) {\n                keys = innerCore.getAspectMeta(node, parameters.aspect);\n                i = validNodes.length;\n\n                while (i--) {\n                    inAspect = false;\n                    for (j = 0; j < keys.length; j += 1) {\n                        if (innerCore.isTypeOf(validNodes[i], metaNodes[keys[j]])) {\n                            inAspect = true;\n                            break;\n                        }\n                    }\n                    if (!inAspect) {\n                        validNodes.splice(i, 1);\n                    }\n                }\n            }\n            return validNodes;\n        };\n\n        this.getValidSetElementsMetaNodes = function (parameters) {\n            var validNodes = [],\n                node = parameters.node,\n                name = parameters.name,\n                metaNodes = self.getAllMetaNodes(node),\n                keys = Object.keys(metaNodes || {}),\n                i, j,\n                typeCounters = {},\n                members = parameters.members || [],\n                rules = self.getPointerMeta(node, name) || {};\n\n            for (i = 0; i < keys.length; i += 1) {\n                if (metaNodes[keys[i]] && self.isValidTargetOf(metaNodes[keys[i]], node, name)) {\n                    validNodes.push(metaNodes[keys[i]]);\n                }\n            }\n\n            //before every next step we check if we still have potential nodes\n            if (validNodes.length === 0) {\n                return validNodes;\n            }\n\n            if (parameters.sensitive === true) {\n                sensitiveFilter(validNodes);\n            }\n\n            //before every next step we check if we still have potential nodes\n            if (validNodes.length === 0) {\n                return validNodes;\n            }\n\n            if (parameters.multiplicity === true) {\n                if (rules.max && rules.max > -1 && innerCore.getMemberPaths(node).length >= rules.max) {\n                    validNodes = [];\n                    return validNodes;\n                }\n\n                if (members.length === 0) {\n                    return validNodes; //we cannot check type-multiplicity without children\n                }\n\n                delete rules.max;\n                delete rules.min;\n\n                //we need to clear nodes that are not on the meta sheet\n                // and we have to initialize the counters\n                keys = Object.keys(rules);\n                for (i = 0; i < keys.length; i += 1) {\n                    if (!metaNodes[keys[i]]) {\n                        delete rules[keys[i]];\n                    } else {\n                        typeCounters[keys[i]] = 0;\n                    }\n                }\n\n                keys = Object.keys(rules);\n                for (i = 0; i < members.length; i += 1) {\n                    for (j = 0; j < keys.length; j += 1) {\n                        if (innerCore.isTypeOf(members[i], metaNodes[keys[j]])) {\n                            typeCounters[keys[j]] += 1;\n                        }\n                    }\n                }\n\n                i = validNodes.length;\n                keys = Object.keys(typeCounters);\n                while (i--) {\n                    for (j = 0; j < keys.length; j += 1) {\n                        if (rules[keys[j]].max &&\n                            rules[keys[j]].max > -1 &&\n                            rules[keys[j]].max <= typeCounters[keys[j]] &&\n                            innerCore.isTypeOf(validNodes[i], metaNodes[keys[j]])) {\n                            validNodes.splice(i, 1); //FIXME slow, use only push instead\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return validNodes;\n        };\n        //</editor-fold>\n    };\n\n    return MetaQueryCore;\n});\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/core/librarycore',[\n        'common/util/assert',\n        'common/core/tasync',\n        'common/core/constants',\n        'common/util/random'\n    ], function (ASSERT, TASYNC, CONSTANTS, RANDOM) {\n        'use strict';\n\n        var LibraryCore = function (innerCore, options) {\n            ASSERT(typeof options === 'object');\n            ASSERT(typeof options.globConf === 'object');\n            ASSERT(typeof options.logger !== 'undefined');\n\n            var logger = options.logger,\n                self = this,\n                key;\n\n            for (key in innerCore) {\n                this[key] = innerCore[key];\n            }\n\n            logger.debug('initialized LibraryCore');\n\n            //<editor-fold=Helper Functions>\n            function getAllLibraryRoots(node) {\n                var roots = [];\n                while (node) {\n                    if (self.isLibraryRoot(node)) {\n                        roots.push(node);\n                    }\n                    node = self.getParent(node);\n                }\n\n                return roots;\n            }\n\n            function getLibraryName(node) {\n                ASSERT(self.isValidNode(node));\n                var name = '';\n\n                node = self.getParent(node);\n\n                while (node) {\n                    if (self.isLibraryRoot(node) && self.getParent(node) !== null) {\n                        name = self.getAttribute(node, 'name') + CONSTANTS.NAMESPACE_SEPARATOR + name;\n                    }\n                    node = self.getParent(node);\n                }\n\n                return name;\n            }\n\n            function getLibraryRootsInfo(node) {\n                var allMetaNodes = self.getAllMetaNodes(node),\n                    libraryRoots = {},\n                    path,\n                    roots,\n                    i,\n                    name;\n\n                for (path in allMetaNodes) {\n                    roots = getAllLibraryRoots(allMetaNodes[path]);\n                    for (i = 0; i < roots.length; i += 1) {\n                        name = getLibraryName(roots[i]) + self.getAttribute(roots[i], 'name');\n                        if (!libraryRoots[name]) {\n                            libraryRoots[name] = roots[i];\n                        }\n                    }\n                }\n\n                return libraryRoots;\n            }\n\n            function getRootOfLibrary(node, name) {\n                return self.getRoot(node).libraryRoots[name];\n            }\n\n            function getLibraryRoot(node) {\n                while (node) {\n                    if (self.isLibraryRoot(node) && !self.isLibraryElement(node)) {\n                        return node;\n                    }\n                    node = self.getParent(node);\n                }\n\n                return null;\n            }\n\n            function getLibraryInfo(libraryRootHashOrNode) {\n                var isNode = typeof libraryRootHashOrNode === 'object',\n                    libraryName = '',\n                    libraryNamePrefix = '',\n                    getPath = function (node) {\n                        if (isNode) {\n                            return self.getPath(node, libraryRootHashOrNode);\n                        } else {\n                            return self.getPath(node);\n                        }\n                    },\n                    getName = function (node) {\n                        return self.getFullyQualifiedName(node).substr(libraryNamePrefix.length);\n                    },\n                    getGuid = function (node) {\n                        if (isNode) {\n                            return self.getLibraryGuid(node, libraryName);\n                        } else {\n                            return self.getGuid(node);\n                        }\n                    },\n                    load = function () {\n                        if (isNode) {\n                            return self.loadSubTree(libraryRootHashOrNode);\n                        } else {\n                            return self.loadTree(libraryRootHashOrNode);\n                        }\n                    };\n\n                if (isNode) {\n                    libraryName = self.getAttribute(libraryRootHashOrNode, 'name');\n                    libraryNamePrefix = libraryName + '.';\n                }\n\n                return TASYNC.call(function (libraryNodes) {\n                    var info = {},\n                        infoItem,\n                        i;\n\n                    for (i = 1; i < libraryNodes.length; i += 1) {\n                        infoItem = {\n                            path: getPath(libraryNodes[i]),\n                            hash: self.getHash(libraryNodes[i]),\n                            fcn: getName(libraryNodes[i])\n                        };\n\n                        info[getGuid(libraryNodes[i])] = infoItem;\n                    }\n\n                    return info;\n                }, load());\n                //we use that the root of the library is always the first element\n            }\n\n            function removeLibraryRelations(root, path) {\n                var overlayItems = self.overlayQuery(root, path),\n                    i;\n\n                for (i = 0; i < overlayItems.length; i += 1) {\n                    if (overlayItems[i].s === path || overlayItems.t === path) {\n                        self.overlayRemove(root, overlayItems[i].s, overlayItems[i].n, overlayItems[i].t);\n                    }\n                }\n            }\n\n            function moveLibraryRelations(root, from, to) {\n                var overlayItems = self.overlayQuery(root, from),\n                    i;\n\n                for (i = 0; i < overlayItems.length; i += 1) {\n                    if (overlayItems[i].s === from) {\n                        self.overlayRemove(root, overlayItems[i].s, overlayItems[i].n, overlayItems[i].t);\n                        self.overlayInsert(root, to, overlayItems[i].n, overlayItems[i].t);\n\n                    } else if (overlayItems[i].t === from) {\n                        self.overlayRemove(root, overlayItems[i].s, overlayItems[i].n, overlayItems[i].t);\n                        self.overlayInsert(root, overlayItems[i].s, overlayItems[i].n, to);\n                    }\n                }\n\n            }\n\n            function isPathInSubTree(fullPath, subTreePath) {\n                if (fullPath === subTreePath) {\n                    return true;\n                }\n                if (fullPath.indexOf(subTreePath + CONSTANTS.PATH_SEP) === 0) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            function isClosureInternalTarget(targetPath, closureInfo) {\n                var selectionPath;\n\n                for (selectionPath in closureInfo.selection) {\n                    if (isPathInSubTree(targetPath, selectionPath)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            function collectBaseInformation(baseNode, closureInfo) {\n                var libraryRoots = getAllLibraryRoots(baseNode),\n                    namespaceInfo = {},\n                    i,\n                    namespace;\n\n                for (i = 0; i < libraryRoots.length; i += 1) {\n                    namespace = self.getFullyQualifiedName(libraryRoots[i]);\n                    namespaceInfo[namespace] = {\n                        info: self.getLibraryInfo(libraryRoots[i], namespace),\n                        guid: self.getLibraryGuid(baseNode, namespace)\n                    };\n                    if (namespaceInfo[namespace].info && namespaceInfo[namespace].info.hash) {\n                        namespaceInfo[namespace].hash = namespaceInfo[namespace].info.hash;\n                    }\n                }\n\n                closureInfo.bases[self.getGuid(baseNode)] = {\n                    originGuid: libraryRoots.length > 0 ? self.getLibraryGuid(baseNode) : self.getGuid(baseNode),\n                    name: self.getAttribute(baseNode, 'name'),\n                    fullName: self.getFullyQualifiedName(baseNode),\n                    namsespaces: namespaceInfo\n                };\n            }\n\n            function addRelationsFromNodeToClosureInfo(node, allMetaNodes, closureInfo) {\n                var basePath = self.getPath(node),\n                    overlayInfo = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY),\n                    overlayKey,\n                    pointerName,\n                    path,\n                    targetPath;\n\n                for (overlayKey in overlayInfo) {\n                    path = basePath + overlayKey;\n                    if (isClosureInternalTarget(path, closureInfo)) {\n                        for (pointerName in overlayInfo[overlayKey]) {\n                            if (self.isPointerName(pointerName)) {\n                                targetPath = basePath + overlayInfo[overlayKey][pointerName];\n                                if (pointerName === CONSTANTS.BASE_POINTER) {\n                                    if (allMetaNodes[targetPath]) {\n                                        collectBaseInformation(allMetaNodes[targetPath], closureInfo);\n                                        closureInfo.relations.preserved[path] =\n                                            closureInfo.relations.preserved[path] || {};\n                                        closureInfo.relations.preserved[path][CONSTANTS.BASE_POINTER] =\n                                            self.getGuid(allMetaNodes[targetPath]);\n                                    } else if (isClosureInternalTarget(targetPath, closureInfo)) {\n                                        closureInfo.relations.preserved[path] =\n                                            closureInfo.relations.preserved[path] || {};\n                                        closureInfo.relations.preserved[path][CONSTANTS.BASE_POINTER] = targetPath;\n                                    } else {\n                                        closureInfo.relations.lost[path] = closureInfo.relations.lost[path] || {};\n                                        closureInfo.relations.lost[path][CONSTANTS.BASE_POINTER] = targetPath;\n                                    }\n                                } else {\n                                    if (isClosureInternalTarget(targetPath, closureInfo)) {\n                                        closureInfo.relations.preserved[path] =\n                                            closureInfo.relations.preserved[path] || {};\n                                        closureInfo.relations.preserved[path][pointerName] = targetPath;\n                                    } else {\n                                        closureInfo.relations.lost[path] = closureInfo.relations.lost[path] || {};\n                                        closureInfo.relations.lost[path][pointerName] = targetPath;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            function normalizeSelectionForClosure(nodes) {\n                var paths = [],\n                    i, j,\n                    nodesToKeep = [],\n                    nodesToCut = {};\n\n                for (i = 0; i < nodes.length; i += 1) {\n                    paths.push(self.getPath(nodes[i]));\n                }\n\n                for (i = 0; i < paths.length; i += 1) {\n                    for (j = 0; j < paths.length; j += 1) {\n                        if (i !== j && isPathInSubTree(paths[j], paths[i])) {\n                            nodesToCut[paths[j]] = true;\n                        }\n                    }\n                }\n\n                for (i = 0; i < paths.length; i += 1) {\n                    if (nodesToCut[paths[i]] !== true) {\n                        nodesToKeep.push(nodes[i]);\n                    }\n                }\n\n                return nodesToKeep;\n\n            }\n\n            function getBasePathOfPath(path, closureInfo) {\n                var basePath;\n\n                for (basePath in closureInfo.hashes) {\n                    if (isPathInSubTree(path, basePath)) {\n                        return basePath;\n                    }\n                }\n\n                return '';\n            }\n\n            function mapRelationEndings(closureInfo) {\n                var source,\n                    sourceInfo,\n                    name,\n                    basePath;\n\n                for (source in closureInfo.relations.preserved) {\n                    sourceInfo = closureInfo.relations.preserved[source];\n                    for (name in sourceInfo) {\n                        if (!closureInfo.bases[sourceInfo[name]]) {\n                            basePath = getBasePathOfPath(sourceInfo[name], closureInfo);\n                            if (basePath) {\n                                sourceInfo[name] = sourceInfo[name].replace(basePath, closureInfo.hashes[basePath]);\n                            } else {\n                                logger.error('during closure generation unknown based target [' +\n                                    sourceInfo[name] + '] remained.');\n                                delete sourceInfo[name];\n                            }\n                        }\n                    }\n\n                    basePath = getBasePathOfPath(source, closureInfo);\n                    if (basePath) {\n                        closureInfo.relations.preserved[source.replace(basePath, closureInfo.hashes[basePath])] =\n                            closureInfo.relations.preserved[source];\n                        delete closureInfo.relations.preserved[source];\n                    } else {\n                        logger.error('during closure generation unknown based source [' +\n                            source + '] remained.');\n                        delete closureInfo.relations.preserved[source];\n                    }\n\n                }\n            }\n\n            function gatherOccurancesOfType(baseGuid, closureInformation, allMetaNodes) {\n                var keys = Object.keys(allMetaNodes),\n                    occurrences = [],\n                    i;\n\n                for (i = 0; i < keys.length; i += 1) {\n                    if (closureInformation.bases[baseGuid].originGuid === self.getLibraryGuid(allMetaNodes[keys[i]]) ||\n                        closureInformation.bases[baseGuid].originGuid === self.getGuid(allMetaNodes[keys[i]])) {\n                        occurrences.push(allMetaNodes[keys[i]]);\n                    }\n                }\n\n                return occurrences;\n            }\n\n            function checkClosure(allMetaNodes, closureInformation) {\n                //here we only check for exact GUID matches\n                //TODO we might be able to map even with no exact GUID match based on library information\n                var keys = Object.keys(allMetaNodes),\n                    occurrences, i, j, errorTxt;\n\n                closureInformation.destinationBases = {};\n                for (i = 0; i < keys.length; i += 1) {\n                    closureInformation.destinationBases[self.getGuid(allMetaNodes[keys[i]])] = keys[i];\n                }\n\n                keys = Object.keys(closureInformation.bases || {});\n\n                for (i = 0; i < keys.length; i += 1) {\n                    if (!closureInformation.destinationBases[keys[i]]) {\n                        occurrences = gatherOccurancesOfType(keys[i], closureInformation, allMetaNodes);\n                        if (occurrences.length === 0) {\n                            return new Error('Cannot find necessary base [' +\n                                closureInformation.bases[keys[i]].fullName + ' : ' + keys[i] + ']');\n                        } else if (occurrences.length === 1) {\n                            closureInformation.destinationBases[keys[i]] = self.getPath(occurrences[0]);\n                        } else {\n                            errorTxt = 'Ambiguous occurrences of base [' +\n                                closureInformation.bases[keys[i]].fullName + ' : ' + keys[i] + '] ( ';\n                            for (j = 0; j < occurrences.length; j += 1) {\n                                errorTxt += '[' + self.getFullyQualifiedName(occurrences[j]) +\n                                    ' : ' + self.getPath(occurrences[j]) + '] ';\n                            }\n                            errorTxt += ')';\n                            return new Error(errorTxt);\n                        }\n\n                    }\n                }\n\n                return null;\n            }\n\n            function getAncestor(node, from, to) {\n                var fromArray = from.split(CONSTANTS.PATH_SEP),\n                    toArray = to.split(CONSTANTS.PATH_SEP),\n                    commonAncestorPath = '',\n                    i;\n\n                fromArray.shift();\n                toArray.shift();\n\n                for (i = 0; i < fromArray.length && i < toArray.length; i += 1) {\n                    if (fromArray[i] === toArray[i]) {\n                        commonAncestorPath += CONSTANTS.PATH_SEP + fromArray[i];\n                    } else {\n                        break;\n                    }\n                }\n\n                while (self.getPath(node) !== commonAncestorPath && node !== null) {\n                    node = self.getParent(node);\n                }\n\n                return node;\n            }\n\n            function addRelation(parent, from, to, name) {\n                var commonAncestor = getAncestor(parent, from, to),\n                    overlay,\n                    collectionName = name + CONSTANTS.COLLECTION_NAME_SUFFIX,\n                    relFrom, relTo,\n                    newEntry;\n\n                if (commonAncestor) {\n                    overlay = self.getChild(commonAncestor, CONSTANTS.OVERLAYS_PROPERTY);\n                    relFrom = from.substr(self.getPath(commonAncestor).length);\n                    relTo = to.substr(self.getPath(commonAncestor).length);\n\n                    // First we set the forward direction\n                    newEntry = JSON.parse(JSON.stringify(self.getProperty(overlay, relFrom) || {}));\n                    newEntry[name] = relTo;\n                    self.setProperty(overlay, relFrom, newEntry);\n\n                    // Then the backward direction\n                    newEntry = JSON.parse(JSON.stringify(self.getProperty(overlay, relTo) || {}));\n                    newEntry[collectionName] = newEntry[collectionName] || [];\n                    newEntry[collectionName].push(relFrom);\n                    self.setProperty(overlay, relTo, newEntry);\n                } else {\n                    logger.error('unable to add relation: ' + name + '(' + from + '->' + to + ')');\n                }\n            }\n\n            function getFinalPath(path, closureInformation) {\n                // #9ab4 1eaad 98572 de827 49f0d 54520 3ad99 6b564 7 => 41 char is the hash length\n                var hash = path.substr(0, 41),\n                    resultPath = '';\n\n                if (closureInformation.relids[hash]) {\n                    resultPath = closureInformation.parent + CONSTANTS.PATH_SEP + closureInformation.relids[hash];\n                    resultPath += path.substr(41);\n                }\n\n                return resultPath;\n            }\n\n            function computePaths(closureInformation) {\n                var source, name, sourceInfo;\n\n                for (source in closureInformation.relations.preserved) {\n                    sourceInfo = closureInformation.relations.preserved[source];\n                    for (name in sourceInfo) {\n                        if (closureInformation.destinationBases[sourceInfo[name]]) {\n                            sourceInfo[name] = closureInformation.destinationBases[sourceInfo[name]];\n                        } else {\n                            sourceInfo[name] = getFinalPath(sourceInfo[name], closureInformation);\n                        }\n                    }\n                }\n\n                for (source in closureInformation.relations.preserved) {\n                    closureInformation.relations.preserved[getFinalPath(source, closureInformation)] =\n                        closureInformation.relations.preserved[source];\n                    delete closureInformation.relations.preserved[source];\n                }\n            }\n\n            //</editor-fold>\n\n            //<editor-fold=Modified Methods>\n            this.loadRoot = function (hash) {\n                return TASYNC.call(function (root) {\n                    root.libraryRoots = getLibraryRootsInfo(root);\n                    return root;\n                }, innerCore.loadRoot(hash));\n            };\n\n            this.createNode = function (parameters) {\n                var node;\n\n                if (parameters && parameters.parent &&\n                    (self.isLibraryRoot(parameters.parent) || self.isLibraryElement(parameters.parent))) {\n                    return new Error('Not allowed to create new node inside library.');\n                }\n\n                if (parameters && parameters.base && self.isLibraryRoot(parameters.base)) {\n                    return new Error('Not allowed to instantiate library root.');\n                }\n\n                node = innerCore.createNode(parameters);\n                if (node.parent === null) {\n                    node.libraryRoots = {};\n                }\n\n                return node;\n            };\n\n            this.deleteNode = function (node, technical) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to remove library node by simply deleting them.');\n                }\n\n                return innerCore.deleteNode(node, technical);\n            };\n\n            this.copyNode = function (node, parent) {\n                if (self.isLibraryRoot(parent) || self.isLibraryElement(parent)) {\n                    return new Error('Not allowed to add nodes inside a library.');\n                }\n\n                if (self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to copy library root.');\n                }\n\n                return innerCore.copyNode(node, parent);\n            };\n\n            this.copyNodes = function (nodes, parent) {\n                var i;\n                if (self.isLibraryRoot(parent) || self.isLibraryElement(parent)) {\n                    return new Error('Not allowed to add nodes inside a library.');\n                }\n\n                for (i = 0; i < nodes.length; i += 1) {\n                    if (self.isLibraryRoot(nodes[i])) {\n                        return new Error('Not allowed to copy library root.');\n                    }\n                }\n\n                return innerCore.copyNodes(nodes, parent);\n            };\n\n            this.moveNode = function (node, parent) {\n                if (self.isLibraryRoot(parent) || self.isLibraryElement(parent)) {\n                    return new Error('Not allowed to add nodes inside a library.');\n                }\n\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to move library elements.');\n                }\n\n                return innerCore.moveNode(node, parent);\n            };\n\n            this.setAttribute = function (node, name, value) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setAttribute(node, name, value);\n            };\n\n            this.delAttribute = function (node, name) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delAttribute(node, name);\n            };\n\n            this.setRegistry = function (node, name, value) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setRegistry(node, name, value);\n            };\n\n            this.delRegistry = function (node, name) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delRegistry(node, name);\n            };\n\n            this.setPointer = function (node, name, target) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setPointer(node, name, target);\n            };\n\n            this.deletePointer = function (node, name) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.deletePointer(node, name);\n            };\n\n            this.setBase = function (node, base) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                if (base && self.isLibraryRoot(base)) {\n                    return new Error('Not allowed to instantiate library root.');\n                }\n\n                return innerCore.setBase(node, base);\n            };\n\n            this.addMember = function (node, name, member) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.addMember(node, name, member);\n            };\n\n            this.delMember = function (node, name, path) {\n                if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delMember(node, name, path);\n            };\n\n            this.setMemberAttribute = function (node, setName, memberPath, attrName, value) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.setMemberAttribute(node, setName, memberPath, attrName, value);\n            };\n\n            this.delMemberAttribute = function (node, setName, memberPath, attrName) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.delMemberAttribute(node, setName, memberPath, attrName);\n            };\n\n            this.setMemberRegistry = function (node, setName, memberPath, regName, value) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.setMemberRegistry(node, setName, memberPath, regName, value);\n            };\n\n            this.delMemberRegistry = function (node, setName, memberPath, regName) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.delMemberRegistry(node, setName, memberPath, regName);\n            };\n\n            this.createSet = function (node, name) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.createSet(node, name);\n            };\n\n            this.deleteSet = function (node, name) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.deleteSet(node, name);\n            };\n\n            this.setGuid = function (node, guid) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    //FIXME cannot return any error in async functions :/\n                    // /return new Error('Not allowed to modify library elements.');\n                } else {\n                    return innerCore.setGuid(node, guid);\n                }\n            };\n\n            this.setConstraint = function (node, name, constraint) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.setConstraint(node, name, constraint);\n            };\n\n            this.delConstraint = function (node, name) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n                return innerCore.delConstraint(node, name);\n            };\n\n            this.clearMetaRules = function (node) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.clearMetaRules(node);\n            };\n\n            this.setAttributeMeta = function (node, name, rule) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setAttributeMeta(node, name, rule);\n            };\n\n            this.delAttributeMeta = function (node, name) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delAttributeMeta(node, name);\n            };\n\n            this.setChildMeta = function (node, child, min, max) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                if (self.isLibraryRoot(child)) {\n                    return new Error('Not allowed to use library root as valid child.');\n                }\n\n                return innerCore.setChildMeta(node, child, min, max);\n            };\n\n            this.delChildMeta = function (node, childPath) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delChildMeta(node, childPath);\n            };\n\n            this.setChildrenMetaLimits = function (node, min, max) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setChildrenMetaLimits(node, min, max);\n            };\n\n            this.setPointerMetaTarget = function (node, name, target, min, max) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setPointerMetaTarget(node, name, target, min, max);\n            };\n\n            this.delPointerMetaTarget = function (node, name, targetPath) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delPointerMetaTarget(node, name, targetPath);\n            };\n\n            this.setPointerMetaLimits = function (node, name, min, max) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setPointerMetaLimits(node, name, min, max);\n            };\n\n            this.delPointerMeta = function (node, name) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delPointerMeta(node, name);\n            };\n\n            this.setAspectMetaTarget = function (node, name, target) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.setAspectMetaTarget(node, name, target);\n            };\n\n            this.delAspectMetaTarget = function (node, name, targetPath) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delAspectMetaTarget(node, name, targetPath);\n            };\n\n            this.delAspectMeta = function (node, name) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delAspectMeta(node, name);\n            };\n\n            this.delMixin = function (node, mixinPath) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.delMixin(node, mixinPath);\n            };\n\n            this.addMixin = function (node, mixinPath) {\n                var libraryName,\n                    root = self.getRoot(node);\n\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                for (libraryName in root.libraryRoots) {\n                    if (self.getPath(root.libraryRoots[libraryName]) === mixinPath) {\n                        return new Error('Not allowed to use library root as mixin.');\n                    }\n                }\n\n                return innerCore.addMixin(node, mixinPath);\n            };\n\n            this.clearMixins = function (node) {\n                if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\n                    return new Error('Not allowed to modify library elements.');\n                }\n\n                return innerCore.clearMixins(node);\n            };\n            //</editor-fold>\n\n            //<editor-fold=Added Methods>\n\n            this.getLibraryRoot = function (node, name) {\n                var root = self.getRoot(node);\n\n                return root.libraryRoots[name] || null;\n            };\n\n            this.isLibraryElement = function (node) {\n                var parent = self.getParent(node);\n\n                while (parent) {\n                    if (self.isLibraryRoot(parent)) {\n                        return true;\n                    }\n                    parent = self.getParent(parent);\n                }\n\n                return false;\n            };\n\n            this.isLibraryRoot = function (node) {\n                if (innerCore.getAttribute(node, '_libraryInfo')) {\n                    return true;\n                }\n                return false;\n            };\n\n            this.getNamespace = function (node) {\n                var libPrefix = getLibraryName(node);\n\n                if (libPrefix) {\n                    // Trim the trailing dot..\n                    libPrefix = libPrefix.substring(0, libPrefix.length - 1);\n                }\n\n                return libPrefix;\n            };\n\n            this.getFullyQualifiedName = function (node) {\n                ASSERT(self.isValidNode(node));\n                return getLibraryName(node) + self.getAttribute(node, 'name');\n            };\n\n            this.getLibraryGuid = function (node, name) {\n                ASSERT(self.isValidNode(node));\n                var libraryRoot;\n\n                if (!self.isLibraryElement(node) && !self.isLibraryRoot(node)) {\n                    return new Error('Node is not a library member');\n                }\n\n                if (!name) {\n                    libraryRoot = getLibraryRoot(node);\n                } else {\n                    libraryRoot = getRootOfLibrary(node, name);\n                }\n\n                if (!libraryRoot) {\n                    return new Error('Unknown library was given');\n                }\n\n                if (self.getFullyQualifiedName(node).indexOf(self.getFullyQualifiedName(libraryRoot)) !== 0) {\n                    return new Error('Node is not a member of the library');\n                }\n\n                if (self.isLibraryRoot(node) && self.getPath(node) === self.getPath(libraryRoot)) {\n                    return innerCore.getDataGuid(node);\n                }\n\n                return innerCore.getDeducedGuid(node, self.getLibraryGuid(self.getParent(node), name));\n            };\n\n            this.addLibrary = function (node, name, libraryRootHash, libraryInfo) {\n                var root = self.getRoot(node),\n                    libraryRelid = RANDOM.generateRelid(root.data);\n\n                innerCore.setProperty(root, libraryRelid, libraryRootHash);\n                root.childrenRelids = null;\n\n                return TASYNC.call(function (newLibraryRoot) {\n                    return TASYNC.call(function (libraryNodes) {\n                        var inMeta = self.getMemberPaths(newLibraryRoot, CONSTANTS.META_SET_NAME),\n                            libraryInfoAttribute = libraryInfo;\n                        //remove the libraryRoot from the libraryNodes\n                        libraryNodes.shift();\n\n                        //set the name of the library root\n                        innerCore.setAttribute(newLibraryRoot, 'name', name);\n\n                        //add library_info\n                        libraryInfoAttribute.hash = libraryRootHash;\n                        innerCore.setAttribute(newLibraryRoot, '_libraryInfo', libraryInfoAttribute);\n\n                        if (libraryNodes.length > 0) {\n                            //connect the FCO as base of libraryFCO\n                            innerCore.setBase(self.getBaseRoot(libraryNodes[0]), self.getFCO(root));\n\n                            //adding nodes to the global META\n                            var i;\n                            for (i = 0; i < libraryNodes.length; i += 1) {\n                                if (inMeta.indexOf(self.getPath(libraryNodes[i])) !== -1) {\n                                    innerCore.addMember(root, CONSTANTS.META_SET_NAME, libraryNodes[i]);\n                                }\n                            }\n                        }\n                        //refreshing libraryInfo\n                        root.libraryRoots[name] = newLibraryRoot;\n                    }, self.loadSubTree(newLibraryRoot));\n                }, self.loadChild(root, libraryRelid));\n            };\n\n            this.updateLibrary = function (node, name, updatedLibraryRootHash, libraryInfo/*, updateInstructions*/) {\n                var logs = {added: {}, updated: {}, moved: {}, removed: {}},\n                    root = self.getRoot(node),\n                    libraryRoot = getRootOfLibrary(root, name),\n                    relid,\n                    FCO = self.getFCO(root);\n\n                if (!libraryRoot) { //do nothing if not valid library\n                    return logs;\n                }\n\n                relid = self.getRelid(libraryRoot);\n\n                return TASYNC.call(function (oldInfo, newInfo) {\n                    var newNodePaths = [],\n                        removedNodePaths = [],\n                        i,\n                        moves = [],\n                        guid;\n\n                    for (guid in newInfo) {\n                        if (!oldInfo[guid]) {\n                            newNodePaths.push('/' + relid + newInfo[guid].path);\n                        } else if (oldInfo[guid].path !== newInfo[guid].path) {\n                            moves.push({from: '/' + relid + oldInfo[guid].path, to: '/' + relid + newInfo[guid].path});\n                        }\n                    }\n\n                    for (guid in oldInfo) {\n                        if (!newInfo[guid]) {\n                            removedNodePaths.push('/' + relid + oldInfo[guid].path);\n                        }\n                    }\n\n                    for (i = 0; i < removedNodePaths.length; i += 1) {\n                        removeLibraryRelations(root, removedNodePaths[i]);\n                    }\n\n                    for (i = 0; i < moves.length; i += 1) {\n                        moveLibraryRelations(root, moves[i].from, moves[i].to);\n                    }\n\n                    innerCore.setProperty(root, relid, updatedLibraryRootHash);\n                    root = self.removeChildFromCache(root, relid);\n                    return TASYNC.call(function (newLibraryRoot) {\n                        return TASYNC.call(function (newLibraryNodes) {\n                            var i,\n                                inMeta = self.getMemberPaths(newLibraryRoot, CONSTANTS.META_SET_NAME),\n                                libraryInfoAttribute = libraryInfo,\n                                libraryFCO;\n\n                            newLibraryNodes.shift();\n                            //set the name of the library root\n                            innerCore.setAttribute(newLibraryRoot, 'name', name);\n\n                            //add library_info\n                            libraryInfoAttribute.hash = updatedLibraryRootHash;\n                            innerCore.setAttribute(newLibraryRoot, '_libraryInfo', libraryInfoAttribute);\n\n                            if (newLibraryNodes.length > 0) {\n                                //connect the FCO as base of libraryFCO, but be sure to remove the nullPtr\n\n                                libraryFCO = self.getBaseRoot(newLibraryNodes[0]);\n                                innerCore.deletePointer(libraryFCO, 'base');\n                                innerCore.setBase(libraryFCO, FCO);\n\n                                //adding new nodes to the global META\n                                for (i = 0; i < newLibraryNodes.length; i += 1) {\n                                    if (newNodePaths.indexOf(self.getPath(newLibraryNodes[i])) !== -1 &&\n                                        inMeta.indexOf(self.getPath(newLibraryNodes[i])) !== -1) {\n                                        innerCore.addMember(root, CONSTANTS.META_SET_NAME, newLibraryNodes[i]);\n                                    }\n                                }\n                            }\n\n                            root.libraryRoots[name] = newLibraryRoot;\n\n                            return logs;\n                        }, self.loadSubTree(newLibraryRoot));\n                    }, self.loadChild(root, relid));\n                }, getLibraryInfo(libraryRoot), getLibraryInfo(updatedLibraryRootHash));\n\n            };\n\n            this.removeLibrary = function (node, name) {\n                ASSERT(self.isValidNode(node));\n                var root = self.getRoot(node),\n                    libraryRoot = root.libraryRoots[name];\n\n                if (libraryRoot && !self.isLibraryElement(libraryRoot)) {\n                    innerCore.deleteNode(root.libraryRoots[name], true);\n                    delete root.libraryRoots[name];\n                }\n\n            };\n\n            this.renameLibrary = function (node, oldName, newName) {\n                ASSERT(self.isValidNode(node));\n                var root = self.getRoot(node);\n\n                ASSERT(typeof oldName === 'string' && typeof newName === 'string' &&\n                    oldName.indexOf(CONSTANTS.NAMESPACE_SEPARATOR) === -1 &&\n                    newName.indexOf(CONSTANTS.NAMESPACE_SEPARATOR) === -1 &&\n                    root.libraryRoots[oldName] && !root.libraryRoots[newName]);\n\n                innerCore.setAttribute(root.libraryRoots[oldName], 'name', newName);\n                root.libraryRoots[newName] = root.libraryRoots[oldName];\n                delete root.libraryRoots[oldName];\n            };\n\n            this.getLibraryNames = function (node) {\n                ASSERT(self.isValidNode(node));\n                return Object.keys(self.getRoot(node).libraryRoots);\n            };\n\n            this.getLibraryMetaNodes = function (node, name, onlyOwn) {\n                var allNodes = self.getAllMetaNodes(node),\n                    libraryNodes = {},\n                    path;\n\n                for (path in allNodes) {\n                    if (onlyOwn) {\n                        if (self.getNamespace(allNodes[path]) === name) {\n                            libraryNodes[path] = allNodes[path];\n                        }\n                    } else {\n                        if (self.getNamespace(allNodes[path]).indexOf(name) === 0) {\n                            libraryNodes[path] = allNodes[path];\n                        }\n                    }\n                }\n\n                return libraryNodes;\n            };\n\n            this.getLibraryInfo = function (node, name) {\n                var libroot = getRootOfLibrary(node, name);\n                return self.getAttribute(libroot, '_libraryInfo');\n            };\n\n            this.getClosureInformation = function (nodes) {\n                ASSERT(nodes.length > 0);\n                var closureInfo = {\n                        hashes: {},\n                        selection: {},\n                        bases: {},\n                        relations: {preserved: {}, lost: {}}\n                    },\n                    infoLosses = {},\n                    allMetaNodes,\n                    path,\n                    node,\n                    keys,\n                    i;\n\n                nodes = normalizeSelectionForClosure(nodes);\n                allMetaNodes = this.getAllMetaNodes(nodes[0]);\n\n                // We first collect the absolute paths of the selected nodes\n                for (i = 0; i < nodes.length; i += 1) {\n                    // The selection cannot contain library elements as that would violate read-only\n                    if (this.isLibraryElement(nodes[i]) || this.isLibraryRoot(nodes[i])) {\n                        return new Error('Cannot select node[' +\n                            this.getPath(nodes[i]) + '] because it is library content!'\n                        );\n                    }\n                    if (this.getParent(nodes[i]) === null) {\n                        return new Error('Cannot select the project root!');\n                    }\n                    closureInfo.selection[this.getPath(nodes[i])] = this.getGuid(nodes[i]);\n                    closureInfo.hashes[this.getPath(nodes[i])] = this.getHash(nodes[i]);\n                }\n\n                // Secondly, we collect relation information (the first order ones).\n                // We leave the handling of the root node's overlay info for a separate step\n                for (i = 0; i < nodes.length; i += 1) {\n                    node = this.getParent(nodes[i]);\n                    while (this.getPath(node)) { // until it is not the root\n                        addRelationsFromNodeToClosureInfo(node, allMetaNodes, closureInfo);\n                        node = this.getParent(node);\n                    }\n                }\n\n                // Finally we process the relations of the root\n                addRelationsFromNodeToClosureInfo(this.getRoot(nodes[0]), allMetaNodes, closureInfo);\n\n                //now we combine the selection and hashes info\n                keys = Object.keys(closureInfo.selection);\n                for (i = 0; i < keys.length; i += 1) {\n                    closureInfo.selection[closureInfo.selection[keys[i]]] = closureInfo.hashes[keys[i]];\n                    delete closureInfo.selection[keys[i]];\n                }\n\n                //now map the paths to some guid+relpath format\n                mapRelationEndings(closureInfo);\n\n                //remove hashes field from closure information\n                delete closureInfo.hashes;\n\n                //checking and logging lost relation information\n                logger.debug('Closure creation finished!', closureInfo);\n                for (path in closureInfo.relations.lost) {\n                    if (closureInfo.relations.lost[path][CONSTANTS.BASE_POINTER]) {\n                        //we do not allow external non-Meta bases\n                        return new Error('Closure cannot be created due to [' + path +\n                            '] misses its base [' + closureInfo.relations.lost[path][CONSTANTS.BASE_POINTER] + '].');\n                    }\n                }\n\n                return closureInfo;\n            };\n\n            this.importClosure = function (parent, closureInformation) {\n                //at this point we can assume that the database has the necessary blobs\n                var allMetaNodes = this.getAllMetaNodes(parent),\n                    checkResult,\n                    key,\n                    name,\n                    longestNewRelid = '',\n                    reservedRelids = this.getChildrenRelids(parent, true),\n                    newRelid;\n\n                checkResult = checkClosure(allMetaNodes, closureInformation);\n\n                if (checkResult) {\n                    return checkResult;\n                }\n\n                closureInformation.relids = {};\n                closureInformation.parent = this.getPath(parent);\n\n                // Attaching the selected nodes under the parent node\n                for (key in closureInformation.selection) {\n                    newRelid = RANDOM.generateRelid(reservedRelids,\n                        innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY));\n                    reservedRelids[newRelid] = true;\n                    innerCore.setProperty(parent, newRelid, closureInformation.selection[key]);\n                    closureInformation.relids[closureInformation.selection[key]] = newRelid;\n                    if (newRelid.length > longestNewRelid.length) {\n                        longestNewRelid = newRelid;\n                    }\n                }\n\n                parent.childrenRelids = null;\n\n                // Now processing the new relid creations\n                innerCore.processRelidReservation(parent, longestNewRelid);\n\n                // Replacing the paths in the closure information with actual paths in the target project\n                computePaths(closureInformation);\n\n                // Creating all the relations\n                for (key in closureInformation.relations.preserved) {\n                    for (name in closureInformation.relations.preserved[key]) {\n                        addRelation(parent, key, closureInformation.relations.preserved[key][name], name);\n                    }\n                }\n\n                logger.debug('Closure import finished!', closureInformation);\n\n                return closureInformation;\n            };\n            //</editor-fold>\n        };\n\n        return LibraryCore;\n    }\n);\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * This class defines the public API of the WebGME-Core\n *\n * @author kecso / https://github.com/kecso\n * @module Core\n */\n\n/**\n * @typedef {object} Node - the object that represents the atomic element of the containment hierarchy.\n */\n\n/**\n * @typedef {object} DataObject - Inner data of {@link module:Core~Node} that can be serialized and saved in the storage.\n */\n\n/**\n * @typedef {object} GmePersisted - the result object of a persist which contains information about the newly\n * created data objects.\n * @prop {module:Core~ObjectHash} rootHash - Hash of the root node.\n * @prop {Object.<module:Core~ObjectHash, module:Core~DataObject>} objects - Hash of the root node.\n */\n\n/**\n * @typedef {string} ObjectHash - Unique SHA-1 hash for the node object.\n * @example\n * '#5496cf226542fcceccf89056f0d27564abc88c99'\n */\n\n/**\n * @typedef {string} GUID - Globally unique identifier. A formatted string containing hexadecimal characters. If some\n * projects share some GUIDs that can only be because the node with the given identification represents the same\n * concept.\n * @example\n * 'cd891e7b-e2ea-e929-f6cd-9faf4f1fc045'\n */\n\n/**\n * @typedef {object} Constraint - An object that represents some additional rule regarding some node of the project.\n * @prop {string} script - The script which checks if the constraint is met.\n * @prop {string} info - Short description of the constraint.\n * @prop {string} priority - Gives instructions on how to deal with violations of the constraint.\n */\n\n/**\n * @typedef {object} RelationRule - An object that represents a relational type rule-set (pointer/set).\n * @prop {integer} [min] - The minimum amount of target necessary for the relationship (if not present or '-1'\n * then there is no minimum rule that applies)\n * @prop {integer} [max] - The minimum amount of target necessary for the relationship (if not present or '-1'\n * then there is no minimum rule that applies)\n * @prop {object} [absolutePathOfTarget] - special rules regarding the given type (if the object is empty, it still\n * represents that the type is a valid target of the relationship)\n * @prop {integer} [absolutePathOfTarget.min] - The minimum amount of target necessary for the relationship\n * from the given type (if not present or '-1' then there is no minimum rule that applies)\n * @prop {integer} [absolutePathOfTarget.max] - The minimum amount of target necessary for the relationship\n * from the given type (if not present or '-1' then there is no minimum rule that applies)\n * @example\n * '{\n *  'min': 1,\n *  'max': -1,\n *  'any/path/of/node':{\n *   'min':-1,\n *   'max':2\n *   },\n *   'any/other/valid/path':{\n *   }\n * }'\n */\n\n/**\n * @typedef {object} MixinViolation - An object that has information about a mixin violation in the given node.\n * @prop {string} [severity] - The severity of the given error ('error','warning').\n * @prop {string} [type] - 'missing', 'attribute collision', 'set collision',\n * 'pointer collision', 'containment collision', 'aspect collision', 'constraint collision'\n * @prop {string|undefined} [ruleName] - The name of the affected rule definition  (if available).\n * @prop {string|undefined} [targetInfo] - The path of the target of the violation (if available).\n * @prop {module:Core~Node|undefined} [targetNode] - The target node of the violation (if available).\n * @prop {string[]} [collisionPaths] - The list of paths of colliding nodes (if any).\n * @prop {module:Core~Node[]} [collisionNodes] - The colliding mixin nodes (if any).\n * @prop {string} [message] - The description of the violation.\n * @prop {string} [hint] - Hint on how to resolve the issue.\n * @example\n * '{\n * 'severity': 'error',\n * 'type': 'missing',\n * 'targetInfo': '/E/b',\n * 'message': '[MyObject]: mixin node \\'E/b\\' is missing from the Meta',\n * 'hint': 'Remove mixin or add to the Meta'\n * }'\n * @example\n * '{\n * 'severity': 'warning',\n * 'type': 'attribute collision',\n * 'ruleName': 'value',\n * 'collisionPaths': ['/E/a','/E/Z'],\n * 'collisionNodes': [Object,Object],\n * 'message':'[MyObject]: inherits attribute definition \\'value'\\ from [TypeA] and [TypeB]',\n * 'hint': 'Remove one of the mixin relations'\n * }'\n */\n\ndefine('common/core/core',[\n    'common/core/corerel',\n    'common/core/setcore',\n    'common/core/guidcore',\n    'common/core/nullpointercore',\n    'common/core/coreunwrap',\n    'common/core/coretype',\n    'common/core/constraintcore',\n    'common/core/coretree',\n    'common/core/metacore',\n    'common/core/coretreeloader',\n    'common/core/corediff',\n    'common/core/metacachecore',\n    'common/core/mixincore',\n    'common/core/metaquerycore',\n    'common/core/librarycore'\n], function (CoreRel,\n             Set,\n             Guid,\n             NullPtr,\n             UnWrap,\n             Type,\n             Constraint,\n             CoreTree,\n             MetaCore,\n             TreeLoader,\n             CoreDiff,\n             MetaCacheCore,\n             MixinCore,\n             MetaQueryCore,\n             LibraryCore) {\n    'use strict';\n\n    /**\n     * @param {object} storageObject\n     * @param {object} options - contains logging information\n     * @alias Core\n     * @constructor\n     */\n    function Core(storage, options) {\n        var core,\n            coreLayers = [];\n        coreLayers.push(CoreRel);\n        coreLayers.push(NullPtr);\n        coreLayers.push(Type);\n        coreLayers.push(NullPtr);\n        coreLayers.push(Set);\n        coreLayers.push(Guid);\n        coreLayers.push(Constraint);\n        coreLayers.push(MetaCore);\n        coreLayers.push(MetaCacheCore);\n        coreLayers.push(MixinCore);\n        coreLayers.push(MetaQueryCore);\n        coreLayers.push(CoreDiff);\n\n        coreLayers.push(TreeLoader);\n\n        coreLayers.push(LibraryCore);\n\n        if (options.usertype !== 'tasync') {\n            coreLayers.push(UnWrap);\n        }\n\n        core = coreLayers.reduce(function (inner, Class) {\n            return new Class(inner, options);\n        }, new CoreTree(storage, options));\n\n        /**\n         * Returns the parent of the node.\n         * @param {module:Core~Node} node - the node in question\n         *\n         * @return {module:Core~Node} Returns the parent of the node or NULL if it has no parent.\n         *\n         * @func\n         */\n        this.getParent = core.getParent;\n\n        /**\n         * Returns the parent-relative identifier of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string} Returns the id string or return NULL and UNDEFINED if there is no such id for the node.\n         *\n         * @func\n         */\n        this.getRelid = core.getRelid;\n\n        //this.getLevel = core.getLevel;\n\n        /**\n         * Returns the root node of the containment tree that node is part of.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~Node} Returns the root of the containment hierarchy (it can be the node itself).\n         *\n         * @func\n         */\n        this.getRoot = core.getRoot;\n\n        /**\n         * Returns the complete path of the node in the containment hierarchy.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string} Returns a path string where each portion is a relative id and they are separated by '/'.\n         * The path can be empty as well if the node in question is the  root itself, otherwise it should be a chain\n         * of relative ids from the root of the containment hierarchy.\n         *\n         * @func\n         */\n        this.getPath = core.getPath;\n\n        //this.isValidPath = core.isValidPath;\n        //this.splitPath = core.splitPath;\n        //this.buildPath = core.buildPath;\n        //this.joinPaths = core.joinPaths;\n        //this.getCommonPathPrefixData = core.getCommonPathPrefixData;\n        //this.normalize = core.normalize;\n        //this.getAncestor = core.getAncestor;\n        //this.isAncestor = core.isAncestor;\n        //this.createRoot = core.createRoot;\n        //this.createChild = core.createChild;\n\n        /**\n         * Retrieves the child of the input node at the given relative id. It is not an asynchronous load\n         * and it automatically creates the child under the given relative id if no child was there beforehand.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} relativeId - the relative id which our child in question has.\n         *\n         * @return {module:Core~Node} Return an empty node if it was created as a result of the function or\n         * return the already existing and loaded node if it found.\n         *\n         * @func\n         */\n        this.getChild = core.getChild;\n\n        //this.isMutable = core.isMutable;\n        //this.isObject = core.isObject;\n\n        /**\n         * Checks if the node in question has some actual data.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {bool} Returns true if the node is 'empty' meaning that it is not reserved by real data.\n         * Returns false if the node is exists and have some meaningful value.\n         *\n         * @func\n         */\n        this.isEmpty = core.isEmpty;\n\n        //this.mutate = core.mutate;\n        //this.getData = core.getData;\n        //this.setData = core.setData;\n        //this.deleteData = core.deleteData;\n        //this.copyData = core.copyData;\n        //this.getProperty = core.getProperty;\n        //this.setProperty = core.setProperty;\n        //this.deleteProperty = core.deleteProperty;\n        //this.getKeys = core.getKeys;\n        //this.getRawKeys = core.getRawKeys;\n        //this.isHashed = core.isHashed;\n        //this.setHashed = core.setHashed;\n\n        /**\n         * Returns the calculated database id of the data of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~ObjectHash} Returns the so called Hash value of the data of the given node. If the string is empty,\n         * then it means that the node was mutated but not yet saved to the database, so it do not have a hash\n         * temporarily.\n         *\n         * @func\n         */\n        this.getHash = core.getHash;\n\n        /**\n         * Persists the changes made in memory and computed the data blobs that needs to be saved into the database\n         * to make the change and allow other users to see the new state of the project.\n         * @param {module:Core~Node} node - some node element of the modified containment hierarchy (usually the root).\n         *\n         * @return {module:Core~GmePersisted} The function returns an object which collects all the changes\n         * on data level and necessary to update the database on server side\n         *\n         * @func\n         */\n        this.persist = core.persist;\n\n        /**\n         * Loads the data object with the given hash and makes it a root of a containment hierarchy.\n         * @param {module:Core~ObjectHash} hash - the hash of the data object we like to load as root.\n         * @param {function(string, module:Core~Node)} callback\n         *\n         * @func\n         */\n        this.loadRoot = core.loadRoot;\n\n        /**\n         * Loads the child of the given parent pointed by the relative id. Behind the scenes, it means\n         * that it actually loads the data pointed by a hash stored inside the parent under the given id\n         * and wraps it in a node object which will be connected to the parent as a child in the containment\n         * hierarchy. If there is no such relative id reserved, the call will return with null.\n         * @param {module:Core~Node} parent - the container node in question.\n         * @param {string} relativeId - the relative id of the child in question.\n         * @param {function(string, module:Core~Node)} callback\n         *\n         * @func\n         */\n        this.loadChild = core.loadChild;\n\n        /**\n         * From the given starting node, it loads the path given as a series of relative ids (separated by '/')\n         * and returns the node it finds at the ends of the path. If there is no node, the function will return null.\n         * @param {module:Core~Node} startNode - the starting node of our search.\n         * @param {string} relativePath - the relative path - built by relative ids - of the node in question.\n         * @param {function(string, module:Core~Node)} callback\n         *\n         * @func\n         */\n        this.loadByPath = core.loadByPath;\n\n        /**\n         * Loads all the children of the given parent. As it first checks the already reserved relative ids of\n         * the parent, it only loads the already existing children (so no on-demand empty node creation).\n         * @param {module:Core~Node} parent - the container node in question.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadChildren = core.loadChildren;\n\n        /**\n         * Loads all the children of the given parent that has some data and not just inherited. As it first checks\n         * the already reserved relative ids of the parent, it only loads the already existing children\n         * (so no on-demand empty node creation).\n         * @param {module:Core~Node} parent - the container node in question.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadOwnChildren = core.loadOwnChildren;\n\n        /**\n         * Loads the target of the given pointer of the given node. In the callback the node can have three values:\n         * if the node is valid, then it is the defined target of a valid pointer,\n         * if the returned value is null, then it means that the pointer is defined, but has no real target,\n         * finally if the returned value is undefined than there is no such pointer defined for the given node.\n         * @param {module:Core~Node} source - the container node in question.\n         * @param {string} pointerName - the relative id of the child in question.\n         * @param {function(string, module:Core~Node)} callback\n         *\n         * @func\n         */\n        this.loadPointer = core.loadPointer;\n\n        /**\n         * Loads all the source nodes that has such a pointer and its target is the given node.\n         * @param {module:Core~Node} target - the container node in question.\n         * @param {string} pointerName - the relative id of the child in question.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadCollection = core.loadCollection;\n\n        /**\n         * Loads a complete sub-tree of the containment hierarchy starting from the given node.\n         * @param {module:Core~Node} node - the container node in question.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadSubTree = core.loadSubTree;\n\n        /**\n         * Loads a complete sub-tree of the containment hierarchy starting from the given node, but load only those\n         * children that has some additional data and not purely inherited.\n         * @param {module:Core~Node} node - the container node in question.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadOwnSubTree = core.loadOwnSubTree;\n\n        /**\n         * Loads a complete containment hierarchy using the data object - pointed by the given hash -\n         * as the root.\n         * @param {module:Core~ObjectHash} rootHash - hash of the root node.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadTree = core.loadTree;\n\n        //this.isValidNode = core.isValidNode;\n        //this.getChildHash = core.getChildHash;\n        //this.isValidRelid = core.isValidRelid;\n\n        /**\n         * Collects the relative ids of all the children of the given node.\n         * @param {module:Core~Node} parent - the container node in question.\n         *\n         * @return {string[]} The function returns an array of the relative ids.\n         *\n         * @func\n         */\n        this.getChildrenRelids = core.getChildrenRelids;\n\n        /**\n         * Collects the relative ids of all the children of the given node that has some data and not just inherited.\n         * N.B. Do not mutate the returned array!\n         * @param {module:Core~Node} parent - the container node in question.\n         *\n         * @return {string[]} The function returns an array of the relative ids.\n         *\n         * @func\n         */\n        this.getOwnChildrenRelids = core.getOwnChildrenRelids;\n\n        /**\n         * Collects the paths of all the children of the given node.\n         * @param {module:Core~Node} parent - the container node in question.\n         *\n         *@return {string[]} The function returns an array of the absolute paths of the children.\n         *\n         * @func\n         */\n        this.getChildrenPaths = core.getChildrenPaths;\n\n        /**\n         * Collects the paths of all the children of the given node that has some data as well and not just inherited.\n         * @param {module:Core~Node} parent - the container node in question.\n         *\n         *@return {string[]} The function returns an array of the absolute paths of the children.\n         *\n         * @func\n         */\n        this.getOwnChildrenPaths = core.getOwnChildrenPaths;\n\n        /**\n         * Creates a node according to the given parameters.\n         * @param {object} parameters - the details of the creation.\n         * @param {module:Core~Node | null} [parameters.parent] - the parent of the node to be created.\n         * @param {module:Core~Node | null} [parameters.base] - the base of the node to be created.\n         * @param {string} [parameters.relid] - the relative id of the node to be created (if reserved, the function\n         * returns the node behind the relative id)\n         * @param {module:Core~GUID} [parameters.guid] - the GUID of the node to be created\n         *\n         *\n         * @return {module:Core~Node | Error} The function returns the created node or null if no node was created\n         * or an error if the creation with the given parameters are not allowed.\n         *\n         * @func\n         */\n        this.createNode = core.createNode;\n\n        /**\n         * Removes a node from the containment hierarchy.\n         * @param {module:Core~Node} node - the node to be removed.\n         *\n         * @return {undefined|Error} If the operation is not allowed it returns an error.\n         * @func\n         */\n        this.deleteNode = core.deleteNode;\n\n        /**\n         * Copies the given node into parent.\n         * @param {module:Core~Node} node - the node to be copied.\n         * @param {module:Core~Node} parent - the parent node of the copy.\n         *\n         * @return {module:Core~Node | Error} The function returns the copied node or an error if the copy\n         * is not allowed.\n         *\n         * @func\n         */\n        this.copyNode = core.copyNode;\n\n        /**\n         * Copies the given nodes into parent.\n         * @param {module:Core~Node[]} nodes - the nodes to be copied.\n         * @param {module:Core~Node} parent - the parent node of the copy.\n         *\n         * @return {module:Core~Node[] | Error} The function returns an array of the copied nodes or an error\n         * if any of the nodes are not allowed to be copied to the given parent.\n         *\n         * @func\n         */\n        this.copyNodes = core.copyNodes;\n\n        /**\n         * Checks if parent can be the new parent of node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~Node} parent - the new parent.\n         *\n         * @return {boolean} True if the supplied parent is a valid parent for the node.\n         *\n         * @func\n         */\n        this.isValidNewParent = core.isValidNewParent;\n\n        /**\n         * Moves the given node under the given parent.\n         * @param {module:Core~Node} node - the node to be moved.\n         * @param {module:Core~Node} parent - the parent node of the copy.\n         *\n         * @return {module:Core~Node | Error} The function returns the node after the move or an error\n         * if the move is not allowed.\n         *\n         * @func\n         */\n        this.moveNode = core.moveNode;\n\n        /**\n         * Returns the names of the defined attributes of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of the names of the attributes of the node.\n         *\n         * @func\n         */\n        this.getAttributeNames = core.getAttributeNames;\n\n        /**\n         * Retrieves the value of the given attribute of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         *\n         * @return {object | primitive | null | undefined} The function returns the value of the attribute of the node.\n         * The value can be an object or any primitive type. If the value is undefined that means the node do not have\n         * such attribute defined. [The retrieved attribute should not be modified as is - it should be copied first!!]\n         *\n         * @func\n         */\n        this.getAttribute = core.getAttribute;\n\n        /**\n         * Sets the value of the given attribute of the given node. It defines the attribute on demand, means that it\n         * will set the given attribute even if was ot defined for the node beforehand.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         * @param {object | primitive | null} value - the new of the attribute. Can be any primitive type or object.\n         * Undefined is not allowed.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setAttribute = core.setAttribute;\n\n        /**\n         * Removes the given attributes from the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delAttribute = core.delAttribute;\n\n        /**\n         * Returns the names of the defined registry entries of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of the names of the registry entries of the node.\n         *\n         * @func\n         */\n        this.getRegistryNames = core.getRegistryNames;\n\n        /**\n         * Retrieves the value of the given registry entry of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the registry entry.\n         *\n         * @return {object | primitive | null | undefined} The function returns the value of the registry entry\n         * of the node. The value can be an object or any primitive type. If the value is undefined that means\n         * the node do not have such attribute defined. [The retrieved registry value should\n         * not be modified as is - it should be copied first!!]\n         *\n         * @func\n         */\n        this.getRegistry = core.getRegistry;\n\n        /**\n         * Sets the value of the given registry entry of the given node. It defines the registry entry on demand,\n         * means that it will set the given registry entry even if was ot defined for the node beforehand.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the registry entry.\n         * @param {object | primitive | null} value - the new of the registry entry. Can be any primitive\n         * type or object. Undefined is not allowed.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         * @func\n         */\n        this.setRegistry = core.setRegistry;\n\n        /**\n         * Removes the given registry entry from the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the registry entry.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delRegistry = core.delRegistry;\n\n        /**\n         * Retrieves a list of the defined pointer names of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of the names of the pointers of the node.\n         *\n         * @func\n         */\n        this.getPointerNames = core.getPointerNames;\n\n        /**\n         * Retrieves the path of the target of the given pointer of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer in question.\n         *\n         * @return {string | null | undefined} The function returns the absolute path of the target node\n         * if there is a valid target. It returns null if though the pointer is defined it does not have any\n         * valid target. Finally, it return undefined if there is no pointer defined for the node under the given name.\n         *\n         * @func\n         */\n        this.getPointerPath = core.getPointerPath;\n\n        /**\n         * Removes the pointer from the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer in question.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.deletePointer = this.delPointer = core.deletePointer;\n\n        /**\n         * Sets the target of the pointer of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer in question.\n         * @param {module:Core~Node} target - the new target of the pointer.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setPointer = core.setPointer;\n\n        /**\n         * Retrieves a list of the defined pointer names that has the node as target.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of the names of the pointers pointing to the node.\n         *\n         * @func\n         */\n        this.getCollectionNames = core.getCollectionNames;\n\n        /**\n         * Retrieves a list of absolute paths of nodes that has a given pointer which points to the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer.\n         *\n         * @return {string[]} The function returns an array of absolute paths of nodes that\n         * has the pointer pointing to the node.\n         *\n         * @func\n         */\n        this.getCollectionPaths = core.getCollectionPaths;\n\n        /**\n         * Collects the data hash values of the children of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {Object<string, module:Core~ObjectHash>} The function returns a dictionary of {@link module:Core~ObjectHash} that stored in pair\n         * with the relative id of the corresponding child of the node.\n         *\n         * @func\n         */\n        this.getChildrenHashes = core.getChildrenHashes;\n\n        /**\n         * Returns the base node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~Node | null} Returns the base of the given node or null if there is no such node.\n         *\n         * @func\n         */\n        this.getBase = core.getBase;\n\n        /**\n         * Returns the root of the inheritance chain of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~Node} Returns the root of the inheritance chain (usually the FCO).\n         *\n         * @func\n         */\n        this.getBaseRoot = core.getBaseRoot;\n\n        /**\n         * Returns the names of the attributes of the node that have been first defined for the node and not for its\n         * bases.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of the names of the own attributes of the node.\n         *\n         * @func\n         */\n        this.getOwnAttributeNames = core.getOwnAttributeNames;\n\n        /**\n         * Returns the names of the registry enrties of the node that have been first defined for the node\n         * and not for its bases.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of the names of the own registry entries of the node.\n         *\n         * @func\n         */\n        this.getOwnRegistryNames = core.getOwnRegistryNames;\n\n        /**\n         * Returns the value of the attribute defined for the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         *\n         * @return {object | primitive | null | undefined} Returns the value of the attribute defined specifically for\n         * the node. If undefined then it means that there is no such attribute defined directly for the node, meaning\n         * that it either inherits some value or there is no such attribute at all.\n         *\n         * @func\n         */\n        this.getOwnAttribute = core.getOwnAttribute;\n\n        /**\n         * Returns the value of the registry entry defined for the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the registry entry.\n         *\n         * @return {object | primitive | null | undefined} Returns the value of the registry entry defined specifically\n         * for the node. If undefined then it means that there is no such registry entry defined directly for the node,\n         * meaning that it either inherits some value or there is no such registry entry at all.\n         *\n         * @func\n         */\n        this.getOwnRegistry = core.getOwnRegistry;\n\n        /**\n         * Returns the list of the names of the pointers that were defined specifically for the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} Returns an array of names of pointers defined specifically for the node.\n         *\n         *@func\n         */\n        this.getOwnPointerNames = core.getOwnPointerNames;\n\n        /**\n         * Returns the absolute path of the target of the pointer specifically defined for the node.\n         * @param {module:Core~Node} node - the node in question\n         * @param {string} name - the name of the pointer\n         *\n         * @return {string | null | undefined} Returns the absolute path. If the path is null, then it means that\n         * 'no-target' was defined specifically for this node for the pointer. If undefined it means that the node\n         * either inherits the target of the pointer or there is no pointer defined at all.\n         *\n         * @func\n         */\n        this.getOwnPointerPath = core.getOwnPointerPath;\n\n        /**\n         * Checks if base can be the new base of node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~Node | null | undefined} base - the new base.\n         *\n         * @return {boolean} True if the supplied base is a valid base for the node.\n         *\n         * @func\n         */\n        this.isValidNewBase = core.isValidNewBase;\n\n        /**\n         * Sets the base node of the given node. The function doesn't touches the properties or the children of the node\n         * so it can cause META rule violations that needs to be corrected manually.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~Node | null} base - the new base.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setBase = core.setBase;\n\n        /**\n         * Returns the root of the inheritance chain (cannot be the node itself).\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~Node | null} Returns the root of the inheritance chain of the node. If returns null,\n         * that means the node in question is the root of the chain.\n         *\n         * @func\n         */\n        this.getTypeRoot = core.getTypeRoot;\n\n        //TODO check if the whole function could be removed\n        //this.getSetNumbers = core.getSetNumbers;\n\n        /**\n         * Returns the names of the sets of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} Returns an array of set names that the node has.\n         *\n         * @func\n         */\n        this.getSetNames = core.getSetNames;\n\n        /**\n         * Returns the list of absolute paths of the members of the given set of the given node.\n         * @param {module:Core~Node} node - the set owner.\n         * @param {string} name - the name of the set.\n         *\n         * @return {string[]} Returns an array of absolute path strings of the member nodes of the set.\n         * @func\n         */\n        this.getMemberPaths = core.getMemberPaths;\n\n        /**\n         * Returns the list of absolute paths of the members of the given set of the given node that not simply\n         * inherited.\n         * @param {module:Core~Node} node - the set owner.\n         * @param {string} name - the name of the set.\n         *\n         * @return {string[]} Returns an array of absolute path strings of the member nodes of the set that has\n         * information on the node's inharitance level.\n         * @func\n         */\n        this.getOwnMemberPaths = core.getOwnMemberPaths;\n\n        /**\n         * Removes a member from the set. The functions doesn't remove the node itself.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         * @param {string} path - the absolute path of the member to be removed.\n         *\n         * @return {undefined | Error} If the set is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delMember = core.delMember;\n\n        /**\n         * Adds a member to the given set.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         * @param {module:Core~Node} member - the new member of the set.\n         *\n         * @return {undefined | Error} If the set is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.addMember = core.addMember;\n\n        /**\n         * Return the names of the attributes defined for the set membership to the member node.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         * @param {string} memberPath - the absolute path of the member.\n         *\n         * @return {string[]} Returns the array of names of attributes that represents some property of the membership.\n         *\n         * @func\n         */\n        this.getMemberAttributeNames = core.getMemberAttributeNames;\n\n        /**\n         * Return the names of the attributes defined for the set membership specifically defined to the member node.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         * @param {string} memberPath - the absolute path of the member.\n         *\n         * @return {string[]} Returns the array of names of attributes that represents some property of the membership.\n         *\n         * @func\n         */\n        this.getMemberOwnAttributeNames = core.getMemberOwnAttributeNames;\n\n        /**\n         * Get the value of the attribute in relation with the set membership.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} setName - the name of the set.\n         * @param {string} memberPath - the absolute path of the member node.\n         * @param {string} attrName - the name of the attribute.\n         *\n         * @return {object|primitive|null|undefined} Return teh value of the attribute. If it is undefined, than there\n         * is no such attributed connected to the given set membership.\n         *\n         * @func\n         */\n        this.getMemberAttribute = core.getMemberAttribute;\n\n        /**\n         * Sets the attribute value which represents a property of the membership.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} setName - the name of the set.\n         * @param {string} memberPath - the absolute path of the member node.\n         * @param {string} attrName - the name of the attribute.\n         * @param {object|primitive|null} value - the new value of the attribute.\n         *\n         * @return {undefined | Error} If the set is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setMemberAttribute = core.setMemberAttribute;\n\n        /**\n         * Removes an attribute which represented a property of the given set membership.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} setName - the name of the set.\n         * @param {string} memberPath - the absolute path of the member node.\n         * @param {string} attrName - the name of the attribute.\n         *\n         * @return {undefined | Error} If the set is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delMemberAttribute = core.delMemberAttribute;\n\n        /**\n         * Return the names of the registry entries defined for the set membership to the member node.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         * @param {string} memberPath - the absolute path of the member.\n         *\n         * @return {string[]} Returns the array of names of registry entries that represents some property of the\n         * membership.\n         *\n         * @func\n         */\n        this.getMemberRegistryNames = core.getMemberRegistryNames;\n\n        /**\n         * Return the names of the registry entries defined for the set membership specifically defined to\n         * the member node.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         * @param {string} memberPath - the absolute path of the member.\n         *\n         * @return {string[]} Returns the array of names of registry entries that represents some property of the\n         * membership.\n         *\n         * @func\n         */\n        this.getMemberOwnRegistryNames = core.getMemberOwnRegistryNames;\n\n        /**\n         * Get the value of the registry entry in relation with the set membership.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} setName - the name of the set.\n         * @param {string} memberPath - the absolute path of the member node.\n         * @param {string} regName - the name of the registry entry.\n         *\n         * @return {object|primitive|null|undefined} Return teh value of the attribute. If it is undefined, than there\n         * is no such attributed connected to the given set membership.\n         *\n         * @func\n         */\n        this.getMemberRegistry = core.getMemberRegistry;\n\n        /**\n         * Sets the registry entry value which represents a property of the membership.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} setName - the name of the set.\n         * @param {string} memberPath - the absolute path of the member node.\n         * @param {string} regName - the name of the registry entry.\n         * @param {object|primitive|null} value - the new value of the attribute.\n         *\n         * @return {undefined | Error} If the set is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setMemberRegistry = core.setMemberRegistry;\n\n        /**\n         * Removes a registry entry which represented a property of the given set membership.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} setName - the name of the set.\n         * @param {string} memberPath - the absolute path of the member node.\n         * @param {string} regName - the name of the registry entry.\n         *\n         * @return {undefined | Error} If the set is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delMemberRegistry = core.delMemberRegistry;\n\n        /**\n         * Creates a set for the node.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.createSet = core.createSet;\n\n        /**\n         * Removes a set from the node.\n         * @param {module:Core~Node} node - the owner of the set.\n         * @param {string} name - the name of the set.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.deleteSet = this.delSet = core.deleteSet;\n\n        /**\n         * Returns all membership information of the given node.\n         * @param {module:Core~Node} node - the node in question\n         *\n         * @return {object} Returns a dictionary where every the key of every entry is an absolute path of a set owner\n         * node. The value of each entry is an array with the set names in which the node can be found as a member.\n         *\n         * @func\n         */\n        this.isMemberOf = core.isMemberOf;\n\n        //this.getMiddleGuid = core.getMiddleGuid;\n\n        /**\n         * Get the GUID of a node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~GUID} Returns the globally unique identifier.\n         * @func\n         */\n        this.getGuid = core.getGuid;\n\n        //TODO this is only used in import - export use-cases, probably could be removed...\n        /**\n         * Set the GUID of a node. As the Core itself do not checks whether the GUID already exists. The use of\n         * this function is only advised during the creation of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~GUID} guid - the new globally unique identifier.\n         * @param {function()} callback\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setGuid = core.setGuid;\n\n        /**\n         * Gets a constraint object of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the constraint.\n         *\n         * @return {module:Core~Constraint | null} Returns the defined constraint or null if it was not\n         * defined for the node.\n         * @func\n         */\n        this.getConstraint = core.getConstraint;\n\n        /**\n         * Sets a constraint object of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the constraint.\n         * @param {module:Core~Constraint} constraint  - the constraint to be set.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setConstraint = core.setConstraint;\n\n        /**\n         * Removes a constraint from the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the constraint.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delConstraint = core.delConstraint;\n\n        /**\n         * Retrieves the list of constraint names defined for the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} Returns the array of names of constraints available for the node.\n         *\n         * @func\n         */\n        this.getConstraintNames = core.getConstraintNames;\n\n        /**\n         * Retrieves the list of constraint names defined specifically for the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} Returns the array of names of constraints for the node.\n         *\n         * @func\n         */\n        this.getOwnConstraintNames = core.getOwnConstraintNames;\n\n        /**\n         * Checks if the given typeNode is really a base of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~Node} type - the type node we want to check.\n         *\n         * @return {bool} The function returns true if the type is in the inheritance chain of the node or false\n         * otherwise. Every node is type of itself.\n         *\n         * @func\n         */\n        this.isTypeOf = core.isTypeOf;\n\n        /**\n         * Checks if according to the META rules the given node can be a child of the parent.\n         * @param {module:Core~Node} node - the node in question\n         * @param {module:Core~Node} parent - the parent we like to test.\n         *\n         * @return {bool} The function returns true if according to the META rules the node can be a child of the\n         * parent. The check does not cover multiplicity (so if the parent can only have twi children and it already\n         * has them, this function will still returns true).\n         * @func\n         */\n        this.isValidChildOf = core.isValidChildOf;\n\n        /**\n         * Returns the list of the META defined pointer names of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns all the pointer names that are defined among the META rules of the node.\n         *\n         * @func\n         */\n        this.getValidPointerNames = core.getValidPointerNames;\n\n        /**\n         * Returns the list of the META defined set names of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns all the set names that are defined among the META rules of the node.\n         *\n         * @func\n         */\n        this.getValidSetNames = core.getValidSetNames;\n\n        /**\n         * Returns the list of the META defined pointers of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~Node} source - the source to test.\n         * @param {string} name - the name of the pointer.\n         *\n         * @return {bool} The function returns true if according to the META rules, the given node is a valid\n         * target of the given pointer of the source.\n         *\n         * @func\n         */\n        this.isValidTargetOf = core.isValidTargetOf;\n\n        /**\n         * Returns the list of the META defined attribute names of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns all the attribute names that are defined among the META rules of the\n         * node.\n         *\n         * @func\n         */\n        this.getValidAttributeNames = core.getValidAttributeNames;\n\n        /**\n         * Returns the list of the META defined attribute names of the node that were specifically defined for the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns the attribute names that are defined specifically for the node.\n         *\n         * @func\n         */\n        this.getOwnValidAttributeNames = core.getOwnValidAttributeNames;\n\n        /**\n         * Checks if the given value is of the necessary type, according to the META rules.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         * @param {object|primitive|null} value - the value to test.\n         *\n         * @return {bool} Returns true if the value matches the META definitions.\n         *\n         * @func\n         */\n        this.isValidAttributeValueOf = core.isValidAttributeValueOf;\n\n        /**\n         * Returns the list of the META defined aspect names of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns all the aspect names that are defined among the META rules of the\n         * node.\n         *\n         * @func\n         */\n        this.getValidAspectNames = core.getValidAspectNames;\n\n        /**\n         * Returns the list of the META defined aspect names of the node that were specifically defined for the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns the aspect names that are specifically defined for the node.\n         *\n         * @func\n         */\n        this.getOwnValidAspectNames = core.getOwnValidAspectNames;\n\n        /**\n         * Returns the list of valid children types of the given aspect.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the aspect.\n         *\n         * @return {string[]} The function returns a list of absolute paths of nodes that are valid childrens of the node\n         * and fits to the META rules defined for the aspect. Any children, visible under the given aspect of the node\n         * must be an instance of at least one node represented by the absolute paths.\n         *\n         * @func\n         */\n        this.getAspectMeta = core.getAspectMeta;\n\n        /**\n         * Gives a JSON representation of the META rules of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {object} Returns an object that represents all the META rules of the node.\n         *\n         * @func\n         */\n        this.getJsonMeta = core.getJsonMeta;\n\n        /**\n         * Returns the META rules specifically defined for the given node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {object} The function returns an object that represent the META rules that were defined\n         * specifically for the node.\n         *\n         * @func\n         */\n        this.getOwnJsonMeta = core.getOwnJsonMeta;\n\n        /**\n         * Removes all META rules that were specifically defined for the node (so the function do not touches\n         * inherited rules).\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.clearMetaRules = core.clearMetaRules;\n\n        /**\n         * Sets the META rules of the attribute of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         * @param {object} rule - the rules that defines the attribute\n         * @param {'string'|'integer'|'float'|'boolean'|'asset'} rule.type - the type of the attribute (valid types see\n         * CONSTANTS.ATTRIBUTE_TYPES).\n         * @param {string[]} [rule.enum] - if the attribute is an enumeration, this array contains the possible values\n         * @param {string|number|boolean} [rule.default] - The value the attribute should have at the node. If not given\n         * it should be set at some point.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setAttributeMeta = core.setAttributeMeta;\n\n        /**\n         * Removes an attribute definition from the META rules of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delAttributeMeta = core.delAttributeMeta;\n\n        /**\n         * Returns the definition object of an attribute from the META rules of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the attribute.\n         *\n         * @return {object} The function returns the definition object\n         * @func\n         */\n        this.getAttributeMeta = core.getAttributeMeta;\n\n        /**\n         * Returns the list of absolute path of the valid children types of the node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The function returns an array of absolute paths of the nodes that was defined as valid\n         * children for the node.\n         *\n         * @func\n         */\n        this.getValidChildrenPaths = core.getValidChildrenPaths;\n\n        /**\n         * Return a JSON representation of the META rules regarding the valid children of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {module:Core~RelationRule} The funciton returns a detailed JSON structure that represents the META\n         * rules regarding the possible children of the node.\n         *\n         * @func\n         */\n        this.getChildrenMeta = core.getChildrenMeta;\n\n        /**\n         * Sets the given child as a valid children type for the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {module:Core~Node} child - the valid child node.\n         * @param {integer} [min] - the allowed minimum number of children from this given node type (if not given or\n         * -1 is set, then there will be no minimum rule according this child type)\n         * @param {integer} [max] - the allowed maximum number of children from this given node type (if not given or\n         * -1 is set, then there will be no minimum rule according this child type)\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setChildMeta = core.setChildMeta;\n\n        /**\n         * Removes the given child rule from the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} childPath - the absolute path of the child which rule is to be removed from the node.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delChildMeta = core.delChildMeta;\n\n        /**\n         * Sets the global containment limits for the node.\n         *\n         * @param {integer} [min] - the allowed minimum number of children (if not given or\n         * -1 is set, then there will be no minimum rule according children)\n         * @param {integer} [max] - the allowed maximum number of children (if not given or\n         * -1 is set, then there will be no maximum rule according children)\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setChildrenMetaLimits = core.setChildrenMetaLimits;\n\n        /**\n         * Sets the given target as a valid target type for the pointer/set of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer/set.\n         * @param {module:Core~Node} target - the valid target/member node.\n         * @param {integer} [min] - the allowed minimum number of target/member from this given node type (if not\n         * given or -1 is set, then there will be no minimum rule according this target type)\n         * @param {integer} [max] - the allowed maximum number of target/member from this given node type (if not\n         * given or -1 is set, then there will be no minimum rule according this target type)\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setPointerMetaTarget = core.setPointerMetaTarget;\n\n        /**\n         * Removes a possible target type from the pointer/set of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer/set\n         * @param {string} targetPath - the absolute path of the possible target type.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delPointerMetaTarget = core.delPointerMetaTarget;\n\n        /**\n         * Sets the global target limits for pointer/set of the node. On META level the only distinction between\n         * pointer and sets is the global multiplicity which has to maximize the number of possible targets to 1 in\n         * case of 'pure' pointer definitions.\n         *\n         * @param {integer} [min] - the allowed minimum number of children (if not given or\n         * -1 is set, then there will be no minimum rule according targets)\n         * @param {integer} [max] - the allowed maximum number of children (if not given or\n         * -1 is set, then there will be no maximum rule according targets)\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setPointerMetaLimits = core.setPointerMetaLimits;\n\n        /**\n         * Removes the complete META rule regarding the given pointer/set of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer/set.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delPointerMeta = core.delPointerMeta;\n\n        /**\n         * Return a JSON representation of the META rules regarding the given pointer/set of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the pointer/set.\n         *\n         * @return {module:Core~RelationRule} The funciton returns a detailed JSON structure that represents the META\n         * rules regarding the given pointer/set of the node.\n         *\n         * @func\n         */\n        this.getPointerMeta = core.getPointerMeta;\n\n        /**\n         * Sets a valid type for the given aspect of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the aspect.\n         * @param {module:Core~Node} target - the valid type for the aspect.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.setAspectMetaTarget = core.setAspectMetaTarget;\n\n        /**\n         * Removes a valid type from the given aspect of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the aspect.\n         * @param {string} targetPath - the absolute path of the valid type of the aspect.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delAspectMetaTarget = core.delAspectMetaTarget;\n\n        /**\n         * Removes the given aspect rule of the node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the aspect.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delAspectMeta = core.delAspectMeta;\n\n        /**\n         * Searches for the closest META node of the node in question.\n         * @param {module:Core~Node} node - the node in question\n         *\n         * @return {module:Core~Node | null} Returns the first node (including itself) among the inheritance chain\n         * that is a META node. It returns null if it does not find such node (ideally the only node with this result\n         * is the ROOT).\n         *\n         * @func\n         */\n        this.getBaseType = this.getMetaType = core.getBaseType;\n\n        /**\n         * Checks if there is a node with the given name in the nodes inheritance chain (excluding itself).\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} name - the name of the base node.\n         *\n         * @return {bool} The function returns true if it finds an ancestor with the given name attribute.\n         *\n         * @func\n         */\n        this.isInstanceOf = core.isInstanceOf;\n\n        //this.nodeDiff = core.nodeDiff;\n\n        /**\n         * Generates a differential tree among the two states of the project that contains the necessary changes\n         * that can modify the source to be identical to the target. The result is in form of a json object.\n         * @param {module:Core~Node} sourceRoot - the root node of the source state.\n         * @param {module:Core~Node} targetRoot - the root node of the target state.\n         *\n         * @param {function(string, object)} callback\n         *\n         * @func\n         */\n        this.generateTreeDiff = core.generateTreeDiff;\n\n        //this.generateLightTreeDiff = core.generateLightTreeDiff;\n\n        /**\n         * Apply changes to the current project.\n         * @param {module:Core~Node} root - the root of the containment hierarchy where we wish to apply the changes\n         * @param {object} patch - the tree structured collection of changes represented with a special JSON object\n         * @param {function(string)} callback\n         *\n         * @func\n         */\n        this.applyTreeDiff = core.applyTreeDiff;\n\n        /**\n         * Tries to merge two patch object. The patches ideally represents changes made by two parties. They represents\n         * changes from the same source ending in different states. Our aim is to generate a single patch that could\n         * cover the changes of both party.\n         * @param {object} mine - the tree structured JSON patch that represents my changes.\n         * @param {object} theirs - the tree structured JSON patch that represents the changes of the other party.\n         *\n         * @return {object} The function returns with an object that contains the conflicts (if any) and the merged\n         * patch.\n         *\n         * @func\n         */\n        this.tryToConcatChanges = core.tryToConcatChanges;\n\n        /**\n         * When our attempt to merge two patches ended in some conflict, then we can modify that result highlighting\n         * that in case of every conflict, which side we prefer (mine vs. theirs). If we give that object as an input\n         * to this function, it will finish the merge resolving the conflict according our settings and present a final\n         * patch.\n         * @param {object} conflict - the object that represents our settings for every conflict and the so-far-merged\n         * patch.\n         *\n         * @return {object} The function results in a tree structured patch object that contains the changesthat cover\n         * both parties modifications (and the conflicts are resolved according the input settings).\n         *\n         * @func\n         */\n        this.applyResolution = core.applyResolution;\n\n        /**\n         * Checks if the node is abstract.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {bool} The function returns true if the registry entry 'isAbstract' of the node if true hence\n         * the node is abstract.\n         *\n         * @func\n         */\n        this.isAbstract = core.isAbstract;\n\n        /**\n         * Check is the node is a connection-like node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {bool} Returns true if both the 'src' and 'dst' pointer are defined as valid for the node.\n         *\n         * @func\n         */\n        this.isConnection = core.isConnection;\n\n        /**\n         * Retrieves the valid META nodes that can be base of a child of the node.\n         * @param {object} parameters - the input parameters of the query.\n         * @param {module:Core~Node} parameters.node - the node in question.\n         * @param {module:Core~Node[]} [parameters.children] - the children of the node in question.\n         * @param {bool} - [parameters.sensitive] - if true, the query filters out the abstract and connection-like\n         * nodes (the default value is false)\n         * @param {bool} - [parameters.multiplicity] - if true, the query tries to filter out even more nodes according\n         * to the multiplicity rules (the default value is false, the check is only meaningful if all the children were\n         * passed)\n         * @param {string} - [parameters.aspect] - if given, the query filters to contain only types that are visible\n         * in the given aspect.\n         * @return {module:Core~Node[]} The function returns a list of valid nodes that can be instantiated as a\n         * child of the node.\n         *\n         * @func\n         */\n        this.getValidChildrenMetaNodes = core.getValidChildrenMetaNodes;\n\n        /**\n         * Retrieves the valid META nodes that can be base of a member of the set of the node.\n         * @param {object} parameters - the input parameters of the query.\n         * @param {module:Core~Node} parameters.node - the node in question.\n         * @param {string} parameters.name - the name of the set.\n         * @param {module:Core~Node[]} [parameters.members] - the members of the set of the node in question.\n         * @param {bool} - [parameters.sensitive] - if true, the query filters out the abstract and connection-like\n         * nodes (the default value is false)\n         * @param {bool} - [parameters.multiplicity] - if true, the query tries to filter out even more nodes according\n         * to the multiplicity rules (the default value is false, the check is only meaningful if all the members were\n         * passed)\n         *\n         * @return {module:Core~Node[]} The function returns a list of valid nodes that can be instantiated as a\n         * member of the set of the node.\n         *\n         * @func\n         */\n        this.getValidSetElementsMetaNodes = core.getValidSetElementsMetaNodes;\n\n        /**\n         * Returns all META nodes.\n         * @param {module:Core~Node} node - any node of the containment hierarchy.\n         *\n         * @return {Object<string, module:Core~Node>} The function returns a dictionary. The keys of the dictionary are the absolute paths of\n         * the META nodes of the project. Every value of the dictionary is a {@link module:Core~Node}.\n         *\n         * @func\n         */\n        this.getAllMetaNodes = core.getAllMetaNodes;\n\n        /**\n         * Checks if the node is a META node.\n         * @param {module:Core~Node} node - the node to test.\n         *\n         * @return {bool} Returns true if the node is a member of the METAAspectSet of the ROOT node hence can be\n         * seen as a META node.\n         *\n         * @func\n         */\n        this.isMetaNode = core.isMetaNode;\n\n        /**\n         * Checks if the member is completely overridden in the set of the node.\n         * @param {module:Core~Node} node - the node to test.\n         * @param {string} setName - the name of the set of the node.\n         * @param {string} memberPath - the path of the member in question.\n         *\n         * @return {bool} Returns true if the member exists in the base of the set, but was\n         * added to the given set as well, which means a complete override. If the set do not exist\n         * or the member do not have a 'base' member or just some property was overridden, the function returns\n         * false.\n         *\n         * @func\n         */\n        this.isFullyOverriddenMember = core.isFullyOverriddenMember;\n\n        /**\n         * Checks if the mixins allocated with the node can be used.\n         * Every mixin node should be on the Meta.\n         * Every rule (attribute/pointer/set/aspect/containment/constraint) should be defined only in one mixin.\n         *\n         * @param {module:Core~Node} node - the node to test.\n         *\n         * @return {module:Core~MixinViolation[]} Returns the array of violations. If the array is empty,\n         * there is no violation.\n         *\n         * @func\n         */\n        this.getMixinErrors = core.getMixinErrors;\n\n        /**\n         * Gathers the paths of the mixin nodes associated with the node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The paths of the mixins in an array.\n         *\n         * @func\n         */\n        this.getMixinPaths = core.getMixinPaths;\n\n        /**\n         * Gathers the paths of the mixin nodes associated with the node\n         * that were defined specifically for the given node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string[]} The paths of the own mixins in an array.\n         *\n         * @func\n         */\n        this.getOwnMixinPaths = core.getOwnMixinPaths;\n\n        /**\n         * Gathers the mixin nodes associated with the node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {Object<string, module:Core~Node>} The dictionary of the mixin nodes keyed by their paths.\n         *\n         * @func\n         */\n        this.getMixinNodes = core.getMixinNodes;\n\n        /**\n         * Gathers the mixin nodes associated with the node that were defined specifically for the given node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {Object<string, module:Core~Node>} The dictionary of the own mixin nodes keyed by their paths.\n         *\n         * @func\n         */\n        this.getOwnMixinNodes = core.getOwnMixinNodes;\n\n        /**\n         * Removes a mixin from the mixin set of the node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} mixinPath - the path of the mixin node.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.delMixin = core.delMixin;\n\n        /**\n         * Adds a mixin to the mixin set of the node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} mixinPath - the path of the mixin node.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.addMixin = core.addMixin;\n\n        /**\n         * Removes all mixins for a given node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {undefined | Error} If the node is not allowed to be modified, the function returns\n         * an error.\n         *\n         * @func\n         */\n        this.clearMixins = core.clearMixins;\n\n        /**\n         * Searches for the closest META node of the node in question and the direct mixins of that node.\n         * @param {module:Core~Node} node - the node in question\n         *\n         * @return {Object<string, module:Core~Node>} Returns the closest Meta node that is a base of the given node\n         * plus it returns all the mixin nodes associated with the base in a path-node dictionary.\n         *\n         * @func\n         */\n        this.getBaseTypes = core.getBaseTypes;\n\n        /**\n         * Checks if the given path can be added as a mixin to the given node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         * @param {string} mixinPath - the path of the mixin node.\n         *\n         * @return {Object} - Returns if the mixin could be added, or the reason why it is not.\n         *\n         * @func\n         */\n        this.canSetAsMixin = core.canSetAsMixin;\n\n        //library function TODO checking everything and adding all new functions\n\n        /**\n         * It adds a project as library to your project by copying it over. The library will be a node\n         * with the given name directly under your project's ROOT. It becomes a read-only portion of your project.\n         * You will only be able to manipulate it with library functions, but cannot edit the individual nodes inside.\n         * However you will be able to instantiate or copy the nodes into other places of your project. Every node\n         * that was part of the META in the originating project becomes part of your project's meta.\n         * @param {module:Core~Node} node - any regular node in your project.\n         * @param {string} name - the name of the library you wish to use as a namespace in your project.\n         * @param {string} libraryRootHash - the hash of your library's root\n         * (must exist in the project's collection at the time of call).\n         * @param {Object} libraryInfo - information about your project.\n         * @param {string} libraryInfo.projectId - the projectId of your library.\n         * @param {string} libraryInfo.branchName - the branch that your library follows in the origin project.\n         * @param {string} libraryInfo.commitHash - the version of your library.\n         * @param {function()} callback\n         *\n         * @func\n         */\n        this.addLibrary = core.addLibrary;\n\n        /**\n         * It updates a library in your project based on the input information. It will 'reaplace' the old\n         * version, keeping as much information as possible regarding the instances.\n         * @param {module:Core~Node} node - any regular node in your project.\n         * @param {string} name - the name of the library you want to update.\n         * @param {string} libraryRootHash - the hash of your library's new root\n         * (must exist in the project's collection at the time of call).\n         * @param {object} libraryInfo - information about your project.\n         * @param {string} libraryInfo.projectId - the projectId of your library.\n         * @param {string} libraryInfo.branchName - the branch that your library follows in the origin project.\n         * @param {string} libraryInfo.commitHash - the version of your library.\n         * @param {function()} callback\n         *\n         * @func\n         */\n        this.updateLibrary = core.updateLibrary;\n\n        /**\n         * Gives back the list of libraries in your project.\n         *\n         * @param {module:Core~Node} node - any node in your project.\n         *\n         * @return {string[]} - Returns the fully qualified names of all the libraries in your project\n         * (even embedded ones).\n         *\n         * @func\n         */\n        this.getLibraryNames = core.getLibraryNames;\n\n        /**\n         * Return the root of the inheritance chain of your Meta nodes.\n         *\n         * @param {module:Core~Node} node - any node in your project.\n         *\n         * @return {module:Core~Node} - Returns the acting FCO of your project.\n         *\n         * @func\n         */\n        this.getFCO = core.getFCO;\n\n        /**\n         * Returns true if the node in question is a library root..\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {bool} - Returns true if your node is a library root (even if it is embedded in other library),\n         * false otherwise.\n         *\n         * @func\n         */\n        this.isLibraryRoot = core.isLibraryRoot;\n\n        /**\n         * Returns true if the node in question is a library element..\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {bool} - Returns true if your node is a library element, false otherwise.\n         *\n         * @func\n         */\n        this.isLibraryElement = core.isLibraryElement;\n\n        /**\n         * Returns the resolved namespace for the node. If node is not in a library it returns the\n         * empty string. If the node is in a library of a library -\n         * the full name space is the library names joined together by dots.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string} - Returns the name space of the node.\n         *\n         * @example NS1.NS2\n         *\n         * @func\n         */\n        this.getNamespace = core.getNamespace;\n\n        /**\n         * Returns the fully qualified name of the node, which is the list of its namespaces separated\n         * by dot and followed by the name of the node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         *\n         * @return {string} - Returns the fully qualified name of the node,\n         * i.e. its namespaces and name join together by dots.\n         *\n         * @example NS1.NS2.name\n         *\n         * @func\n         */\n        this.getFullyQualifiedName = core.getFullyQualifiedName;\n\n        /**\n         * Removes a library from your project. It will also remove any remaining instances of the specific library.\n         *\n         * @param {module:Core~Node} node - any node in your project.\n         * @param {string} name - the name of your library.\n         *\n         * @func\n         */\n        this.removeLibrary = core.removeLibrary;\n\n        /**\n         * Returns the origin GUID of any library node.\n         *\n         * @param {module:Core~Node} node - the node in question.\n         * @param {undefined | string} name - name of the library where we want to deduct the GUID from. If not given,\n         * than the GUID is computed from the direct library root of the node\n         *\n         * @return {module:Core~GUID | Error} - Returns the origin GUID of the node or\n         * error if the query cannot be fulfilled.\n         *\n         * @func\n         */\n        this.getLibraryGuid = core.getLibraryGuid;\n\n        /**\n         * Rename a library in your project.\n         *\n         * @param {module:Core~Node} node - any node in your project.\n         * @param {string} oldName - the current name of the library.\n         * @param {string} newName - the new name of the project.\n         *\n         * @func\n         */\n        this.renameLibrary = core.renameLibrary;\n\n        /**\n         * Returns the info associated with the library.\n         *\n         * @param {module:Core~Node} node - any node in the project.\n         * @param {string} name - the name of the library.\n         *\n         * @return {object} - Returns the information object, stored alongside the library (that basically\n         * carries metaData about the library).\n         *\n         * @func\n         */\n        this.getLibraryInfo = core.getLibraryInfo;\n\n        /**\n         * Returns the root node of the given library.\n         *\n         * @param {module:Core~Node} node - any node in the project.\n         * @param {string} name - the name of the library.\n         *\n         * @return {module:Core~Node | null} - Returns the library root node or null, if the library is unknown.\n         *\n         * @func\n         */\n        this.getLibraryRoot = core.getLibraryRoot;\n\n        /**\n         * Returns all the Meta nodes within the given library.\n         * By default it will include nodes defined in any library within the given library.\n         *\n         * @param {module:Core~Node} node - any node of your project.\n         * @param {string} name - name of your library.\n         * @param {bool} [onlyOwn] - if true only returns with Meta nodes defined in the library itself.\n         *\n         * @return {module:Core~Node[]} - Returns an array of core nodes that are part of your meta from\n         * the given library.\n         *\n         * @func\n         */\n        this.getLibraryMetaNodes = core.getLibraryMetaNodes;\n\n        /**\n         * The function traverses the sub-tree of the project starting with the given root and calls the\n         * visit function for every node.\n         *\n         * @param {module:Core~Node} root - the root node of the sub-tree that needs to be traversed.\n         * @param {object} options - parameters to control the traversing.\n         * @param {bool} [options.excludeRoot = false] - controls whether the root should be excluded from visit.\n         * @param {'BFS'|'DFS'} [options.order = 'BFS'] - controls if the traversal order should be breadth first\n         * or depth first.\n         * @param {integer} [options.maxParallelLoad = 100]- the maximum number of parallel loads allowed.\n         * @param {bool} [options.stopOnError = true]- controls if the traverse should stop in case of error.\n         * @param {function(module:Core~Node,function)} visitFn - the visitation function that will be called for\n         * every node in the sub-tree, the second parameter of the function is a callback that should be called to\n         * note to the traversal function that the visitation for a given node finished.\n         * @param {function()} callback\n         *\n         * @func\n         */\n        this.traverse = core.traverse;\n\n        this.getClosureInformation = core.getClosureInformation;\n        this.importClosure = core.importClosure;\n\n        /**\n         * Collects the paths of all the instances of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         *\n         *@return {string[]} The function returns an array of the absolute paths of the instances.\n         *\n         * @func\n         */\n        this.getInstancePaths = core.getInstancePaths;\n\n        /**\n         * Loads all the instances of the given node.\n         * @param {module:Core~Node} node - the node in question.\n         * @param {function(string, module:Core~Node[])} callback\n         *\n         * @func\n         */\n        this.loadInstances = core.loadInstances;\n    }\n\n    return Core;\n});\n\n",
    "/*globals define*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/core/coreQ',['common/core/core', 'q'], function (Core, Q) {\n\n    'use strict';\n    /**\n     * @param {object} storage\n     * @param {object} options - contains logging information\n     * @extends Core\n     * @constructor\n     */\n    function CoreQ(storage, options) {\n        var self = this;\n        Core.call(self, storage, options);\n\n        var loadChildOrg = this.loadChild;\n        this.loadChild = function (parent, relativeId, callback) {\n            var deferred = Q.defer();\n            loadChildOrg(parent, relativeId, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadRootOrg = this.loadRoot;\n        this.loadRoot = function (hash, callback) {\n            var deferred = Q.defer();\n            loadRootOrg(hash, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadByPathOrg = this.loadByPath;\n        this.loadByPath = function (startNode, relativeId, callback) {\n            var deferred = Q.defer();\n            loadByPathOrg(startNode, relativeId, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadChildrenOrg = this.loadChildren;\n        this.loadChildren = function (parent, callback) {\n            var deferred = Q.defer();\n            loadChildrenOrg(parent, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadOwnChildrenOrg = this.loadOwnChildren;\n        this.loadOwnChildren = function (parent, callback) {\n            var deferred = Q.defer();\n            loadOwnChildrenOrg(parent, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadPointerOrg = this.loadPointer;\n        this.loadPointer = function (source, pointerName, callback) {\n            var deferred = Q.defer();\n            loadPointerOrg(source, pointerName, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadCollectionOrg = this.loadCollection;\n        this.loadCollection = function (target, pointerName, callback) {\n            var deferred = Q.defer();\n            loadCollectionOrg(target, pointerName, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadSubTreeOrg = this.loadSubTree;\n        this.loadSubTree = function (node, callback) {\n            var deferred = Q.defer();\n            loadSubTreeOrg(node, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadOwnSubTreeOrg = this.loadOwnSubTree;\n        this.loadOwnSubTree = function (node, callback) {\n            var deferred = Q.defer();\n            loadOwnSubTreeOrg(node, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadTreeOrg = this.loadTree;\n        this.loadTree = function (rootHash, callback) {\n            var deferred = Q.defer();\n            loadTreeOrg(rootHash, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var applyTreeDiffOrg = this.applyTreeDiff;\n        this.applyTreeDiff = function (root, patch, callback) {\n            var deferred = Q.defer();\n            applyTreeDiffOrg(root, patch, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var generateTreeDiffOrg = this.generateTreeDiff;\n        this.generateTreeDiff = function (sourceRoot, targetRoot, callback) {\n            var deferred = Q.defer();\n            generateTreeDiffOrg(sourceRoot, targetRoot, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var setGuidOrg = this.setGuid;\n        this.setGuid = function (node, guid, callback) {\n            var deferred = Q.defer();\n            setGuidOrg(node, guid, deferred.resolve);\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var addLibraryOrg = this.addLibrary;\n        this.addLibrary = function (node, name, libraryRootHash, libraryInfo, callback) {\n            var deferred = Q.defer();\n            addLibraryOrg(node, name, libraryRootHash, libraryInfo, deferred.resolve);\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var updateLibraryOrg = this.updateLibrary;\n        this.updateLibrary = function (node, name, updatedLibraryRootHash, libraryInfo, updateInstructions, callback) {\n            var deferred = Q.defer();\n            updateLibraryOrg(node, name, updatedLibraryRootHash, libraryInfo, updateInstructions, function (err, result) {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    deferred.resolve(result);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        var traverseOrg = this.traverse;\n        this.traverse = function (node, options, visitFn, callback) {\n            var deferred = Q.defer();\n            traverseOrg(node, options, visitFn, function (err, result) {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    deferred.resolve(result);\n                }\n            });\n            return deferred.promise.nodeify(callback);\n        };\n\n        var loadInstancesOrg = this.loadInstances;\n        this.loadInstances = function (node, callback) {\n            var deferred = Q.defer();\n            loadInstancesOrg(node, function (err, res) {\n                if (err) {\n                    deferred.reject(err instanceof Error ? err : new Error(err));\n                } else {\n                    deferred.resolve(res);\n                }\n            });\n\n            return deferred.promise.nodeify(callback);\n        };\n    }\n\n    CoreQ.prototype = Object.create(Core.prototype);\n    CoreQ.prototype.constructor = CoreQ;\n\n    return CoreQ;\n});\n",
    "/*globals define*/\n/*jshint browser:true*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('js/client/constants',[\n    'common/storage/constants',\n    'common/core/constants'\n], function (STORAGE_CONSTANTS, CORE_CONSTANTS) {\n    'use strict';\n\n    return {\n\n        STORAGE: STORAGE_CONSTANTS,\n        CORE: CORE_CONSTANTS,\n\n        BRANCH_STATUS: STORAGE_CONSTANTS.BRANCH_STATUS,\n\n        UNCAUGHT_EXCEPTION: 'UNCAUGHT_EXCEPTION',\n\n        // Events\n        NETWORK_STATUS_CHANGED: 'NETWORK_STATUS_CHANGED',\n        BRANCH_STATUS_CHANGED: 'BRANCH_STATUS_CHANGED',\n\n        BRANCH_CHANGED: 'BRANCH_CHANGED',\n        PROJECT_CLOSED: 'PROJECT_CLOSED',\n        PROJECT_OPENED: 'PROJECT_OPENED',\n\n        UNDO_AVAILABLE: 'UNDO_AVAILABLE',\n        REDO_AVAILABLE: 'REDO_AVAILABLE',\n\n        // general notification event\n        NOTIFICATION: 'NOTIFICATION',\n        CONNECTED_USERS_CHANGED: 'CONNECTED_USERS_CHANGED',\n\n        // Constraint Checking\n        META_RULES_RESULT: 'META_RULES_RESULT',\n        CONSTRAINT_RESULT: 'CONSTRAINT_RESULT'\n    };\n});\n",
    "/*globals define*/\n/*jshint node: true, browser: true, bitwise: false*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/util/guid',[],function () {\n    'use strict';\n\n    var guid = function () {\n        var S4 = function () {\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n        };\n\n        //return GUID\n        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());\n    };\n\n    return guid;\n});\n",
    "/*globals define*/\n/*jshint browser: true*/\n/**\n * REGISTRY KEY NAMES USED BY THE UI\n *\n * @author rkereskenyi / https://github.com/rkereskenyi\n */\n\ndefine('js/RegistryKeys',[], function () {\n\n    'use strict';\n\n    return {\n        COLOR: 'color',   //fill color of the item\n        TEXT_COLOR: 'textColor',   //color of the texts of the item\n        BORDER_COLOR: 'borderColor',   //border color of the item (if any)\n        POSITION: 'position',  //position of the item {x, y}\n        ROTATION: 'rotation',   //rotation of the item\n        DECORATOR: 'decorator', //custom decorator name of the item\n        IS_PORT: 'isPort',  //if the item is port in its parent or not\n        IS_ABSTRACT: 'isAbstract',  //whether the item is abstract or not !!! (attribute???)\n        REPLACEABLE: 'replaceable',  //whether the item is replaceable or not (not necessarily inherited).\n        LINE_STYLE: 'lineStyle',    //the style of the line (solid, dot, dash-dot)\n        LINE_TYPE: 'lineType',      //the type of the line (straight, bezier, ...)\n        LINE_WIDTH: 'lineWidth',     //width of the line\n        LINE_START_ARROW: 'lineStartArrow',     //start arrow of a line\n        LINE_END_ARROW: 'lineEndArrow',     //start arrow of a line\n        LINE_CUSTOM_POINTS: 'lineCustomPoints',  //custom routing points of a line\n        LINE_LABEL_PLACEMENT: 'lineLabel', // Where the connection labels should be placed 'src', 'mid', 'dst'.\n\n        //TODO maybe we should harmonize with project registry\n        VALID_PLUGINS: 'validPlugins', //space separated list of valid plugins for the project\n        USED_ADDONS: 'usedAddOns', //space separated list of used addons in the given project\n        VALID_VISUALIZERS: 'validVisualizers', //space separated list of valid visualizers for the node\n        VALID_DECORATORS: 'validDecorators', //space separated list of valid decorators for the project\n        /*\n         *  MISC\n         */\n        PROJECT_REGISTRY: 'ProjectRegistry',\n        DISPLAY_FORMAT: 'DisplayFormat',\n        SVG_ICON: 'SVGIcon',\n        PORT_SVG_ICON: 'PortSVGIcon',\n        TREE_ITEM_COLLAPSED_ICON: 'TreeItemCollapsedIcon',\n        TREE_ITEM_EXPANDED_ICON: 'TreeItemExpandedIcon',\n\n        /*\n         * META_SHEETS_METADATA (title, order, setID, etc)\n         */\n        META_SHEETS: 'MetaSheets',\n\n        /*\n         * CROSSCUTS_META_INFO_REGISTRY_KEY\n         */\n        CROSSCUTS: 'CrossCuts',\n\n        /*\n         * DISABLED CONNECTION AREAS FOR DIAGRAM-DESIGNER-WIDGET DECORATORS ARE STORED UNDER THIS REGISTRY KEY\n         * ON A PER DECORATOR BASIS\n         */\n        DIAGRAM_DESIGNER_WIDGET_DECORATOR_DISABLED_CONNECTION_AREAS:\n            'diagramDesignerWidgetDecoratorDisabledConnectionAreas_'\n    };\n});\n",
    "/*globals define, console*/\n/*jshint browser: true*/\n/**\n * @author kecso / https://github.com/kecso\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('js/client/gmeNodeGetter',['js/RegistryKeys'], function (REG_KEYS) {\n    'use strict';\n\n    function _logDeprecated(oldFn, newFn, comment) {\n        var commentStr = comment ? comment : '';\n        console.warn('\"gmeNode.' + oldFn + '\" is deprecated and will eventually be removed, use \"gmeNode.' + newFn +\n        '\" instead.' + commentStr);\n    }\n\n    /**\n     * @param {string} _id - Path of node.\n     * @param {GmeLogger} logger - logger.\n     * @param {object} state - state of the client.\n     * @param {function} storeNode - invoked when storing new nodes.\n     * @constructor\n     */\n    function GMENode(_id, logger, state, storeNode) {\n        this._id = _id;\n        this._logger = logger;\n        this._state = state;\n        this._storeNode = storeNode;\n    }\n\n    GMENode.prototype.getParentId = function () {\n        //just for sure, as it may missing from the cache\n        return this._storeNode(this._state.core.getParent(this._state.nodes[this._id].node));\n    };\n\n    GMENode.prototype.getId = function () {\n        return this._id;\n    };\n\n    GMENode.prototype.getRelid = function () {\n        return this._state.core.getRelid(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getGuid = function () {\n        return this._state.core.getGuid(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getChildrenIds = function () {\n        return this._state.core.getChildrenPaths(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getChildrenRelids = function () {\n        return this._state.core.getChildrenRelids(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getBaseId = function () {\n        var base = this._state.core.getBase(this._state.nodes[this._id].node);\n        if (base) {\n            return this._storeNode(base);\n        } else {\n            return null;\n        }\n    };\n\n    GMENode.prototype.isValidNewBase = function (basePath) {\n        var base;\n        if (typeof basePath === 'string') {\n            base = this._state.nodes[basePath].node;\n            if (base) {\n                return this._state.core.isValidNewBase(this._state.nodes[this._id].node, base);\n            } else {\n                return false;\n            }\n        } else if (basePath === undefined || basePath === null) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    GMENode.prototype.isValidNewParent = function (parentPath) {\n        var parent;\n        if (typeof parentPath === 'string') {\n            parent = this._state.nodes[parentPath].node;\n            if (parent) {\n                return this._state.core.isValidNewParent(this._state.nodes[this._id].node, parent);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    GMENode.prototype.getInheritorIds = function () {\n        return [];\n    };\n\n    GMENode.prototype.getAttribute = function (name) {\n        return this._state.core.getAttribute(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.getOwnAttribute = function (name) {\n        return this._state.core.getOwnAttribute(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.getEditableAttribute = function (name) {\n        var value = this._state.core.getAttribute(this._state.nodes[this._id].node, name);\n        if (typeof value === 'object') {\n            return JSON.parse(JSON.stringify(value));\n        }\n        return value;\n    };\n\n    GMENode.prototype.getOwnEditableAttribute = function (name) {\n        var value = this._state.core.getOwnAttribute(this._state.nodes[this._id].node, name);\n        if (typeof value === 'object') {\n            return JSON.parse(JSON.stringify(value));\n        }\n        return value;\n    };\n\n    GMENode.prototype.getRegistry = function (name) {\n        return this._state.core.getRegistry(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.getOwnRegistry = function (name) {\n        return this._state.core.getOwnRegistry(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.getEditableRegistry = function (name) {\n        var value = this._state.core.getRegistry(this._state.nodes[this._id].node, name);\n        if (typeof value === 'object') {\n            return JSON.parse(JSON.stringify(value));\n        }\n        return value;\n    };\n\n    GMENode.prototype.getOwnEditableRegistry = function (name) {\n        var value = this._state.core.getOwnRegistry(this._state.nodes[this._id].node, name);\n        if (typeof value === 'object') {\n            return JSON.parse(JSON.stringify(value));\n        }\n        return value;\n    };\n\n    GMENode.prototype.getPointer = function (name) {\n        //return _core.getPointerPath(_nodes[this._id].node,name);\n        if (name === 'base') {\n            //base is a special case as it complicates with inherited children\n            return {\n                to: this._state.core.getPath(this._state.core.getBase(this._state.nodes[this._id].node)),\n                from: []\n            };\n        }\n        return {to: this._state.core.getPointerPath(this._state.nodes[this._id].node, name), from: []};\n    };\n\n    GMENode.prototype.getPointerId = function (name) {\n        return this.getPointer(name).to;\n    };\n\n    GMENode.prototype.getOwnPointer = function (name) {\n        return {to: this._state.core.getOwnPointerPath(this._state.nodes[this._id].node, name), from: []};\n    };\n\n    GMENode.prototype.getOwnPointerId = function (name) {\n        return this.getOwnPointer(name).to;\n    };\n\n    GMENode.prototype.getPointerNames = function () {\n        return this._state.core.getPointerNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getOwnPointerNames = function () {\n        return this._state.core.getOwnPointerNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getAttributeNames = function () {\n        return this._state.core.getAttributeNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getValidAttributeNames = function () {\n        return this._state.core.getValidAttributeNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getOwnAttributeNames = function () {\n        return this._state.core.getOwnAttributeNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getOwnValidAttributeNames = function () {\n        return this._state.core.getOwnValidAttributeNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getAttributeMeta = function (name) {\n        return this._state.core.getAttributeMeta(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.getRegistryNames = function () {\n        return this._state.core.getRegistryNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getOwnRegistryNames = function () {\n        return this._state.core.getOwnRegistryNames(this._state.nodes[this._id].node);\n    };\n\n    //SET\n    GMENode.prototype.getMemberIds = function (setId) {\n        return this._state.core.getMemberPaths(this._state.nodes[this._id].node, setId);\n    };\n\n    GMENode.prototype.getSetNames = function () {\n        return this._state.core.getSetNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getMemberAttributeNames = function (setId, memberId) {\n        return this._state.core.getMemberAttributeNames(this._state.nodes[this._id].node, setId, memberId);\n    };\n\n    GMENode.prototype.getMemberAttribute = function (setId, memberId, name) {\n        return this._state.core.getMemberAttribute(this._state.nodes[this._id].node, setId, memberId, name);\n    };\n\n    GMENode.prototype.getEditableMemberAttribute = function (setId, memberId, name) {\n        var attr = this._state.core.getMemberAttribute(this._state.nodes[this._id].node, setId, memberId, name);\n        if (attr !== null && attr !== undefined) {\n            return JSON.parse(JSON.stringify(attr));\n        }\n        return null;\n    };\n\n    GMENode.prototype.getMemberRegistryNames = function (setId, memberId) {\n        return this._state.core.getMemberRegistryNames(this._state.nodes[this._id].node, setId, memberId);\n    };\n\n    GMENode.prototype.getMemberRegistry = function (setId, memberId, name) {\n        return this._state.core.getMemberRegistry(this._state.nodes[this._id].node, setId, memberId, name);\n    };\n\n    GMENode.prototype.getEditableMemberRegistry = function (setId, memberId, name) {\n        var attr = this._state.core.getMemberRegistry(this._state.nodes[this._id].node, setId, memberId, name);\n        if (attr !== null && attr !== undefined) {\n            return JSON.parse(JSON.stringify(attr));\n        }\n        return null;\n    };\n\n    //META\n    GMENode.prototype.getValidChildrenTypes = function () {\n        _logDeprecated('getValidChildrenTypes()', 'getValidChildrenIds()');\n        return this.getValidChildrenIds();\n    };\n\n    GMENode.prototype.getValidAttributeNames = function () {\n        return this._state.core.getValidAttributeNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.isValidAttributeValueOf = function (name, value) {\n        return this._state.core.isValidAttributeValueOf(this._state.nodes[this._id].node, name, value);\n    };\n\n    GMENode.prototype.getValidPointerNames = function () {\n        return this._state.core.getValidPointerNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getValidSetNames = function () {\n        return this._state.core.getValidSetNames(this._state.nodes[this._id].node);\n    };\n\n    //constraint functions\n    GMENode.prototype.getConstraintNames = function () {\n        return this._state.core.getConstraintNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getOwnConstraintNames = function () {\n        return this._state.core.getOwnConstraintNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getConstraint = function (name) {\n        return this._state.core.getConstraint(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.toString = function () {\n        return this._state.core.getAttribute(this._state.nodes[this._id].node, 'name') + ' (' + this._id + ')';\n    };\n\n    GMENode.prototype.getCollectionPaths = function (name) {\n        return this._state.core.getCollectionPaths(this._state.nodes[this._id].node, name);\n    };\n\n    GMENode.prototype.getInstancePaths = function () {\n        return this._state.core.getInstancePaths(this._state.nodes[this._id].node);\n    };\n\n    //adding functionality to get rid of GMEConcepts\n    GMENode.prototype.isConnection = function () {\n        return this._state.core.isConnection(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.isAbstract = function () {\n        return this._state.core.isAbstract(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.isLibraryRoot = function () {\n        return this._state.core.isLibraryRoot(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.isLibraryElement = function () {\n        return this._state.core.isLibraryElement(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getFullyQualifiedName = function () {\n        return this._state.core.getFullyQualifiedName(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getNamespace = function () {\n        return this._state.core.getNamespace(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getLibraryGuid = function () {\n        return this._state.core.getLibraryGuid(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getCrosscutsInfo = function () {\n        return this._state.core.getRegistry(this._state.nodes[this._id].node, REG_KEYS.CROSSCUTS) || [];\n    };\n\n    GMENode.prototype.getValidChildrenTypesDetailed = function (aspect, noFilter) {\n        var parameters = {\n                node: this._state.nodes[this._id].node,\n                children: [],\n                sensitive: !noFilter,\n                multiplicity: false,\n                aspect: aspect\n            },\n            fullList,\n            filteredList,\n            validTypes = {},\n            keys = this.getChildrenIds(),\n            i;\n\n        for (i = 0; i < keys.length; i++) {\n            if (this._state.nodes[keys[i]]) {\n                parameters.children.push(this._state.nodes[keys[i]].node);\n            }\n        }\n\n        fullList = this._state.core.getValidChildrenMetaNodes(parameters);\n\n        parameters.multiplicity = true;\n        filteredList = this._state.core.getValidChildrenMetaNodes(parameters);\n\n        for (i = 0; i < fullList.length; i += 1) {\n            validTypes[this._state.core.getPath(fullList[i])] = false;\n        }\n\n        for (i = 0; i < filteredList.length; i += 1) {\n            validTypes[this._state.core.getPath(filteredList[i])] = true;\n        }\n\n        return validTypes;\n    };\n\n    GMENode.prototype.getValidSetMemberTypesDetailed = function (setName) {\n        var parameters = {\n                node: this._state.nodes[this._id].node,\n                children: [],\n                sensitive: true,\n                multiplicity: false,\n                name: setName\n            },\n            fullList,\n            filteredList,\n            validTypes = {},\n            keys = this.getChildrenIds(),\n            i;\n\n        for (i = 0; i < keys.length; i++) {\n            if (this._state.nodes[keys[i]]) {\n                parameters.children.push(this._state.nodes[keys[i]].node);\n            }\n        }\n\n        fullList = this._state.core.getValidSetElementsMetaNodes(parameters);\n\n        parameters.multiplicity = true;\n        filteredList = this._state.core.getValidSetElementsMetaNodes(parameters);\n\n        for (i = 0; i < fullList.length; i += 1) {\n            validTypes[this._state.core.getPath(fullList[i])] = false;\n        }\n\n        for (i = 0; i < filteredList.length; i += 1) {\n            validTypes[this._state.core.getPath(filteredList[i])] = true;\n        }\n\n        return validTypes;\n    };\n\n    GMENode.prototype.getMetaTypeId = GMENode.prototype.getBaseTypeId = function () {\n        var metaType = this._state.core.getMetaType(this._state.nodes[this._id].node);\n\n        if (metaType) {\n            return this._storeNode(metaType);\n        } else {\n            return null;\n        }\n    };\n\n    GMENode.prototype.isMetaNode = function () {\n        return this._state.core.isMetaNode(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.isTypeOf = function (typePath) {\n        var typeNode = this._state.nodes[typePath].node;\n\n        if (typeNode) {\n            return this._state.core.isTypeOf(this._state.nodes[this._id].node, typeNode);\n        } else {\n            return false;\n        }\n    };\n\n    GMENode.prototype.isValidChildOf = function (parentPath) {\n        var parentNode = this._state.nodes[parentPath].node;\n\n        if (parentNode) {\n            return this._state.core.isValidChildOf(this._state.nodes[this._id].node, parentNode);\n        } else {\n            return false;\n        }\n    };\n\n    GMENode.prototype.getValidChildrenIds = function () {\n        return this._state.core.getValidChildrenPaths(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.isValidTargetOf = function (targetPath, name) {\n        var targetNode = this._state.nodes[targetPath].node;\n\n        if (targetNode) {\n            return this._state.core.isValidTargetOf(this._state.nodes[this._id].node, targetNode, name);\n        } else {\n            return false;\n        }\n    };\n\n    GMENode.prototype.getValidAspectNames = function () {\n        return this._state.core.getValidAspectNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getOwnValidAspectNames = function () {\n        return this._state.core.getOwnValidAspectNames(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.getAspectMeta = function (name) {\n        return this._state.core.getAspectMeta(this._state.nodes[this._id].node, name);\n    };\n\n    //MIXINS\n    GMENode.prototype.getMixinPaths = function () {\n        return this._state.core.getMixinPaths(this._state.nodes[this._id].node);\n    };\n\n    GMENode.prototype.canSetAsMixin = function (mixinPath) {\n        return this._state.core.canSetAsMixin(this._state.nodes[this._id].node, mixinPath);\n    };\n\n    GMENode.prototype.isReadOnly = function () {\n        return this._state.readOnlyProject || this._state.viewer || this.isLibraryRoot() || this.isLibraryElement();\n    };\n\n    //getNode\n    function getNode(_id, logger, state, storeNode) {\n        if (state.nodes[_id]) {\n            return new GMENode(_id, logger, state, storeNode);\n\n        } else {\n            //logger.warn('Tried to get node with path \"' + _id + '\" but was not in state.nodes');\n        }\n\n        return null;\n    }\n\n    return getNode;\n});\n",
    "/*globals define, console*/\n/*jshint browser: true*/\n/**\n * @author kecso / https://github.com/kecso\n */\ndefine('js/client/gmeNodeSetter',[], function () {\n    'use strict';\n    function gmeNodeSetter(logger, state, saveRoot, storeNode, printCoreError) {\n\n        function _logDeprecated(oldFn, newFn, isGetter, comment) {\n            var typeToUse = isGetter ? 'gmeNode.' : 'gmeClient.',\n                commentStr = comment ? comment : '';\n\n            console.warn('\"gmeClient.' + oldFn + '\" is deprecated and will eventually be removed, use \"' +\n            typeToUse + newFn + '\" instead.' + commentStr);\n        }\n\n        function _getNode(path) {\n            if (state.core && state.nodes[path] && typeof state.nodes[path].node === 'object') {\n                return state.nodes[path].node;\n            }\n        }\n\n        function _setAttrAndRegistry(node, desc) {\n            var name;\n            desc = desc || {};\n\n            if (desc.attributes) {\n                for (name in desc.attributes) {\n                    if (desc.attributes.hasOwnProperty(name)) {\n                        state.core.setAttribute(node, name, desc.attributes[name]);\n                    }\n                }\n            }\n\n            if (desc.registry) {\n                for (name in desc.registry) {\n                    if (desc.registry.hasOwnProperty(name)) {\n                        state.core.setRegistry(node, name, desc.registry[name]);\n                    }\n                }\n            }\n        }\n\n        function _copyMultipleNodes(paths, parentNode) {\n            var i,\n                tempContainer,\n                tempFrom,\n                tempTo,\n                helpArray,\n                subPathArray,\n                result = {},\n                childrenRelIds,\n                childNode,\n                newNode,\n                checkPaths = function () {\n                    var i,\n                        result = true;\n\n                    for (i = 0; i < paths.length; i += 1) {\n                        result = result && (state.nodes[paths[i]] &&\n                            typeof state.nodes[paths[i]].node === 'object');\n                    }\n\n                    return result;\n                };\n\n            // In order to preserve the relationships between the copied nodes. These steps are take:\n            // 1) A temporary container tempFrom is created.\n            // 2) The nodes are moved to tempFrom.\n            // 3) tempFrom is copied (including the children) to tempTo\n            // 4) The nodes from tempFrom are moved back to their parent(s).\n            // 5) The nodes from tempTo are moved to the targeted parent.\n            // 6) tempFrom and tempTo are removed.\n\n            if (parentNode && checkPaths()) {\n                helpArray = {};\n                subPathArray = {};\n\n                // 0) create a container for the tempNodes to preserve the relids of the original nodes\n                tempContainer = state.core.createNode({\n                    parent: state.core.getRoot(parentNode),\n                    base: state.core.getTypeRoot(state.nodes[paths[0]].node)\n                });\n\n                // 1) creating the 'from' object\n                tempFrom = state.core.createNode({\n                    parent: tempContainer\n                });\n\n                // 2) and moving every node under it\n                for (i = 0; i < paths.length; i += 1) {\n                    helpArray[paths[i]] = {};\n                    helpArray[paths[i]].origparent = state.core.getParent(state.nodes[paths[i]].node);\n                    helpArray[paths[i]].tempnode = state.core.moveNode(state.nodes[paths[i]].node, tempFrom);\n                    subPathArray[state.core.getRelid(helpArray[paths[i]].tempnode)] = paths[i];\n                    delete state.nodes[paths[i]];\n                }\n\n                // 3) do the copy\n                tempTo = state.core.copyNode(tempFrom, tempContainer);\n\n                // 4) moving back the temporary source\n                for (i = 0; i < paths.length; i += 1) {\n                    helpArray[paths[i]].node = state.core.moveNode(helpArray[paths[i]].tempnode,\n                        helpArray[paths[i]].origparent);\n                    storeNode(helpArray[paths[i]].node);\n                }\n\n                // 5) gathering the destination nodes and move them to targeted parent\n                childrenRelIds = state.core.getChildrenRelids(tempTo);\n\n                for (i = 0; i < childrenRelIds.length; i += 1) {\n                    if (subPathArray[childrenRelIds[i]]) {\n                        childNode = state.core.getChild(tempTo, childrenRelIds[i]);\n                        newNode = state.core.moveNode(childNode, parentNode);\n                        storeNode(newNode);\n                        result[subPathArray[state.core.getRelid(childNode)]] = newNode;\n                    } else {\n                        state.logger.error(new Error('Unexpected error when copying nodes!'));\n                    }\n                }\n\n                // 6) clean up the temporary container nodes.\n                state.core.deleteNode(tempContainer);\n            }\n\n            return result;\n        }\n\n        function setAttribute(path, name, value, msg) {\n            var error,\n                node = _getNode(path);\n\n            if (node) {\n                error = state.core.setAttribute(node, name, value);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setAttribute(' + path + ',' + name + ',' + JSON.stringify(value) + ')');\n            }\n        }\n\n        function delAttribute(path, name, msg) {\n            var error,\n                node = _getNode(path);\n\n            if (node) {\n                error = state.core.delAttribute(node, name);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delAttribute(' + path + ',' + name + ')');\n            }\n        }\n\n        function setRegistry(path, name, value, msg) {\n            var error,\n                node = _getNode(path);\n\n            if (node) {\n                error = state.core.setRegistry(node, name, value);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setRegistry(' + path + ',' + name + ',' + JSON.stringify(value) + ')');\n            }\n        }\n\n        function delRegistry(path, name, msg) {\n            var error,\n                node = _getNode(path);\n\n            if (node) {\n                error = state.core.delRegistry(node, name);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delRegistry(' + path + ',' + name + ')');\n            }\n        }\n\n        function copyNode(path, parentPath, desc, msg) {\n            var node = _getNode(path),\n                parentNode = _getNode(parentPath),\n                newNode;\n\n            if (node && parentNode) {\n                newNode = state.core.copyNode(node, parentNode);\n\n                if (newNode instanceof Error) {\n                    printCoreError(newNode);\n                    return;\n                }\n\n                _setAttrAndRegistry(newNode, desc);\n                storeNode(newNode);\n\n                saveRoot(msg || 'copyNode(' + path + ', ' + parentPath + ', ' + JSON.stringify(desc) + ')');\n            }\n        }\n\n        function copyMoreNodes(parameters, msg) {\n            var pathsToCopy = [],\n                parentNode = _getNode(parameters.parentId),\n                nodePath,\n                newNodes;\n\n            if (parentNode) {\n                for (nodePath in parameters) {\n                    if (parameters.hasOwnProperty(nodePath) && nodePath !== 'parentId') {\n                        pathsToCopy.push(nodePath);\n                    }\n                }\n\n                msg = msg || 'copyMoreNodes(' + JSON.stringify(pathsToCopy) + ',' + parameters.parentId + ')';\n\n                if (pathsToCopy.length < 1) {\n                    // empty on purpose\n                } else if (pathsToCopy.length === 1) {\n                    copyNode(pathsToCopy[0], parameters.parentId, parameters[pathsToCopy[0]], msg);\n                } else {\n                    newNodes = _copyMultipleNodes(pathsToCopy, parentNode);\n\n                    if (newNodes instanceof Error) {\n                        printCoreError(newNodes);\n                        return;\n                    }\n\n                    for (nodePath in newNodes) {\n                        if (newNodes.hasOwnProperty(nodePath) && parameters[nodePath]) {\n                            _setAttrAndRegistry(newNodes[nodePath], parameters[nodePath]);\n                        }\n                    }\n\n                    saveRoot(msg);\n                }\n            } else {\n                state.logger.error('wrong parameters for copy operation - denied -');\n            }\n        }\n\n        function moveMoreNodes(parameters, msg) {\n            var pathsToMove = [],\n                returnParams = {},\n                i,\n                newNode;\n\n            for (i in parameters) {\n                if (parameters.hasOwnProperty(i)) {\n                    if (i !== 'parentId') {\n                        pathsToMove.push(i);\n                    }\n                }\n            }\n\n            if (pathsToMove.length > 0 &&\n                typeof parameters.parentId === 'string' &&\n                state.nodes[parameters.parentId] &&\n                typeof state.nodes[parameters.parentId].node === 'object') {\n                for (i = 0; i < pathsToMove.length; i += 1) {\n                    if (state.nodes[pathsToMove[i]] &&\n                        typeof state.nodes[pathsToMove[i]].node === 'object') {\n\n                        newNode = state.core.moveNode(state.nodes[pathsToMove[i]].node,\n                            state.nodes[parameters.parentId].node);\n                        returnParams[pathsToMove[i]] = state.core.getPath(newNode);\n                        _setAttrAndRegistry(newNode, parameters[pathsToMove[i]]);\n                        delete state.nodes[pathsToMove[i]];\n                        storeNode(newNode, true);\n                    }\n                }\n            }\n\n            saveRoot(msg || 'moveMoreNodes(' + JSON.stringify(returnParams) + ')');\n            return returnParams;\n        }\n\n        function createChildren(parameters, msg) {\n            //TODO we also have to check out what is happening with the sets!!!\n            var result = {},\n                paths = [],\n                nodes = [],\n                node,\n                parent = state.nodes[parameters.parentId].node,\n                names, i, j, index, pointer,\n                newChildren = [],\n                relations = [];\n\n            //to allow 'meaningfull' instantiation of multiple objects\n            // we have to recreate the internal relations - except the base\n            paths = Object.keys(parameters);\n            paths.splice(paths.indexOf('parentId'), 1);\n            for (i = 0; i < paths.length; i++) {\n                node = state.nodes[paths[i]].node;\n                nodes.push(node);\n                pointer = {};\n                names = state.core.getPointerNames(node);\n                index = names.indexOf('base');\n                if (index !== -1) {\n                    names.splice(index, 1);\n                }\n\n                for (j = 0; j < names.length; j++) {\n                    index = paths.indexOf(state.core.getPointerPath(node, names[j]));\n                    if (index !== -1) {\n                        pointer[names[j]] = index;\n                    }\n                }\n                relations.push(pointer);\n            }\n\n            //now the instantiation\n            for (i = 0; i < nodes.length; i++) {\n                newChildren.push(state.core.createNode({parent: parent, base: nodes[i]}));\n            }\n\n            //now for the storage and relation setting\n            for (i = 0; i < paths.length; i++) {\n                _setAttrAndRegistry(newChildren[i], parameters[paths[i]]);\n\n                //relations\n                names = Object.keys(relations[i]);\n                for (j = 0; j < names.length; j++) {\n                    state.core.setPointer(newChildren[i], names[j], newChildren[relations[i][names[j]]]);\n                }\n\n                //store\n                result[paths[i]] = storeNode(newChildren[i]);\n\n            }\n\n            msg = msg || 'createChildren(' + JSON.stringify(result) + ')';\n            saveRoot(msg);\n            return result;\n        }\n\n        function deleteNode(path, msg) {\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.deleteNode(node);\n                saveRoot(msg || 'deleteNode(' + path + ')');\n            }\n        }\n\n        function deleteNodes(paths, msg) {\n            var didDelete = false,\n                i,\n                node;\n\n            for (i = 0; i < paths.length; i++) {\n                node = _getNode(paths[i]);\n                if (node) {\n                    state.core.deleteNode(node);\n                    didDelete = true;\n                }\n            }\n\n            if (didDelete) {\n                saveRoot(msg || 'deleteNodes(' + paths + ')');\n            }\n        }\n\n        function createNode(parameters, desc, msg) {\n            var parentNode = _getNode(parameters.parentId),\n                baseNode = _getNode(parameters.baseId),\n                newNode,\n                newID;\n\n            if (parentNode) {\n                newNode = state.core.createNode({\n                    parent: parentNode,\n                    base: baseNode,\n                    guid: parameters.guid,\n                    relid: parameters.relid\n                });\n\n                if (newNode instanceof Error) {\n                    printCoreError(newNode);\n                    return;\n                }\n\n                // By default the position will be {100, 100}\n                desc = desc || {};\n                desc.registry = desc.registry || {};\n                desc.registry.position = desc.registry.position || {};\n                desc.registry.position.x = desc.registry.position.x || 100;\n                desc.registry.position.y = desc.registry.position.y || 100;\n\n                _setAttrAndRegistry(newNode, desc);\n\n                storeNode(newNode);\n                newID = state.core.getPath(newNode);\n                saveRoot(msg || 'createNode(' + parameters.parentId + ',' + parameters.baseId + ',' + newID + ')');\n            }\n\n            return newID;\n        }\n\n        function setPointer(path, name, target, msg) {\n            var node = _getNode(path),\n                targetNode;\n\n            if (node) {\n                if (target === null) {\n                    state.core.setPointer(node, name, target);\n                } else {\n                    targetNode = _getNode(target);\n                    state.core.setPointer(node, name, targetNode);\n                }\n\n                saveRoot(msg || 'setPointer(' + path + ',' + name + ',' + target + ')');\n            }\n        }\n\n        function delPointer(path, name, msg) {\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.delPointer(node, name);\n                saveRoot(msg || 'delPointer(' + path + ',' + name + ')');\n            }\n        }\n\n        // Mixed argument methods - START\n        function addMember(path, memberPath, setId, msg) {\n            // FIXME: This will have to break due to switched arguments\n            var node = _getNode(path),\n                memberNode = _getNode(memberPath);\n\n            if (node && memberNode) {\n                state.core.addMember(node, setId, memberNode);\n                saveRoot(msg || 'addMember(' + path + ',' + memberPath + ',' + setId + ')');\n            }\n        }\n\n        function removeMember(path, memberPath, setId, msg) {\n            // FIXME: This will have to break due to switched arguments (sort of)\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.delMember(node, setId, memberPath);\n                saveRoot(msg || 'removeMember(' + path + ',' + memberPath + ',' + setId + ')');\n            }\n        }\n\n        function setMemberAttribute(path, memberPath, setId, name, value, msg) {\n            // FIXME: This will have to break due to switched arguments\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.setMemberAttribute(node, setId, memberPath, name, value);\n                saveRoot(msg || 'setMemberAttribute(' + path + ',' + memberPath + ',' + setId + ',' + name +\n                    ',' + value + ')');\n            }\n        }\n\n        function delMemberAttribute(path, memberPath, setId, name, msg) {\n            // FIXME: This will have to break due to switched arguments\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.delMemberAttribute(node, setId, memberPath, name);\n                saveRoot(msg || 'delMemberAttribute(' + path + ',' + memberPath + ',' + setId + ',' + name + ')');\n            }\n        }\n\n        function setMemberRegistry(path, memberPath, setId, name, value, msg) {\n            // FIXME: This will have to break due to switched arguments\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.setMemberRegistry(node, setId, memberPath, name, value);\n                saveRoot(msg || 'setMemberRegistry(' + path + ',' + memberPath + ',' + setId + ',' + name + ',' +\n                    JSON.stringify(value) + ')');\n            }\n        }\n\n        function delMemberRegistry(path, memberPath, setId, name, msg) {\n            // FIXME: This will have to break due to switched arguments\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.delMemberRegistry(node, setId, memberPath, name);\n                saveRoot(msg || 'delMemberRegistry(' + path + ',' + memberPath + ',' + setId + ',' + name + ')');\n            }\n        }\n        // Mixed argument methods - END\n\n        function createSet(path, setId, msg) {\n            var node = _getNode(path);\n\n            if (node) {\n                state.core.createSet(node, setId);\n                saveRoot(msg || 'createSet(' + path + ',' + setId + ')');\n            }\n        }\n\n        function delSet(path, setId, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delSet(node, setId);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delSet(' + path + ',' + setId + ')');\n            }\n        }\n\n        function setBase(path, basePath, msg) {\n            var node = _getNode(path),\n                baseNode = _getNode(basePath),\n                error;\n\n            if (node && baseNode) {\n                error = state.core.setBase(node, baseNode);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setBase(' + path + ',' + basePath + ')');\n            }\n        }\n\n        function moveNode(path, parentPath, msg) {\n            var node = _getNode(path),\n                parentNode = _getNode(parentPath),\n                error;\n\n            if (node && parentNode) {\n                error = state.core.moveNode(node, parentNode);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'moveNode(' + path + ',' + parentPath + ')');\n            }\n        }\n\n        function delBase(path, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.setBase(node, null);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delBase(' + path + ')');\n            }\n        }\n\n        // META functions\n        function getMeta(path) {\n            var node = _getNode(path),\n                meta = {children: {}, attributes: {}, pointers: {}, aspects: {}};\n\n            if (!node) {\n                return null;\n            }\n\n            meta = state.core.getJsonMeta(node);\n\n            return meta;\n        }\n\n        function setMeta(path, meta, msg) {\n            var node = _getNode(path),\n                otherNode,\n                name,\n                i,\n                error;\n\n            if (node) {\n                state.core.clearMetaRules(node);\n\n                //children\n                if (meta.children && meta.children.items && meta.children.items.length > 0) {\n                    error = state.core.setChildrenMetaLimits(node, meta.children.min, meta.children.max);\n                    if (error instanceof Error) {\n                        printCoreError(error);\n                        return;\n                    }\n\n                    for (i = 0; i < meta.children.items.length; i += 1) {\n                        otherNode = _getNode(meta.children.items[i]);\n                        if (otherNode) {\n                            error = state.core.setChildMeta(node,\n                                otherNode,\n                                meta.children.minItems[i],\n                                meta.children.maxItems[i]);\n\n                            if (error instanceof Error) {\n                                printCoreError(error);\n                                return;\n                            }\n                        }\n                    }\n                }\n\n                //attributes\n                if (meta.attributes) {\n                    for (i in meta.attributes) {\n                        error = state.core.setAttributeMeta(node, i, meta.attributes[i]);\n                        if (error instanceof Error) {\n                            printCoreError(error);\n                            return;\n                        }\n                    }\n                }\n\n                //pointers and sets\n                if (meta.pointers) {\n                    for (name in meta.pointers) {\n                        if (meta.pointers[name].items && meta.pointers[name].items.length > 0) {\n                            error = state.core.setPointerMetaLimits(node,\n                                name,\n                                meta.pointers[name].min,\n                                meta.pointers[name].max);\n\n                            if (error instanceof Error) {\n                                printCoreError(error);\n                                return;\n                            }\n\n                            for (i = 0; i < meta.pointers[name].items.length; i += 1) {\n                                otherNode = _getNode(meta.pointers[name].items[i]);\n                                if (otherNode) {\n                                    error = state.core.setPointerMetaTarget(node,\n                                        name,\n                                        otherNode,\n                                        meta.pointers[name].minItems[i],\n                                        meta.pointers[name].maxItems[i]);\n                                    if (error instanceof Error) {\n                                        printCoreError(error);\n                                        return;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //aspects\n                if (meta.aspects) {\n                    for (name in meta.aspects) {\n                        for (i = 0; i < meta.aspects[name].length; i += 1) {\n                            otherNode = _getNode(meta.aspects[name][i]);\n                            if (otherNode) {\n                                error = state.core.setAspectMetaTarget(node, name, otherNode);\n                                if (error instanceof Error) {\n                                    printCoreError(error);\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //constraints\n                if (meta.constraints) {\n                    for (name in meta.constraints) {\n                        if (typeof meta.constraints[name] === 'object') {\n                            error = state.core.setConstraint(node, name, meta.constraints[name]);\n                            if (error instanceof Error) {\n                                printCoreError(error);\n                                return;\n                            }\n                        }\n                    }\n                }\n\n                saveRoot(msg || 'setMeta(' + path + ')');\n            }\n        }\n\n        function addMixin(path, mixinPath, msg) {\n            var error,\n                node = _getNode(path);\n\n            if (node) {\n                error = state.core.addMixin(node, mixinPath);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'addMixin(' + path + ',' + mixinPath + ')');\n            }\n        }\n\n        function delMixin(path, mixinPath, msg) {\n            var error,\n                node = _getNode(path);\n\n            if (node) {\n                error = state.core.delMixin(node, mixinPath);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg, 'delMixin(' + path + ',' + mixinPath + ')');\n            }\n        }\n\n        function setChildrenMetaAttribute(path, attrName, value, msg) {\n            if (attrName !== 'items') {\n                var rawMeta = getMeta(path);\n                rawMeta.children[attrName] = value;\n                setMeta(path, rawMeta, msg);\n            }\n        }\n\n        function setChildMeta(path, childPath, min, max, msg) {\n            var node = _getNode(path),\n                childNode = _getNode(childPath),\n                error;\n\n            if (childNode && node) {\n                error = state.core.setChildMeta(node, childNode, min, max);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg ||'setChildMeta(' + path + ', ' + childPath + ',' + min || -1 + ',' + max || -1 +')');\n            }\n        }\n\n        function setChildrenMeta(path, meta, msg) {\n            var node = _getNode(path),\n                target,\n                error,\n                i;\n\n            if (meta && meta.items && node) {\n                for (i = 0; i < meta.items.length; i += 1) {\n                    target = _getNode(meta.items[i].id);\n                    if (target) {\n                        error = state.core.setChildMeta(node, target, meta.items[i].min, meta.items[i].max);\n                        if (error instanceof Error) {\n                            printCoreError(error);\n                            return;\n                        }\n                    }\n                }\n\n                error = state.core.setChildrenMetaLimits(node, meta.min, meta.max);\n\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'Meta.setChildrenMeta(' + path + ')');\n            }\n        }\n\n        function delChildMeta(path, typeId, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delChildMeta(node, typeId);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delChildMeta(' + path + ', ' + typeId + ')');\n            }\n        }\n\n        function setAttributeMeta(path, name, schema, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.setAttributeMeta(node, name, schema);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setAttributeMeta(' + path + ', ' + name + ')');\n            }\n        }\n\n        function delAttributeMeta(path, name, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delAttributeMeta(node, name);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delAttributeMeta(' + path + ', ' + name + ')');\n            }\n        }\n\n        function setPointerMetaTarget(path, name, targetPath, min, max, msg) {\n            var node = _getNode(path),\n                targetNode = _getNode(targetPath),\n                error;\n\n            if (node && targetNode) {\n                error = state.core.setPointerMetaTarget(node, name, targetNode, min, max);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setPointerMetaTarget(' + path + ', ' + name + ', ' + targetPath + ',' +\n                    min || -1 + ',' + max || -1 + ')');\n            }\n        }\n\n        function delPointerMetaTarget(path, name, targetPath, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delPointerMetaTarget(node, name, targetPath);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delPointerMetaTarget(' + path + ', ' + name + ', ' + targetPath + ')');\n            }\n        }\n\n        function delPointerMeta(path, name, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delPointerMeta(node, name);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delPointerMeta(' + path + ', ' + name + ')');\n            }\n        }\n\n        function setPointerMeta(path, name, meta, msg) {\n            var node = _getNode(path),\n                target,\n                error,\n                i;\n\n            if (meta && meta.items && node) {\n                for (i = 0; i < meta.items.length; i += 1) {\n                    target = _getNode(meta.items[i].id);\n                    if (target) {\n                        error = state.core.setPointerMetaTarget(node,\n                            name,\n                            target,\n                            meta.items[i].min,\n                            meta.items[i].max);\n\n                        if (error instanceof Error) {\n                            printCoreError(error);\n                            return;\n                        }\n                    }\n                }\n\n                error = state.core.setPointerMetaLimits(node, name, meta.min, meta.max);\n\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setPointerMeta(' + path + ', ' + name + ')');\n            }\n        }\n\n        function setAspectMetaTarget(path, name, targetPath, msg) {\n            var node = _getNode(path),\n                targetNode = _getNode(targetPath),\n                error;\n\n            if (node && targetNode) {\n                error = state.core.setAspectMetaTarget(node, name, targetNode);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'setAspectMetaTarget(' + path + ', ' + name + ',' + targetPath + ')');\n            }\n        }\n\n        function delAspectMetaTarget(path, name, targetPath, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delAspectMetaTarget(node, name, targetPath);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delAspectMeta(' + path + ', ' + name + ')');\n            }\n        }\n\n        function setAspectMetaTargets(path, name, targetPaths, msg) {\n            var node = _getNode(path),\n                i,\n                target,\n                error;\n\n            if (node) {\n                error = state.core.delAspectMeta(node, name);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                for (i = 0; i < targetPaths.length; i += 1) {\n                    target = _getNode(targetPaths[i]);\n                    if (target) {\n                        error = state.core.setAspectMetaTarget(node, name, target);\n                        if (error instanceof Error) {\n                            printCoreError(error);\n                            return;\n                        }\n                    }\n                }\n\n                saveRoot(msg || 'setAspectMetaTargets(' + path + ', ' + name + ',' + JSON.stringify(targetPaths) + ')');\n            }\n        }\n\n        function delAspectMeta(path, name, msg) {\n            var node = _getNode(path),\n                error;\n\n            if (node) {\n                error = state.core.delAspectMeta(node, name);\n                if (error instanceof Error) {\n                    printCoreError(error);\n                    return;\n                }\n\n                saveRoot(msg || 'delAspectMeta(' + path + ', ' + name + ')');\n            }\n        }\n\n        // Deprecated meta-getters from core/users/meta\n        // TODO: These should be removed at next version bump.\n\n        function isTypeOf(path, typePath) {\n            var node = _getNode(path),\n                typeNode = _getNode(typePath);\n\n            if (node && typeNode) {\n                return state.core.isTypeOf(node, typeNode);\n            }\n\n            return false;\n        }\n\n        function isValidTarget(path, name, targetPath) {\n            var node = _getNode(path),\n                target = _getNode(targetPath);\n\n            if (node && target) {\n                return state.core.isValidTargetOf(target, node, name);\n            }\n\n            return false;\n        }\n\n        function filterValidTarget(path, name, paths) {\n            var targets = [];\n\n            for (var i = 0; i < paths.length; i++) {\n                if (isValidTarget(path, name, paths[i])) {\n                    targets.push(paths[i]);\n                }\n            }\n\n            return targets;\n        }\n\n        function getValidTargetTypes(path, name) {\n            var node = _getNode(path),\n                meta, i,\n                targets = [];\n\n            if (node) {\n                meta = state.core.getPointerMeta(node, name);\n\n                for (i in meta) {\n                    if (i !== 'min' && i !== 'max') {\n                        targets.push(i);\n                    }\n                }\n            }\n\n            return targets;\n        }\n\n        function getOwnValidTargetTypes(path, name) {\n            var node = _getNode(path),\n                ownMeta;\n\n            if (node) {\n                ownMeta = state.core.getOwnJsonMeta(node);\n                ownMeta.pointers = ownMeta.pointers || {};\n                ownMeta.pointers[name] = ownMeta.pointers[name] || {};\n\n                return ownMeta.pointers[name].items || [];\n            }\n\n            return [];\n        }\n\n        function _getValidTargetItems(path, name, ownOnly) {\n            var node = _getNode(path),\n                meta,\n                paths,\n                items = [],\n                i;\n\n            if (node) {\n                meta = state.core.getPointerMeta(node, name);\n                paths = ownOnly ? state.core.getOwnJsonMeta(node) : state.core.getJsonMeta(node);\n                if (paths && paths.pointers && paths.pointers[name]) {\n                    paths = paths.pointers[name].items || [];\n                } else {\n                    paths = [];\n                }\n\n                if (meta && paths.length > 0) {\n                    delete meta.min;\n                    delete meta.max;\n                    for (i in meta) {\n                        if (paths.indexOf(i) !== -1) {\n                            items.push({\n                                id: i,\n                                min: meta[i].min === -1 ? undefined : meta[i].min,\n                                max: meta[i].max === -1 ? undefined : meta[i].max\n                            });\n                        }\n                    }\n\n                    return items;\n                }\n            }\n\n            return null;\n        }\n\n        function getValidTargetItems(path, name) {\n            return _getValidTargetItems(path, name, false);\n        }\n\n        function getOwnValidTargetItems(path, name) {\n            return _getValidTargetItems(path, name, true);\n        }\n\n        function isValidChild(path, childPath) {\n            var node = _getNode(path),\n                child = _getNode(childPath);\n\n            if (node && child) {\n                return state.core.isValidChildOf(child, node);\n            }\n\n            return false;\n        }\n\n        function getValidChildrenTypes(path) {\n            var node = _getNode(path);\n\n            if (node) {\n                return state.core.getValidChildrenPaths(node);\n            }\n\n            return [];\n        }\n\n        function getValidAttributeNames(path) {\n            var node = _getNode(path);\n\n            if (node) {\n                return state.core.getValidAttributeNames(node);\n            }\n\n            return [];\n        }\n\n        function getOwnValidAttributeNames(path) {\n            var node = _getNode(path);\n\n            if (node) {\n                return state.core.getOwnValidAttributeNames(node);\n            }\n\n            return [];\n        }\n\n        function getPointerMeta(path, name) {\n            var node = _getNode(path),\n                meta,\n                i,\n                pointerMeta;\n\n            if (node) {\n                meta = state.core.getPointerMeta(node, name);\n\n                if (meta) {\n                    pointerMeta = {min: meta.min, max: meta.max, items: []};\n\n                    for (i in meta) {\n                        if (i !== 'min' && i !== 'max') {\n                            pointerMeta.items.push({\n                                id: i,\n                                min: meta[i].min === -1 ? undefined : meta[i].min,\n                                max: meta[i].max === -1 ? undefined : meta[i].max\n                            });\n                        }\n                    }\n\n                    return pointerMeta;\n                }\n            }\n\n            return null;\n        }\n\n        function getAttributeSchema(path, name) {\n            var node = _getNode(path);\n\n            if (node) {\n                return state.core.getAttributeMeta(node, name);\n            }\n\n            return;\n        }\n\n        function getMetaAspectNames(path) {\n            var node = _getNode(path);\n\n            if (node) {\n                return state.core.getValidAspectNames(node);\n            }\n\n            return [];\n        }\n\n        function getOwnMetaAspectNames(path) {\n            var node = _getNode(path);\n\n            if (node) {\n                return state.core.getOwnValidAspectNames(node);\n            }\n\n            return [];\n        }\n\n        function getMetaAspect(path, name) {\n            var node = _getNode(path),\n                meta;\n\n            if (node) {\n                meta = state.core.getAspectMeta(node, name);\n\n                if (meta) {\n                    return {items: meta};\n                }\n            }\n\n            return null;\n        }\n\n        function hasOwnMetaRules(path) {\n            var node = _getNode(path),\n                ownMeta, key;\n\n            if (node) {\n                ownMeta = state.core.getOwnJsonMeta(node);\n\n                //children\n                if (ownMeta.children && ownMeta.children.items && ownMeta.children.items.length > 0) {\n                    return true;\n                }\n\n                //pointers\n                for (key in ownMeta.pointers || {}) {\n                    return true;\n                }\n\n                //attributes\n                for (key in ownMeta.attributes || {}) {\n                    return true;\n                }\n                //aspects\n                for (key in ownMeta.aspects || {}) {\n                    return true;\n                }\n\n                //mixins\n                if (ownMeta.mixins && ownMeta.mixins.length > 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function getChildrenMeta(path) {\n            //the returned object structure is : {'min':0,'max':0,'items':[{'id':path,'min':0,'max':0},...]}\n            var node = _getNode(path),\n                meta, i,\n                childrenMeta = {items: []};\n\n            if (node) {\n                meta = state.core.getChildrenMeta(node);\n                if (meta) {\n                    childrenMeta = {min: meta.min, max: meta.max, items: []};\n                    for (i in meta) {\n                        if (i !== 'min' && i !== 'max') {\n                            childrenMeta.items.push({\n                                id: i,\n                                min: meta[i].min === -1 ? undefined : meta[i].min,\n                                max: meta[i].max === -1 ? undefined : meta[i].max\n                            });\n                        }\n                    }\n                }\n\n                return childrenMeta;\n            }\n\n            return null;\n        }\n\n        function getChildrenMetaAttribute(path/*, attrName*/) {\n            var childrenMeta = getChildrenMeta(path);\n            if (childrenMeta) {\n                return childrenMeta.attrName;\n            }\n            return null;\n        }\n\n        function getValidChildrenItems(path) {\n            var childrenMeta = getChildrenMeta(path);\n            if (childrenMeta) {\n                return childrenMeta.items;\n            }\n            return null;\n        }\n\n        function getOwnValidChildrenTypes(path) {\n            var node = _getNode(path),\n                ownMeta;\n\n            if (node) {\n                ownMeta = state.core.getOwnJsonMeta(node);\n\n                if (ownMeta && ownMeta.children && ownMeta.children.items) {\n                    return ownMeta.children.items;\n                }\n            }\n\n            return [];\n        }\n\n        function getAspectTerritoryPattern(path, name) {\n            var aspect = getMetaAspect(path, name);\n\n            if (aspect !== null) {\n                aspect.children = 1; //TODO now it is fixed, maybe we can change that in the future\n                return aspect;\n            }\n            return null;\n        }\n\n        return {\n            setAttribute: setAttribute,\n            setAttributes: function() {\n                _logDeprecated('setAttributes', 'setAttribute');\n                setAttribute.apply(null, arguments);\n            },\n\n            delAttribute: delAttribute,\n            delAttributes: function() {\n            _logDeprecated('delAttributes', 'delAttribute');\n                delAttribute.apply(null, arguments);\n            },\n            setRegistry: setRegistry,\n            delRegistry: delRegistry,\n\n            copyNode: copyNode,\n            copyMoreNodes: copyMoreNodes,\n            moveNode: moveNode,\n            moveMoreNodes: moveMoreNodes,\n            deleteNode: deleteNode,\n            deleteNodes: deleteNodes,\n            delMoreNodes: function() {\n                _logDeprecated('delMoreNodes', 'deleteNodes');\n                deleteNodes.apply(null, arguments);\n            },\n            createNode: createNode,\n            createChild: function (parameters, msg) {\n                return createNode(parameters, {\n                    registry: {\n                        position: parameters.position\n                    }\n                }, msg);\n            },\n            createChildren: createChildren,\n\n            setPointer: setPointer,\n            makePointer: function() {\n                _logDeprecated('makePointer', 'setPointer');\n                setPointer.apply(null, arguments);\n            },\n            delPointer: delPointer,\n            deletePointer: delPointer,\n\n            addMember: addMember,\n            removeMember: removeMember,\n            setMemberAttribute: setMemberAttribute,\n            delMemberAttribute: delMemberAttribute,\n            setMemberRegistry: setMemberRegistry,\n            delMemberRegistry: delMemberRegistry,\n            createSet: createSet,\n            delSet: delSet,\n            deleteSet: delSet,\n\n            setBase: setBase,\n            delBase: delBase,\n\n            // --- Meta ---\n            setMeta: setMeta,\n\n            // containment\n            setChildrenMeta: setChildrenMeta,\n            setChildrenMetaAttribute: setChildrenMetaAttribute,\n            setChildMeta: setChildMeta,\n            updateValidChildrenItem: function (path, newTypeObj, msg) {\n                _logDeprecated('updateValidChildrenItem(path, newTypeObj, msg)',\n                    'setChildMeta(path, childPath, min, max, msg)');\n                newTypeObj = newTypeObj || {};\n                setChildMeta(path, newTypeObj.id, newTypeObj.min, newTypeObj.max, msg);\n            },\n\n            delChildMeta: delChildMeta,\n            removeValidChildrenItem: function () {\n                _logDeprecated('removeValidChildrenItem', 'delChildMeta');\n                delChildMeta.apply(null, arguments);\n            },\n\n            // attribute\n            setAttributeMeta: setAttributeMeta,\n            setAttributeSchema: function() {\n                _logDeprecated('setAttributeSchema', 'setAttributeMeta');\n                setAttributeMeta.apply(null, arguments);\n            },\n            delAttributeMeta: delAttributeMeta,\n            removeAttributeSchema: function() {\n                _logDeprecated('removeAttributeSchema', 'delAttributeMeta');\n                delAttributeMeta.apply(null, arguments);\n            },\n\n            // pointer\n            setPointerMeta: setPointerMeta,\n            setPointerMetaTarget: setPointerMetaTarget,\n            updateValidTargetItem: function (path, name, targetObj, msg) {\n            _logDeprecated('updateValidTargetItem(path, name, targetObj, msg)',\n                    'setPointerMetaTarget(path, name, targetPath, childPath, min, max, msg)');\n                targetObj = targetObj || {};\n                setPointerMetaTarget(path, name, targetObj.id, targetObj.min, targetObj.max, msg);\n            },\n\n            delPointerMetaTarget: delPointerMetaTarget,\n            removeValidTargetItem:  function() {\n                _logDeprecated('removeValidTargetItem', 'delPointerMetaTarget');\n                delPointerMetaTarget.apply(null, arguments);\n            },\n            delPointerMeta: delPointerMeta,\n            deleteMetaPointer: function() {\n                _logDeprecated('deleteMetaPointer', 'delPointerMeta');\n                delPointerMeta.apply(null, arguments);\n            },\n\n            // aspect\n            setAspectMetaTarget: setAspectMetaTarget,\n            setAspectMetaTargets: setAspectMetaTargets,\n            setMetaAspect: function() {\n                _logDeprecated('setMetaAspect', 'setAspectMetaTargets');\n                setAspectMetaTargets.apply(null, arguments);\n            },\n            delAspectMetaTarget: delAspectMetaTarget,\n            delAspectMeta: delAspectMeta,\n            deleteMetaAspect: function() {\n                _logDeprecated('deleteMetaAspect', 'delAspectMeta');\n                delAspectMeta.apply(null, arguments);\n            },\n\n            // mixin\n            addMixin: addMixin,\n            delMixin: delMixin,\n\n            // Deprecated meta-getters\n            // TODO: These should be moved to Util/GMEConcepts or removed.\n            getMeta: function() {\n                _logDeprecated('getMeta(path)', 'getJsonMeta()', true);\n                return getMeta.apply(null, arguments);\n            },\n            isTypeOf: function() {\n                _logDeprecated('isTypeOf(path, typePath)', 'isTypeOf(typePath)', true);\n                return isTypeOf.apply(null, arguments);\n            },\n            isValidTarget: function() {\n                _logDeprecated('isValidTarget(path, name, targetPath)', 'isValidTargetOf(targetPath, name)', true);\n                return isValidTarget.apply(null, arguments);\n            },\n            filterValidTarget: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return filterValidTarget.apply(null, arguments);\n            },\n            getValidTargetTypes: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getValidTargetTypes.apply(null, arguments);\n            },\n            getOwnValidTargetTypes: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getOwnValidTargetTypes.apply(null, arguments);\n            },\n            getValidTargetItems: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getValidTargetItems.apply(null, arguments);\n            },\n            getOwnValidTargetItems: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getOwnValidTargetItems.apply(null, arguments);\n            },\n            getPointerMeta: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getPointerMeta.apply(null, arguments);\n            },\n            isValidChild: function() {\n                _logDeprecated('isValidChild(path, childPath)', 'isValidChildOf(parentPath)', true);\n                return isValidChild.apply(null, arguments);\n            },\n            getValidChildrenTypes: function() {\n                _logDeprecated('getValidChildrenTypes(path)', 'getValidChildrenIds()', true);\n                return getValidChildrenTypes.apply(null, arguments);\n            },\n            getValidAttributeNames: function() {\n                _logDeprecated('getValidAttributeNames(path)', 'getValidAttributeNames()', true);\n                return getValidAttributeNames.apply(null, arguments);\n            },\n            getOwnValidAttributeNames: function() {\n                _logDeprecated('getOwnValidAttributeNames(path)', 'getOwnValidAttributeNames()', true);\n                return getOwnValidAttributeNames.apply(null, arguments);\n            },\n            getAttributeSchema: function() {\n                _logDeprecated('getAttributeSchema(path, name)', 'getAttributeMeta(name)', true);\n                return getAttributeSchema.apply(null, arguments);\n            },\n            getMetaAspectNames: function() {\n                _logDeprecated('getMetaAspectNames(path)', 'getValidAspectNames()', true);\n                return getMetaAspectNames.apply(null, arguments);\n            },\n            getOwnMetaAspectNames: function() {\n                _logDeprecated('getOwnMetaAspectNames(path)', 'getOwnValidAspectNames()', true);\n                return getOwnMetaAspectNames.apply(null, arguments);\n            },\n            getMetaAspect: function() {\n                _logDeprecated('getMetaAspect(path, name)', 'getAspectMeta(name)', true,\n                    ' Returned value is of different structure! {items: meta} vs meta');\n                return getMetaAspect.apply(null, arguments);\n            },\n            hasOwnMetaRules: function() {\n                // TODO: Should we add a method on the core??\n                return hasOwnMetaRules.apply(null, arguments);\n            },\n            getChildrenMeta: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getChildrenMeta.apply(null, arguments);\n            },\n            getChildrenMetaAttribute: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getChildrenMetaAttribute.apply(null, arguments);\n            },\n            getValidChildrenItems: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getValidChildrenItems.apply(null, arguments);\n            },\n            getOwnValidChildrenTypes: function() {\n                // TODO: Should we add a method on the core similar to getValidChildrenTypes?\n                return getOwnValidChildrenTypes.apply(null, arguments);\n            },\n            getAspectTerritoryPattern: function() {\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\n                return getAspectTerritoryPattern.apply(null, arguments);\n            }\n        };\n    }\n\n    return gmeNodeSetter;\n});\n",
    "//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true*/\n\n/**\n * STRING CONSTANT DEFINITIONS USED IN BOTH CLIENT AND SERVER JAVASCRIPT\n * @author rkereskenyi / https://github.com/rkereskenyi\n */\n\ndefine('common/Constants',['common/core/constants'], function (CoreConstants) {\n    'use strict';\n    //return string constants\n    return {\n        /*\n         * TERRITORY EVENTS\n         */\n        TERRITORY_EVENT_LOAD: 'load',\n        TERRITORY_EVENT_UPDATE: 'update',\n        TERRITORY_EVENT_UNLOAD: 'unload',\n        TERRITORY_EVENT_COMPLETE: 'complete',\n        TERRITORY_EVENT_INCOMPLETE: 'incomplete',\n\n        /*\n         * GME_ID: wherever a GME object ID needs to be present\n         */\n        GME_ID: 'GME_ID',\n\n        /*\n         * DEDICATED GME OBJECT IDs\n         */\n        PROJECT_ROOT_ID: '',\n        PROJECT_FCO_ID: 'FCO_ID',\n        PROJECT_FCO_GUID: 'cd891e7b-e2ea-e929-f6cd-9faf4f1fc045',\n        PROJECT_FCO_RELID: '1',\n\n        /*\n         * DEDICATED GME ROOT properties\n         */\n        PROJECT_ROOT_NAME: 'ROOT',\n\n\n        /*\n         * Dedicated POINTER names\n         */\n        POINTER_SOURCE: 'src',      //dedicated connection source pointer name\n        POINTER_TARGET: 'dst',      //dedicated connection target pointer name\n        POINTER_BASE: 'base',       //dedicated inheritance pointer name\n        POINTER_CONSTRAINED_BY: 'constrainedby', //dedicated replaceable/constrainedBy pointer name\n\n        /*\n         * Dedicated RELATION names\n         */\n        RELATION_CONTAINMENT: 'containment',\n\n        CORE: CoreConstants\n\n    };\n});\n",
    "/*globals define, _*/\n/*jshint browser: true*/\n/**\n * STRING CONSTANT DEFINITIONS USED IN CLIENT JAVASCRIPT (INHERITS ALL THE CONSTANST FROM COMMON/CONSTANST.JS)\n *\n * @author rkereskenyi / https://github.com/rkereskenyi\n */\n\ndefine('js/Constants',[\n    'underscore',\n    'common/Constants',\n    'js/client/constants'\n], function (underscore, COMMON_CONSTANTS, CLIENT_CONSTANTS) {\n\n    'use strict';\n\n    //define client-only string constants\n    var clientConstants = {};\n\n    //copy over all the constanst form common/constants.js\n    _.extend(clientConstants, COMMON_CONSTANTS, {\n        /*\n         * DOM element ID to use for all-over-the-screen-draggable-parent\n         */\n        ALL_OVER_THE_SCREEN_DRAGGABLE_PARENT_ID: 'body',\n\n        /*\n         * META-INFORMATION ABOUT THE USER ACTION\n         */\n        META_INFO: 'metaInfo',\n\n        /*\n         * DRAG SOURCE IDENTIFIER (Widget, panel, etc)\n         */\n        DRAG_SOURCE: 'dragSource',\n\n        /*\n         * LINE VISUAL DESCRIPTOR CONSTANTS\n         */\n        LINE_STYLE: {\n            WIDTH: 'width',\n            COLOR: 'color',\n            PATTERN: 'pattern',\n            PATTERNS: {\n                SOLID: '',\n                DASH: '-',\n                LONGDASH: '- ',\n                DOT: '.',\n                DASH_DOT: '-.',\n                DASH_DOT_DOT: '-..'\n            },\n            TYPE: 'type',\n            TYPES: {\n                NONE: '',\n                BEZIER: 'bezier'\n            },\n            START_ARROW: 'start-arrow',\n            END_ARROW: 'end-arrow',\n            CUSTOM_POINTS: 'custom-points',\n            LABEL_PLACEMENT: 'label-placement',\n            LABEL_PLACEMENTS: {\n                SRC: 'src',\n                MIDDLE: 'mid',\n                DST: 'dst'\n            },\n            LINE_ARROWS: {\n                NONE: 'none',\n                DIAMOND: 'diamond',\n                BLOCK: 'block',\n                CLASSIC: 'classic',\n                OPEN: 'open',\n                OVAL: 'oval',\n                DIAMOND2: 'diamond2',\n                INHERITANCE: 'inheritance'\n            }\n        },\n\n        DISPLAY_FORMAT_ATTRIBUTE_MARKER: '$',\n\n        //the path to the SVGs that can be used by the decorators supporting SVG_Icon\n        ASSETS_DECORATOR_SVG_FOLDER: 'assets/DecoratorSVG/',\n\n        /*WebGME state constants*/\n        STATE_ACTIVE_OBJECT: 'activeObject',\n        STATE_ACTIVE_SELECTION: 'activeSelection',\n        STATE_ACTIVE_ASPECT: 'activeAspect',\n        STATE_ACTIVE_VISUALIZER: 'activeVisualizer',\n        STATE_ACTIVE_PROJECT_NAME: 'activeProjectName',\n        STATE_ACTIVE_COMMIT: 'activeCommit',\n        STATE_ACTIVE_BRANCH_NAME: 'activeBranchName',\n        STATE_ACTIVE_CROSSCUT: 'activeCrosscut',\n        STATE_ACTIVE_TAB: 'activeTab',\n        STATE_SUPPRESS_VISUALIZER_FROM_NODE: 'suppressVisualizerFromNode',\n\n        STATE_LAYOUT: 'layout',\n\n        /* ASPECTS */\n        ASPECT_ALL: 'All',\n\n        /* Property groups */\n        PROPERTY_GROUP_META: 'META',\n        PROPERTY_GROUP_PREFERENCES: 'Preferences',\n        PROPERTY_GROUP_ATTRIBUTES: 'Attributes',\n        PROPERTY_GROUP_POINTERS: 'Pointers',\n\n        /* Visualizer */\n        DEFAULT_VISUALIZER: 'ModelEditor',\n\n        // This is assigned by the VisualizerPanel onto the visualizer instance on the fly and is set to\n        // the id defined in Visualizers.json.\n        VISUALIZER_PANEL_IDENTIFIER: 'VISUALIZER_PANEL_IDENTIFIER'\n    });\n\n    clientConstants.CLIENT = CLIENT_CONSTANTS;\n\n    return clientConstants;\n});\n\n",
    "/*globals define*/\n/*jshint browser: true*/\n/**\n * @author kecso / https://github.com/kecso\n */\ndefine('js/client/libraries',['js/Constants'], function (CONSTANTS) {\n    'use strict';\n    function gmeLibraries(logger, state, storage, saveRoot) {\n\n        function getLibraryNames() {\n            if (state.core && state.nodes[CONSTANTS.PROJECT_ROOT_ID] &&\n                typeof state.nodes[CONSTANTS.PROJECT_ROOT_ID].node === 'object') {\n                return state.core.getLibraryNames(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node);\n            }\n\n            return [];\n        }\n\n        function getLibraryInfo(libraryName) {\n            if (state.core && state.nodes[CONSTANTS.PROJECT_ROOT_ID] &&\n                typeof state.nodes[CONSTANTS.PROJECT_ROOT_ID].node === 'object') {\n                return state.core.getLibraryInfo(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node, libraryName) || null;\n            }\n\n            return null;\n        }\n\n        function addLibrary(name, blobHashOrLibraryInfo, callback) {\n            var parameters = {\n                command: 'addLibrary',\n                projectId: state.project.projectId,\n                libraryName: name,\n                branchName: state.branchName\n            };\n\n            if (typeof blobHashOrLibraryInfo === 'string') {\n                parameters.blobHash = blobHashOrLibraryInfo;\n            } else {\n                parameters.libraryInfo = blobHashOrLibraryInfo;\n            }\n\n            storage.simpleRequest(parameters, function (err, result) {\n                if (err) {\n                    logger.error(err);\n                }\n                callback(err, result);\n            });\n        }\n\n        function updateLibrary(name, blobHashOrLibraryInfo, callback) {\n            var parameters = {\n                command: 'updateLibrary',\n                projectId: state.project.projectId,\n                libraryName: name,\n                branchName: state.branchName\n            };\n\n            if (typeof blobHashOrLibraryInfo === 'string') {\n                parameters.blobHash = blobHashOrLibraryInfo;\n            } else if (blobHashOrLibraryInfo) {\n                parameters.libraryInfo = blobHashOrLibraryInfo;\n            }\n\n            storage.simpleRequest(parameters, function (err, result) {\n                if (err) {\n                    logger.error(err);\n                }\n                callback(err, result);\n            });\n        }\n\n        function removeLibrary(libraryName) {\n            state.core.removeLibrary(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node, libraryName);\n            saveRoot('removeLibrary(' + libraryName + ')');\n        }\n\n        function renameLibrary(oldName, newName) {\n            state.core.renameLibrary(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node, oldName, newName);\n            saveRoot('renameLibrary(' + oldName + ',' + newName + ')');\n        }\n\n        function openLibraryOriginInNewWindow(libraryRootId, followBranch) {\n            var address,\n                info;\n            if (!state.nodes[libraryRootId]) {\n                logger.warn('only cached libraries can be followed!');\n                return;\n            }\n            info = getLibraryInfo(state.core.getFullyQualifiedName(state.nodes[libraryRootId].node));\n\n            if (!info) {\n                logger.warn('the library has no valid info');\n                return;\n            }\n\n            if (!info.projectId) {\n                logger.warn('the library has only partial info');\n                return;\n            }\n\n            address = window.location.origin + '/?project=' + encodeURIComponent(info.projectId);\n\n            if (info.branchName && followBranch) {\n                address += '&branch=' + encodeURIComponent(info.branchName);\n            } else if (info.commitHash) {\n                address += '&commit=' + encodeURIComponent(info.commitHash);\n            }\n\n            window.open(address, '_blank');\n            window.focus();\n\n        }\n\n        return {\n            getLibraryNames: getLibraryNames,\n            addLibrary: addLibrary,\n            updateLibrary: updateLibrary,\n            removeLibrary: removeLibrary,\n            renameLibrary: renameLibrary,\n            getLibraryInfo: getLibraryInfo,\n            openLibraryOriginInNewWindow: openLibraryOriginInNewWindow\n        };\n    }\n\n    return gmeLibraries;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * Client module for accessing the blob.\n *\n * @author lattmann / https://github.com/lattmann\n */\n\ndefine('blob/BlobConfig',[], function () {\n    'use strict';\n    var BlobConfig = {\n        hashMethod: 'sha1', // TODO: in the future we may switch to sha512\n        hashRegex: new RegExp('^[0-9a-f]{40}$')\n    };\n\n    return BlobConfig;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * Client module for accessing the blob.\n *\n * @author lattmann / https://github.com/lattmann\n */\n\ndefine('blob/BlobMetadata',['blob/BlobConfig'], function (BlobConfig) {\n    'use strict';\n\n    /**\n     * Initializes a new instance of BlobMetadata\n     * @param {object} metadata - A serialized metadata object.\n     * @param {string} metadata.name\n     * @param {string|Object} metadata.content\n     * @param {number} [metadata.size=0]\n     * @param {BlobMetadata.CONTENT_TYPES} [metadata.contentType=BlobMetadata.CONTENT_TYPES.OBJECT]\n     * @param {string} [metadata.mime='']\n     * @param {boolean} [metadata.isPublic=false]\n     * @param {string[]} [metadata.tags=[]]\n     * @constructor\n     * @alias BlobMetadata\n     */\n    var BlobMetadata = function (metadata) {\n        var key;\n        if (metadata) {\n            this.name = metadata.name;\n            this.size = metadata.size || 0;\n            this.mime = metadata.mime || '';\n            this.isPublic = metadata.isPublic || false;\n            this.tags = metadata.tags || [];\n            this.content = metadata.content;\n            this.contentType = metadata.contentType || BlobMetadata.CONTENT_TYPES.OBJECT;\n            if (this.contentType === BlobMetadata.CONTENT_TYPES.COMPLEX) {\n                for (key in this.content) {\n                    if (this.content.hasOwnProperty(key)) {\n                        if (BlobConfig.hashRegex.test(this.content[key].content) === false) {\n                            throw new Error('BlobMetadata is malformed: hash \\'' + this.content[key].content + '\\'is invalid');\n                        }\n                    }\n                }\n            }\n        } else {\n            throw new Error('metadata parameter is not defined');\n        }\n    };\n\n    /**\n     * Type of the metadata\n     * @type {{OBJECT: string, COMPLEX: string, SOFT_LINK: string}}\n     */\n    BlobMetadata.CONTENT_TYPES = {\n        OBJECT: 'object',\n        COMPLEX: 'complex',\n        SOFT_LINK: 'softLink'\n    };\n\n    /**\n     * Serializes the metadata to a JSON object.\n     * @returns {{\n     *  name: string,\n     *  size: number,\n     *  mime: string,\n     *  tags: Array.<string>,\n     *  content: (string|Object),\n     *  contentType: string}}\n     */\n    BlobMetadata.prototype.serialize = function () {\n        var metadata = {\n            name: this.name,\n            size: this.size,\n            mime: this.mime,\n            isPublic: this.isPublic,\n            tags: this.tags,\n            content: this.content,\n            contentType: this.contentType\n        };\n\n        metadata.tags.sort();\n\n        if (this.contentType === BlobMetadata.CONTENT_TYPES.COMPLEX) {\n            // override on  purpose to normalize content\n            metadata.content = {};\n            var fnames = Object.keys(this.content);\n            fnames.sort();\n\n            for (var j = 0; j < fnames.length; j += 1) {\n                metadata.content[fnames[j]] = this.content[fnames[j]];\n            }\n        }\n\n        return metadata;\n    };\n\n    return BlobMetadata;\n});\n\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * @author lattmann / https://github.com/lattmann\n */\n\ndefine('blob/Artifact',[\n    'blob/BlobMetadata',\n    'blob/BlobConfig',\n    'common/core/tasync',\n    'q'\n], function (BlobMetadata, BlobConfig, tasync, Q) {\n    'use strict';\n\n    /**\n     * Creates a new instance of artifact, i.e. complex object, in memory. This object can be saved in the blob-storage\n     * on the server and later retrieved with its metadata hash.\n     * @param {string} name Artifact's name without extension\n     * @param {BlobClient} blobClient\n     * @param {BlobMetadata} descriptor\n     * @constructor\n     * @alias Artifact\n     */\n    var Artifact = function (name, blobClient, descriptor) {\n        this.name = name;\n        this.blobClient = blobClient;\n        this.blobClientPutFile = tasync.unwrap(tasync.throttle(tasync.wrap(blobClient.putFile), 5));\n        this.blobClientGetMetadata = tasync.unwrap(tasync.throttle(tasync.wrap(blobClient.getMetadata), 5));\n        // TODO: use BlobMetadata class here\n        this.descriptor = descriptor || {\n                name: name + '.zip',\n                size: 0,\n                mime: 'application/zip',\n                content: {},\n                contentType: 'complex'\n            }; // name and hash pairs\n    };\n\n    /**\n     * Adds content to the artifact as a file.\n     * @param {string} name - filename\n     * @param {Blob} content - File object or Blob.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addFile = function (name, content, callback) {\n        var self = this,\n            filename = name.substring(name.lastIndexOf('/') + 1),\n            deferred = Q.defer();\n\n        self.blobClientPutFile.call(self.blobClient, filename, content, function (err, metadataHash) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n\n            self.addObjectHash(name, metadataHash, function (err, metadataHash) {\n                if (err) {\n                    deferred.reject(err);\n                    return;\n                }\n\n                deferred.resolve(metadataHash);\n            });\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Adds files as soft-link.\n     * @param {string} name - filename.\n     * @param {Blob} content - File object or Blob.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addFileAsSoftLink = function (name, content, callback) {\n        var deferred = Q.defer(),\n            self = this,\n            filename = name.substring(name.lastIndexOf('/') + 1);\n\n        self.blobClientPutFile.call(self.blobClient, filename, content,\n            function (err, metadataHash) {\n                if (err) {\n                    deferred.reject(err);\n                    return;\n                }\n                var size;\n                if (content.size !== undefined) {\n                    size = content.size;\n                }\n                if (content.length !== undefined) {\n                    size = content.length;\n                }\n\n                self.addMetadataHash(name, metadataHash, size)\n                    .then(deferred.resolve)\n                    .catch(deferred.reject);\n            });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Adds a hash to the artifact using the given file path.\n     * @param {string} name - Path to the file in the artifact. Note: 'a/b/c.txt'\n     * @param {string} metadataHash - Metadata hash that has to be added.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>hash</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addObjectHash = function (name, metadataHash, callback) {\n        var self = this,\n            deferred = Q.defer();\n\n        if (BlobConfig.hashRegex.test(metadataHash) === false) {\n            deferred.reject('Blob hash is invalid');\n        } else {\n            self.blobClientGetMetadata.call(self.blobClient, metadataHash, function (err, metadata) {\n                if (err) {\n                    deferred.reject(err);\n                    return;\n                }\n\n                if (self.descriptor.content.hasOwnProperty(name)) {\n                    deferred.reject(new Error('Another content with the same name was already added. ' +\n                        JSON.stringify(self.descriptor.content[name])));\n\n                } else {\n                    self.descriptor.size += metadata.size;\n\n                    self.descriptor.content[name] = {\n                        content: metadata.content,\n                        contentType: BlobMetadata.CONTENT_TYPES.OBJECT\n                    };\n                    deferred.resolve(metadataHash);\n                }\n            });\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Adds a hash to the artifact using the given file path.\n     * @param {string} name - Path to the file in the artifact. Note: 'a/b/c.txt'\n     * @param {string} metadataHash - Metadata hash that has to be added.\n     * @param {number} [size] - Size of the referenced blob.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>hash</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addMetadataHash = function (name, metadataHash, size, callback) {\n        var self = this,\n            deferred = Q.defer(),\n            addMetadata = function (size) {\n                if (self.descriptor.content.hasOwnProperty(name)) {\n                    deferred.reject(new Error('Another content with the same name was already added. ' +\n                        JSON.stringify(self.descriptor.content[name])));\n\n                } else {\n                    self.descriptor.size += size;\n\n                    self.descriptor.content[name] = {\n                        content: metadataHash,\n                        contentType: BlobMetadata.CONTENT_TYPES.SOFT_LINK\n                    };\n                    deferred.resolve(metadataHash);\n                }\n            };\n\n        if (typeof size === 'function') {\n            callback = size;\n            size = undefined;\n        }\n\n        if (BlobConfig.hashRegex.test(metadataHash) === false) {\n            deferred.reject(new Error('Blob hash is invalid'));\n        } else if (size === undefined) {\n            self.blobClientGetMetadata.call(self.blobClient, metadataHash, function (err, metadata) {\n                if (err) {\n                    deferred.reject(err);\n                    return;\n                }\n                addMetadata(metadata.size);\n            });\n        } else {\n            addMetadata(size);\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Adds multiple files.\n     * @param {Object.<string, Blob>} files files to add\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>metadataHashes</b>.<br>\n     * On error the promise will be rejected with {@link Error|string} <b>error</b>.\n     */\n    Artifact.prototype.addFiles = function (files, callback) {\n        var self = this,\n            fileNames = Object.keys(files);\n\n        return Q.all(fileNames.map(function (fileName) {\n            return self.addFile(fileName, files[fileName]);\n        })).nodeify(callback);\n    };\n\n    /**\n     * Adds multiple files as soft-links.\n     * @param {Object.<string, Blob>} files files to add\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>metadataHashes</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addFilesAsSoftLinks = function (files, callback) {\n        var self = this,\n            fileNames = Object.keys(files);\n\n        return Q.all(fileNames.map(function (fileName) {\n            return self.addFileAsSoftLink(fileName, files[fileName]);\n        })).nodeify(callback);\n    };\n\n    /**\n     * Adds hashes to the artifact using the given file paths.\n     * @param {object.<string, string>} metadataHashes - Keys are file paths and values metadata hashes.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>hashes</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addObjectHashes = function (metadataHashes, callback) {\n        var self = this,\n            fileNames = Object.keys(metadataHashes);\n\n        return Q.all(fileNames.map(function (fileName) {\n            return self.addObjectHash(fileName, metadataHashes[fileName]);\n        })).nodeify(callback);\n    };\n\n    /**\n     * Adds hashes to the artifact using the given file paths.\n     * @param {object.<string, string>} metadataHashes - Keys are file paths and values metadata hashes.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>hashes</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.addMetadataHashes = function (metadataHashes, callback) {\n        var self = this,\n            fileNames = Object.keys(metadataHashes);\n\n        return Q.all(fileNames.map(function (fileName) {\n            return self.addMetadataHash(fileName, metadataHashes[fileName]);\n        })).nodeify(callback);\n    };\n\n    /**\n     * Saves this artifact and uploads the metadata to the server's storage.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    Artifact.prototype.save = function (callback) {\n        var deferred = Q.defer();\n\n        this.blobClient.putMetadata(this.descriptor, function (err, hash) {\n            if (err) {\n                deferred.reject(err);\n            } else {\n                deferred.resolve(hash);\n            }\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    return Artifact;\n});\n\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('lib/superagent/superagent',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.superagent = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n\n},{}],2:[function(require,module,exports){\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nexports.clearTimeout = function _clearTimeout(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nexports.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nexports.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nexports.timeout = function timeout(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} reject\n * @return {Request}\n */\n\nexports.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){\n      self.end(function(err, res){\n        if (err) innerReject(err); else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n}\n\n/**\n * Allow for extension\n */\n\nexports.use = function use(fn) {\n  fn(this);\n  return this;\n}\n\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nexports.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nexports.getHeader = exports.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nexports.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nexports.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nexports.field = function(name, val) {\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nexports.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nexports.withCredentials = function(){\n  // This is browser-only functionality. Node side is no-op.\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nexports.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nexports.toJSON = function(){\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nexports._isHost = function _isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nexports.send = function(data){\n  var obj = isObject(data);\n  var type = this._header['content-type'];\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || this._isHost(data)) return this;\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n},{\"./is-object\":1}],3:[function(require,module,exports){\n// The node and browser modules expose versions of this with the\n// appropriate constructor function bound as first argument\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(RequestConstructor, method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new RequestConstructor('GET', method).end(url);\n  }\n\n  // url first\n  if (2 == arguments.length) {\n    return new RequestConstructor('GET', method);\n  }\n\n  return new RequestConstructor(method, url);\n}\n\nmodule.exports = request;\n\n},{}],4:[function(require,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nif (typeof module !== 'undefined') {\n  module.exports = Emitter;\n}\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks['$' + event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n},{}],5:[function(require,module,exports){\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = require('emitter');\nvar requestBase = require('./request-base');\nvar isObject = require('./is-object');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = module.exports = require('./request').bind(null, Request);\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only verison of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */),\n        key = parts.shift(),\n        val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  this._setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this._parseBody(this.text ? this.text : this.xhr.response)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype._setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str){\n  var parse = request.parse[this.type];\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype._setStatusProperties = function(status){\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = this.statusCode = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;\n      // issue #876: return the http status code if the response parsing fails\n      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (res.status < 200 || res.status >= 300) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n        new_err.original = err;\n        new_err.response = res;\n        new_err.status = res.status;\n      }\n    } catch(e) {\n      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `requestBase`.\n */\n\nEmitter(Request.prototype);\nfor (var key in requestBase) {\n  Request.prototype[key] = requestBase[key];\n}\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set responseType to `val`. Presently valid responseTypes are 'blob' and\n * 'arraybuffer'.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (!options) {\n    options = {\n      type: 'basic'\n    }\n  }\n\n  switch (options.type) {\n    case 'basic':\n      var str = btoa(user + ':' + pass);\n      this.set('Authorization', 'Basic ' + str);\n    break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n    break;\n  }\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  this._getFormData().append(field, file, filename || file.name);\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype._timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\n\nRequest.prototype._appendQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (0 == status) {\n      if (self.timedout) return self._timeoutError();\n      if (self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(e){\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = 'download';\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch(e) {\n    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  this._appendQueryString();\n\n  // initiate request\n  if (this.username && this.password) {\n    xhr.open(this.method, this.url, true, this.username, this.password);\n  } else {\n    xhr.open(this.method, this.url, true);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn){\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n},{\"./is-object\":1,\"./request\":3,\"./request-base\":2,\"emitter\":4}]},{},[5])(5)\n});\n",
    "/*jshint node: true, browser: true, bitwise: false*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\n\ndefine('common/util/uint',[],function () {\n    'use strict';\n\n    //this helper function is necessary as in case of large json objects,\n    // the library standard function causes stack overflow\n    function uint8ArrayToString(uintArray) {\n        var resultString = '',\n            i;\n        for (i = 0; i < uintArray.byteLength; i++) {\n            resultString += String.fromCharCode(uintArray[i]);\n        }\n        return decodeURIComponent(escape(resultString));\n    }\n\n    return {\n        uint8ArrayToString: uint8ArrayToString\n    };\n});\n",
    "/*globals define, console*/\n/*jshint browser: true, node:true*/\n\n/**\n * Client module for accessing the blob.\n *\n * @author lattmann / https://github.com/lattmann\n * @author ksmyth / https://github.com/ksmyth\n */\n\ndefine('blob/BlobClient',[\n    'blob/Artifact',\n    'blob/BlobMetadata',\n    'superagent',\n    'q',\n    'common/util/uint'\n], function (Artifact, BlobMetadata, superagent, Q, UINT) {\n    'use strict';\n\n    /**\n     * Client to interact with the blob-storage. <br>\n     *\n     * @param {object} parameters\n     * @param {object} parameters.logger\n     * @constructor\n     * @alias BlobClient\n     */\n    var BlobClient = function (parameters) {\n        var self = this;\n        this.artifacts = [];\n        if (parameters && parameters.logger) {\n            this.logger = parameters.logger;\n        } else {\n            var doLog = function () {\n                console.log.apply(console, arguments);\n            };\n            this.logger = {\n                debug: doLog,\n                log: doLog,\n                info: doLog,\n                warn: doLog,\n                error: doLog\n            };\n            console.warn('Since v1.3.0 BlobClient requires a logger, falling back on console.log.');\n        }\n\n        if (parameters && parameters.uploadProgressHandler) {\n            this.uploadProgressHandler = parameters.uploadProgressHandler;\n        } else {\n            this.uploadProgressHandler = function (fName, e) {\n                self.logger.debug('File upload of', fName, e.percent, '%');\n            };\n        }\n\n        this.logger.debug('ctor', {metadata: parameters});\n\n        if (parameters) {\n            this.server = parameters.server || this.server;\n            this.serverPort = parameters.serverPort || this.serverPort;\n            this.httpsecure = (parameters.httpsecure !== undefined) ? parameters.httpsecure : this.httpsecure;\n            this.webgmeToken = parameters.webgmeToken;\n            this.keepaliveAgentOptions = parameters.keepaliveAgentOptions || {/* use defaults */};\n        } else {\n            this.keepaliveAgentOptions = {/* use defaults */};\n        }\n        this.origin = '';\n        if (this.httpsecure !== undefined && this.server && this.serverPort) {\n            this.origin = (this.httpsecure ? 'https://' : 'http://') + this.server + ':' + this.serverPort;\n        }\n        this.relativeUrl = '/rest/blob/';\n        this.blobUrl = this.origin + this.relativeUrl;\n        // TODO: TOKEN???\n        // TODO: any ways to ask for this or get it from the configuration?\n\n        this.isNodeOrNodeWebKit = typeof process !== 'undefined';\n        if (this.isNodeOrNodeWebKit) {\n            // node or node-webkit\n            this.logger.debug('Running under node or node-web-kit');\n            if (this.httpsecure) {\n                this.Agent = require('agentkeepalive').HttpsAgent;\n            } else {\n                this.Agent = require('agentkeepalive');\n            }\n            if (this.keepaliveAgentOptions.hasOwnProperty('ca') === false) {\n                this.keepaliveAgentOptions.ca = require('https').globalAgent.options.ca;\n            }\n            this.keepaliveAgent = new this.Agent(this.keepaliveAgentOptions);\n        }\n\n        this.logger.debug('origin', this.origin);\n        this.logger.debug('blobUrl', this.blobUrl);\n    };\n\n    BlobClient.prototype.getMetadataURL = function (hash) {\n        return this.origin + this.getRelativeMetadataURL(hash);\n    };\n\n    BlobClient.prototype.getRelativeMetadataURL = function (hash) {\n        var metadataBase = this.relativeUrl + 'metadata';\n        if (hash) {\n            return metadataBase + '/' + hash;\n        } else {\n            return metadataBase;\n        }\n    };\n\n    BlobClient.prototype._getURL = function (base, hash, subpath) {\n        var subpathURL = '';\n        if (subpath) {\n            subpathURL = subpath;\n        }\n        return this.relativeUrl + base + '/' + hash + '/' + encodeURIComponent(subpathURL);\n    };\n\n    BlobClient.prototype.getViewURL = function (hash, subpath) {\n        return this.origin + this.getRelativeViewURL(hash, subpath);\n    };\n\n    BlobClient.prototype.getRelativeViewURL = function (hash, subpath) {\n        return this._getURL('view', hash, subpath);\n    };\n\n    /**\n     * Returns the get-url for downloading a blob.\n     * @param {string} metadataHash\n     * @param {string} [subpath] - optional file-like path to sub-object if complex blob\n     * @return {string} get-url for blob\n     */\n    BlobClient.prototype.getDownloadURL = function (metadataHash, subpath) {\n        return this.origin + this.getRelativeDownloadURL(metadataHash, subpath);\n    };\n\n    BlobClient.prototype.getRelativeDownloadURL = function (hash, subpath) {\n        return this._getURL('download', hash, subpath);\n    };\n\n    BlobClient.prototype.getCreateURL = function (filename, isMetadata) {\n        return this.origin + this.getRelativeCreateURL(filename, isMetadata);\n    };\n\n    BlobClient.prototype.getRelativeCreateURL = function (filename, isMetadata) {\n        if (isMetadata) {\n            return this.relativeUrl + 'createMetadata/';\n        } else {\n            return this.relativeUrl + 'createFile/' + encodeURIComponent(filename);\n        }\n    };\n\n    /**\n     * Adds a file to the blob storage.\n     * @param {string} name - file name.\n     * @param {string|Buffer|ArrayBuffer} data - file content.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise} On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.putFile = function (name, data, callback) {\n        var deferred = Q.defer(),\n            self = this,\n            contentLength,\n            req;\n\n        this.logger.debug('putFile', name);\n\n        function toArrayBuffer(buffer) {\n            var ab = new ArrayBuffer(buffer.length);\n            var view = new Uint8Array(ab);\n            for (var i = 0; i < buffer.length; ++i) {\n                view[i] = buffer[i];\n            }\n            return ab;\n        }\n\n        // On node-webkit, we use XMLHttpRequest, but xhr.send thinks a Buffer is a string and encodes it in utf-8 -\n        // send an ArrayBuffer instead.\n        if (typeof window !== 'undefined' && typeof Buffer !== 'undefined' && data instanceof Buffer) {\n            data = toArrayBuffer(data); // FIXME will this have performance problems\n        }\n        // on node, empty Buffers will cause a crash in superagent\n        if (typeof window === 'undefined' && typeof Buffer !== 'undefined' && data instanceof Buffer) {\n            if (data.length === 0) {\n                data = '';\n            }\n        }\n        contentLength = data.hasOwnProperty('length') ? data.length : data.byteLength;\n        req = superagent.post(this.getCreateURL(name));\n\n        if (typeof window === 'undefined') {\n            req.agent(this.keepaliveAgent);\n        }\n\n        if (this.webgmeToken) {\n            req.set('Authorization', 'Bearer ' + this.webgmeToken);\n        }\n\n        if (typeof data !== 'string' && !(data instanceof String) && typeof window === 'undefined') {\n            req.set('Content-Length', contentLength);\n        }\n\n        req.set('Content-Type', 'application/octet-stream')\n            .send(data)\n            .on('progress', function (event) {\n                self.uploadProgressHandler(name, event);\n            })\n            .end(function (err, res) {\n                if (err || res.status > 399) {\n                    deferred.reject(err || new Error(res.status));\n                    return;\n                }\n                var response = res.body;\n                // Get the first one\n                var hash = Object.keys(response)[0];\n                self.logger.debug('putFile - result', hash);\n                deferred.resolve(hash);\n            });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    BlobClient.prototype.putMetadata = function (metadataDescriptor, callback) {\n        var metadata = new BlobMetadata(metadataDescriptor),\n            deferred = Q.defer(),\n            self = this,\n            blob,\n            contentLength,\n            req;\n        // FIXME: in production mode do not indent the json file.\n        this.logger.debug('putMetadata', {metadata: metadataDescriptor});\n        if (typeof Blob !== 'undefined') {\n            blob = new Blob([JSON.stringify(metadata.serialize(), null, 4)], {type: 'text/plain'});\n            contentLength = blob.size;\n        } else {\n            blob = new Buffer(JSON.stringify(metadata.serialize(), null, 4), 'utf8');\n            contentLength = blob.length;\n        }\n\n        req = superagent.post(this.getCreateURL(metadataDescriptor.name, true));\n        if (this.webgmeToken) {\n            req.set('Authorization', 'Bearer ' + this.webgmeToken);\n        }\n\n        if (typeof window === 'undefined') {\n            req.agent(this.keepaliveAgent);\n            req.set('Content-Length', contentLength);\n        }\n\n        req.set('Content-Type', 'application/octet-stream')\n            .send(blob)\n            .end(function (err, res) {\n                if (err || res.status > 399) {\n                    deferred.reject(err || new Error(res.status));\n                    return;\n                }\n                // Uploaded.\n                var response = JSON.parse(res.text);\n                // Get the first one\n                var hash = Object.keys(response)[0];\n                self.logger.debug('putMetadata - result', hash);\n                deferred.resolve(hash);\n            });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Adds multiple files to the blob storage.\n     * @param {object.<string, string|Buffer|ArrayBuffer>} o - Keys are file names and values the content.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise} On success the promise will be resolved with {object} <b>fileNamesToMetadataHashes</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.putFiles = function (o, callback) {\n        var self = this,\n            deferred = Q.defer(),\n            error,\n            filenames = Object.keys(o),\n            remaining = filenames.length,\n            hashes = {},\n            putFile;\n\n        if (remaining === 0) {\n            deferred.resolve(hashes);\n        }\n        putFile = function (filename, data) {\n            self.putFile(filename, data, function (err, hash) {\n                remaining -= 1;\n\n                hashes[filename] = hash;\n\n                if (err) {\n                    error = err;\n                    self.logger.error('putFile failed with error', {metadata: err});\n                }\n\n                if (remaining === 0) {\n                    if (error) {\n                        deferred.reject(error);\n                    } else {\n                        deferred.resolve(hashes);\n                    }\n                }\n            });\n        };\n\n        for (var j = 0; j < filenames.length; j += 1) {\n            putFile(filenames[j], o[filenames[j]]);\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    BlobClient.prototype.getSubObject = function (hash, subpath, callback) {\n        return this.getObject(hash, callback, subpath);\n    };\n\n    /**\n     * Retrieves object from blob storage as a Buffer under node and as an ArrayBuffer in the client.\n     * N.B. if the retrieved file is a json-file and running in a browser, the content will be decoded and\n     * the string parsed as a JSON.\n     * @param {string} metadataHash - hash of metadata for object.\n     * @param {function} [callback] - if provided no promise will be returned.\n     * @param {string} [subpath] - optional file-like path to sub-object if complex blob\n     *\n     * @return {external:Promise} On success the promise will be resolved with {Buffer|ArrayBuffer|object}\n     * <b>content</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.getObject = function (metadataHash, callback, subpath) {\n        var deferred = Q.defer(),\n            self = this;\n\n        this.logger.debug('getObject', metadataHash, subpath);\n\n        superagent.parse['application/zip'] = function (obj, parseCallback) {\n            if (parseCallback) {\n                // Running on node; this should be unreachable due to req.pipe() below\n            } else {\n                return obj;\n            }\n        };\n        //superagent.parse['application/json'] = superagent.parse['application/zip'];\n\n        var req = superagent.get(this.getViewURL(metadataHash, subpath));\n        if (this.webgmeToken) {\n            req.set('Authorization', 'Bearer ' + this.webgmeToken);\n        }\n\n        if (typeof window === 'undefined') {\n            req.agent(this.keepaliveAgent);\n        }\n\n        if (req.pipe) {\n            // running on node\n            var Writable = require('stream').Writable;\n            var BuffersWritable = function (options) {\n                Writable.call(this, options);\n\n                var self = this;\n                self.buffers = [];\n            };\n            require('util').inherits(BuffersWritable, Writable);\n\n            BuffersWritable.prototype._write = function (chunk, encoding, cb) {\n                this.buffers.push(chunk);\n                cb();\n            };\n\n            var buffers = new BuffersWritable();\n            buffers.on('finish', function () {\n                if (req.req.res.statusCode > 399) {\n                    deferred.reject(new Error(req.req.res.statusCode));\n                } else {\n                    deferred.resolve(Buffer.concat(buffers.buffers));\n                }\n            });\n            buffers.on('error', function (err) {\n                deferred.reject(err);\n            });\n            req.pipe(buffers);\n        } else {\n            req.removeAllListeners('end');\n            req.on('request', function () {\n                if (typeof this.xhr !== 'undefined') {\n                    this.xhr.responseType = 'arraybuffer';\n                }\n            });\n            // req.on('error', callback);\n            req.on('end', function () {\n                if (req.xhr.status > 399) {\n                    deferred.reject(new Error(req.xhr.status));\n                } else {\n                    var contentType = req.xhr.getResponseHeader('content-type');\n                    var response = req.xhr.response; // response is an arraybuffer\n                    if (contentType === 'application/json') {\n                        response = JSON.parse(UINT.uint8ArrayToString(new Uint8Array(response)));\n                    }\n                    self.logger.debug('getObject - result', {metadata: response});\n                    deferred.resolve(response);\n                }\n            });\n            // TODO: Why is there an end here too? Isn't req.on('end',..) enough?\n            req.end(function (err, result) {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    self.logger.debug('getObject - result', {metadata: result});\n                    deferred.resolve(result);\n                }\n            });\n        }\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Retrieves object from blob storage and parses the content as a string.\n     * @param {string} metadataHash - hash of metadata for object.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise} On success the promise will be resolved with {string} <b>contentString</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.getObjectAsString = function (metadataHash, callback) {\n        var self = this;\n        return self.getObject(metadataHash)\n            .then(function (content) {\n                if (typeof content === 'string') {\n                    // This does currently not happen..\n                    return content;\n                } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n                    return UINT.uint8ArrayToString(new Uint8Array(content));\n                } else if (content instanceof ArrayBuffer) {\n                    return UINT.uint8ArrayToString(new Uint8Array(content));\n                } else if (content !== null && typeof content === 'object') {\n                    return JSON.stringify(content);\n                } else {\n                    throw new Error('Unknown content encountered: ' + content);\n                }\n            })\n            .nodeify(callback);\n    };\n\n    /**\n     * Retrieves object from blob storage and parses the content as a JSON. (Will resolve with error if not valid JSON.)\n     * @param {string} metadataHash - hash of metadata for object.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise} On success the promise will be resolved with {object} <b>contentJSON</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.getObjectAsJSON = function (metadataHash, callback) {\n        var self = this;\n        return self.getObject(metadataHash)\n            .then(function (content) {\n                if (typeof content === 'string') {\n                    // This does currently not happen..\n                    return JSON.parse(content);\n                } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n                    return JSON.parse(UINT.uint8ArrayToString(new Uint8Array(content)));\n                } else if (content instanceof ArrayBuffer) {\n                    return JSON.parse(UINT.uint8ArrayToString(new Uint8Array(content)));\n                } else if (content !== null && typeof content === 'object') {\n                    return content;\n                } else {\n                    throw new Error('Unknown content encountered: ' + content);\n                }\n            })\n            .nodeify(callback);\n    };\n\n    /**\n     * Retrieves metadata from blob storage.\n     * @param {string} metadataHash - hash of metadata.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise} On success the promise will be resolved with {object} <b>metadata</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.getMetadata = function (metadataHash, callback) {\n        var req = superagent.get(this.getMetadataURL(metadataHash)),\n            deferred = Q.defer(),\n            self = this;\n\n        this.logger.debug('getMetadata', metadataHash);\n\n        if (this.webgmeToken) {\n            req.set('Authorization', 'Bearer ' + this.webgmeToken);\n        }\n\n        if (typeof window === 'undefined') {\n            req.agent(this.keepaliveAgent);\n        }\n\n        req.end(function (err, res) {\n            if (err || res.status > 399) {\n                deferred.reject(err || new Error(res.status));\n            } else {\n                self.logger.debug('getMetadata', res.text);\n                deferred.resolve(JSON.parse(res.text));\n            }\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Creates a new artifact and adds it to array of artifacts of the instance.\n     * @param {string} name - Name of artifact\n     * @return {Artifact}\n     */\n    BlobClient.prototype.createArtifact = function (name) {\n        var artifact = new Artifact(name, this);\n        this.artifacts.push(artifact);\n        return artifact;\n    };\n\n    /**\n     * Retrieves the {@link Artifact} from the blob storage.\n     * @param {hash} metadataHash - hash associated with the artifact.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with\n     * {@link Artifact} <b>artifact</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.getArtifact = function (metadataHash, callback) {\n        // TODO: get info check if complex flag is set to true.\n        // TODO: get info get name.\n        var self = this,\n            deferred = Q.defer();\n        this.logger.debug('getArtifact', metadataHash);\n        this.getMetadata(metadataHash, function (err, info) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n\n            self.logger.debug('getArtifact - return', {metadata: info});\n            if (info.contentType === BlobMetadata.CONTENT_TYPES.COMPLEX) {\n                var artifact = new Artifact(info.name, self, info);\n                self.artifacts.push(artifact);\n                deferred.resolve(artifact);\n            } else {\n                deferred.reject(new Error('not supported contentType ' + JSON.stringify(info, null, 4)));\n            }\n\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Saves all the artifacts associated with the current instance.\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with\n     * {string[]} <b>artifactHashes</b> (metadataHashes).<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    BlobClient.prototype.saveAllArtifacts = function (callback) {\n        var promises = [];\n\n        for (var i = 0; i < this.artifacts.length; i += 1) {\n            promises.push(this.artifacts[i].save());\n        }\n\n        return Q.all(promises).nodeify(callback);\n    };\n\n    /**\n     * Converts bytes to a human readable string.\n     * @param {number} - File size in bytes.\n     * @param {boolean} [si] - If true decimal conversion will be used (by default binary is used).\n     * @returns {string}\n     */\n    BlobClient.prototype.getHumanSize = function (bytes, si) {\n        var thresh = si ? 1000 : 1024,\n            units = si ?\n                ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] :\n                ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\n            u = -1;\n\n        if (bytes < thresh) {\n            return bytes + ' B';\n        }\n\n        do {\n            bytes = bytes / thresh;\n            u += 1;\n        } while (bytes >= thresh);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    };\n\n    return BlobClient;\n});\n\n",
    "/*globals define*/\n/*jshint node: true, browser: true, bitwise: false*/\n\n/**\n * @author kecso / https://github.com/kecso\n */\ndefine('js/Utils/SaveToDisk',['blob/BlobClient'], function (BlobClient) {\n    'use strict';\n\n    function saveUrlToDisk(fileURL, fileName) {\n        // for non-IE\n        if (!window.ActiveXObject) {\n            var save = document.createElement('a'),\n                event = document.createEvent('Event');\n\n            save.href = fileURL;\n            save.target = '_self';\n\n            if (fileName) {\n                save.download = fileName;\n            }\n\n            event.initEvent('click', true, true);\n            save.dispatchEvent(event);\n            (window.URL || window.webkitURL).revokeObjectURL(save.href);\n        }\n\n        // for IE\n        else if (!!window.ActiveXObject && document.execCommand) {\n            var _window = window.open(fileURL, '_self');\n            _window.document.close();\n            _window.document.execCommand('SaveAs', true, fileName || fileURL);\n            _window.close();\n        }\n    }\n\n    function saveJsonToBlobStorage(fileName, data, logger, callback) {\n        var bc = new BlobClient({logger: logger}),\n            artifact = bc.createArtifact('uploaded');\n\n        artifact.addFile(fileName, JSON.stringify(data, null, 4), function (err, fileHash) {\n            callback(err, bc.getDownloadURL(fileHash));\n        });\n    }\n\n    function saveJsonToDisk(fileName, data, logger, callback) {\n        saveJsonToBlobStorage(fileName, data, logger, function (err, downloadUrl) {\n            if (err) {\n                return callback(err);\n            }\n\n            saveUrlToDisk(downloadUrl, fileName);\n            callback(null, downloadUrl);\n        });\n    }\n\n    return {\n        saveToBlobStorage: saveJsonToBlobStorage,\n        saveUrlToDisk: saveUrlToDisk,\n        saveJsonToDisk: saveJsonToDisk\n    };\n});\n",
    "/*globals define*/\n/*jshint browser: true*/\n/**\n * Contains helper functions for logging/downloading the state of the client.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('js/client/stateloghelpers',[\n    'js/Utils/SaveToDisk'\n], function (saveToDisk) {\n    'use strict';\n\n    function _stateLogReplacer(key, value) {\n        var chainItem,\n            prevChain,\n            nextChain,\n            chain;\n        if (key === 'project') {\n            if (value) {\n                return value.name;\n            } else {\n                return null;\n            }\n\n        } else if (key === 'core') {\n            if (value) {\n                return 'instantiated';\n            } else {\n                return 'notInstantiated';\n            }\n        } else if (key === 'metaNodes') {\n            return Object.keys(value);\n        } else if (key === 'nodes') {\n            return Object.keys(value);\n        } else if (key === 'loadNodes') {\n            return Object.keys(value);\n        } else if (key === 'users') {\n            return Object.keys(value);\n        } else if (key === 'rootObject') {\n            return;\n        } else if (key === 'undoRedoChain') {\n            if (value) {\n                chain = {\n                    previous: null,\n                    next: null\n                };\n                if (value.previous) {\n                    prevChain = {};\n                    chain.previous = prevChain;\n                }\n                chainItem = value;\n                while (chainItem.previous) {\n                    prevChain.previous = {\n                        commitHash: chainItem.commitHash,\n                        previous: null\n                    };\n                    prevChain = prevChain.previous;\n                    chainItem = chainItem.previous;\n                }\n                if (value.next) {\n                    nextChain = {};\n                    chain.next = nextChain;\n                }\n                chainItem = value;\n                while (chainItem.next) {\n                    nextChain.next = {\n                        commitHash: chainItem.commitHash,\n                        next: null\n                    };\n                    nextChain = nextChain.next;\n                    chainItem = chainItem.next;\n                }\n                return chain;\n            }\n        }\n\n        return value;\n    }\n\n    function getStateLogString(client, state, doFullState, indent) {\n        indent = indent || 0;\n        if (doFullState === true) {\n            return JSON.stringify(state, _stateLogReplacer, indent);\n        } else {\n            return JSON.stringify({\n                connection: client.getNetworkStatus(),\n                projectId: client.getActiveProjectId(),\n                branchName: client.getActiveBranchName(),\n                branchStatus: client.getBranchStatus(),\n                commitHash: client.getActiveCommitHash(),\n                rootHash: client.getActiveRootHash(),\n                projectReadOnly: client.isProjectReadOnly(),\n                commitReadOnly: client.isCommitReadOnly()\n            }, null, indent);\n        }\n    }\n\n    function downloadStateDump(client, state) {\n        var blob,\n            fileUrl,\n            errData = {\n                timestamp: (new Date()).toISOString(),\n                webgme: {\n                    NpmVersion: 'n/a',\n                    version: 'n/a',\n                    GitHubVersion: 'n/a'\n                },\n                gmeConfig: client.gmeConfig,\n                uiState: null,\n                branchErrors: [],\n                browserInfo: {\n                    appCodeName: window.navigator.appCodeName,\n                    appName: window.navigator.appName,\n                    appVersion: window.navigator.appVersion,\n                    onLine: window.navigator.onLine,\n                    cookieEnabled: window.navigator.cookieEnabled,\n                    platform: window.navigator.platform,\n                    product: window.navigator.product,\n                    userAgent: window.navigator.userAgent\n                },\n                clientState: JSON.parse(getStateLogString(client, state, true))\n            };\n\n        if (typeof WebGMEGlobal !== 'undefined') {\n            /* jshint -W117 */\n            errData.webgme.NpmVersion = WebGMEGlobal.NpmVersion;\n            errData.webgme.GitHubVersion = WebGMEGlobal.GitHubVersion;\n            errData.webgme.version = WebGMEGlobal.version;\n            /* jshint +W117 */\n        }\n\n        if (typeof client.uiStateGetter === 'function') {\n            errData.uiState = client.uiStateGetter();\n        } else {\n            errData.uiState = 'Client did not have an attached uiStateGetter.';\n        }\n\n        if (state.project && state.branchName && state.project.branches[state.branchName]) {\n            state.project.branches[state.branchName].errorList.forEach(function (err) {\n                errData.branchErrors.push({\n                    message: err.message,\n                    stack: err.stack});\n            });\n        }\n\n        blob = new Blob([JSON.stringify(errData, null, 2)], {type: 'application/json'});\n        fileUrl = window.URL.createObjectURL(blob);\n\n        saveToDisk.saveUrlToDisk(fileUrl, 'webgme-client-dump.json');\n    }\n\n    function downloadCommitQueue(client, commitQueue) {\n        var blob,\n            fileUrl,\n            backupData = {\n                webgmeVersion: client.getConnectedStorageVersion(),\n                projectId: client.getActiveProjectId(),\n                branchName: client.getActiveBranchName(),\n                branchStatus: client.getBranchStatus(),\n                commitQueue: commitQueue\n            };\n\n        blob = new Blob([JSON.stringify(backupData, null, 2)], {type: 'application/json'});\n        fileUrl = window.URL.createObjectURL(blob);\n\n        saveToDisk.saveUrlToDisk(fileUrl, 'commit-queue-dump.json');\n    }\n\n    return {\n        downloadStateDump: downloadStateDump,\n        getStateLogString: getStateLogString,\n        downloadCommitQueue: downloadCommitQueue\n    };\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * A module representing a PluginNodeDescription.\n *\n * @author lattmann / https://github.com/lattmann\n */\n\n\ndefine('plugin/PluginNodeDescription',[], function () {\n    'use strict';\n    /**\n     * Initializes a new instance of plugin node description object.\n     *\n     * Note: this object is JSON serializable see serialize method.\n     *\n     * @param config - deserializes an existing configuration to this object.\n     * @constructor\n     * @alias PluginNodeDescription\n     */\n    var PluginNodeDescription = function (config) {\n        var keys,\n            i;\n\n        this.name = '';\n        this.id = '';\n\n        if (config) {\n            keys = Object.keys(config);\n            for (i = 0; i < keys.length; i += 1) {\n                this[keys[i]] = config[keys[i]];\n            }\n        }\n    };\n\n    /**\n     * Serializes this object to a JSON representation.\n     *\n     * @returns {{}}\n     */\n    PluginNodeDescription.prototype.serialize = function () {\n        var keys = Object.keys(this),\n            result = {},\n            i;\n\n        for (i = 0; i < keys.length; i += 1) {\n            result[keys[i]] = this[keys[i]];\n        }\n\n        return result;\n    };\n\n    return PluginNodeDescription;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * A module representing a PluginMessage.\n *\n * @author lattmann / https://github.com/lattmann\n */\n\n\ndefine('plugin/PluginMessage',['plugin/PluginNodeDescription'], function (PluginNodeDescription) {\n    'use strict';\n\n    /**\n     * Initializes a new instance of plugin message.\n     *\n     * Note: this object is JSON serializable see serialize method.\n     *\n     * @param {object} config - deserializes an existing configuration to this object.\n     * @constructor\n     * @alias PluginMessage\n     */\n    var PluginMessage = function (config) {\n        if (config) {\n            this.commitHash = config.commitHash;\n            if (config.activeNode instanceof PluginNodeDescription) {\n                this.activeNode = config.activeNode;\n            } else {\n                this.activeNode = new PluginNodeDescription(config.activeNode);\n            }\n\n            this.message = config.message;\n            if (config.severity) {\n                this.severity = config.severity;\n            } else {\n                this.severity = 'info';\n            }\n        } else {\n            this.commitHash = '';\n            this.activeNode = new PluginNodeDescription();\n            this.message = '';\n            this.severity = 'info';\n        }\n    };\n\n    /**\n     * Serializes this object to a JSON representation.\n     *\n     * @returns {object}\n     */\n    PluginMessage.prototype.serialize = function () {\n        var result = {\n            commitHash: this.commitHash,\n            activeNode: this.activeNode.serialize(),\n            message: this.message,\n            severity: this.severity\n        };\n\n        return result;\n    };\n\n    return PluginMessage;\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * A module representing a PluginResult.\n *\n * @author lattmann / https://github.com/lattmann\n */\n\ndefine('plugin/PluginResult',['plugin/PluginMessage'], function (PluginMessage) {\n    'use strict';\n    /**\n     * Initializes a new instance of a plugin result object.\n     *\n     * Note: this object is JSON serializable see serialize method.\n     *\n     * @param config - deserializes an existing configuration to this object.\n     * @constructor\n     * @alias PluginResult\n     */\n    var PluginResult = function (config) {\n        var pluginMessage,\n            i;\n        if (config) {\n            this.success = config.success;\n            this.pluginName = config.pluginName;\n            this.startTime = config.startTime;\n            this.finishTime = config.finishTime;\n            this.messages = [];\n            this.artifacts = config.artifacts;\n            this.error = config.error;\n            this.commits = config.commits;\n            this.projectId = config.projectId;\n\n            for (i = 0; i < config.messages.length; i += 1) {\n                if (config.messages[i] instanceof PluginMessage) {\n                    pluginMessage = config.messages[i];\n                } else {\n                    pluginMessage = new PluginMessage(config.messages[i]);\n                }\n                this.messages.push(pluginMessage);\n            }\n        } else {\n            this.success = false;\n            this.messages = []; // array of PluginMessages\n            this.artifacts = []; // array of hashes\n            this.pluginName = 'PluginName N/A';\n            this.startTime = null;\n            this.finishTime = null;\n            this.error = null;\n            this.projectId = null;\n            this.commits = [];\n        }\n    };\n\n    /**\n     * Gets the success flag of this result object\n     *\n     * @returns {boolean}\n     */\n    PluginResult.prototype.getSuccess = function () {\n        return this.success;\n    };\n\n    /**\n     * Sets the success flag of this result.\n     *\n     * @param {boolean} value\n     */\n    PluginResult.prototype.setSuccess = function (value) {\n        this.success = value;\n    };\n\n    /**\n     * Returns with the plugin messages.\n     *\n     * @returns {PluginMessage[]}\n     */\n    PluginResult.prototype.getMessages = function () {\n        return this.messages;\n    };\n\n    /**\n     * Adds a new plugin message to the messages list.\n     *\n     * @param {PluginMessage} pluginMessage\n     */\n    PluginResult.prototype.addMessage = function (pluginMessage) {\n        this.messages.push(pluginMessage);\n    };\n\n    PluginResult.prototype.getArtifacts = function () {\n        return this.artifacts;\n    };\n\n    /**\n     * Adds a saved artifact to the result - linked via its hash.\n     *\n     * @param {string} hash - Hash of saved artifact.\n     */\n    PluginResult.prototype.addArtifact = function (hash) {\n        this.artifacts.push(hash);\n    };\n\n    /**\n     *\n     * @param {object} commitData\n     * @param {string} commitData.commitHash - hash of the commit.\n     * @param {string} commitData.status - storage.constants./SYNCED/FORKED/MERGED\n     * @param {string} commitData.branchName - name of branch that got updated with the commitHash.\n     */\n    PluginResult.prototype.addCommit = function (commitData) {\n        this.commits.push(commitData);\n    };\n\n    /**\n     * Gets the name of the plugin to which the result object belongs to.\n     *\n     * @returns {string}\n     */\n    PluginResult.prototype.getPluginName = function () {\n        return this.pluginName;\n    };\n\n    //------------------------------------------------------------------------------------------------------------------\n    //--------------- Methods used by the plugin manager\n\n    /**\n     * Sets the name of the plugin to which the result object belongs to.\n     *\n     * @param {string} pluginName - name of the plugin\n     */\n    PluginResult.prototype.setPluginName = function (pluginName) {\n        this.pluginName = pluginName;\n    };\n\n    /**\n     * Sets the name of the projectId the result was generated from.\n     *\n     * @param {string} projectId - id of the project\n     */\n    PluginResult.prototype.setProjectId = function (projectId) {\n        this.projectId = projectId;\n    };\n\n    /**\n     * Gets the ISO 8601 representation of the time when the plugin started its execution.\n     *\n     * @returns {string}\n     */\n    PluginResult.prototype.getStartTime = function () {\n        return this.startTime;\n    };\n\n    /**\n     * Sets the ISO 8601 representation of the time when the plugin started its execution.\n     *\n     * @param {string} time\n     */\n    PluginResult.prototype.setStartTime = function (time) {\n        this.startTime = time;\n    };\n\n    /**\n     * Gets the ISO 8601 representation of the time when the plugin finished its execution.\n     *\n     * @returns {string}\n     */\n    PluginResult.prototype.getFinishTime = function () {\n        return this.finishTime;\n    };\n\n    /**\n     * Sets the ISO 8601 representation of the time when the plugin finished its execution.\n     *\n     * @param {string} time\n     */\n    PluginResult.prototype.setFinishTime = function (time) {\n        this.finishTime = time;\n    };\n\n    /**\n     * Gets error if any error occured during execution.\n     * FIXME: should this be an Error object?\n     * @returns {string}\n     */\n    PluginResult.prototype.getError = function () {\n        return this.error;\n    };\n\n    /**\n     * Sets the error string if any error occured during execution.\n     * FIXME: should this be an Error object?\n     * @param {string} time\n     */\n    PluginResult.prototype.setError = function (error) {\n        if (error instanceof Error) {\n            this.error = error.message;\n        } else {\n            this.error = error;\n        }\n    };\n\n    /**\n     * Serializes this object to a JSON representation.\n     *\n     * @returns {{success: boolean, messages: plugin.PluginMessage[], pluginName: string, finishTime: stirng}}\n     */\n    PluginResult.prototype.serialize = function () {\n        var result = {\n            success: this.success,\n            projectId: this.projectId,\n            messages: [],\n            commits: this.commits,\n            artifacts: this.artifacts,\n            pluginName: this.pluginName,\n            startTime: this.startTime,\n            finishTime: this.finishTime,\n            error: this.error\n        },\n            i;\n\n        for (i = 0; i < this.messages.length; i += 1) {\n            result.messages.push(this.messages[i].serialize());\n        }\n\n        return result;\n    };\n\n    return PluginResult;\n});\n",
    "/*globals define*/\n/*jshint node:true, browser: true*/\n/**\n * Helper functions used by plugins and plugin-managers.\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('plugin/util',['q'], function (Q) {\n    'use strict';\n\n    /**\n     *\n     * @param {object} project\n     * @param {object} core\n     * @param {string} commitHash\n     * @param {GmeLogger} logger\n     * @param {object} options\n     * @param {string} [options.activeNode=''] - path to active node\n     * @param {string[]} [options.activeSelection=[]] - paths to selected nodes.\n     * @param {string} [options.namespace=''] - used namespace during execution ('' represents all namespaces).\n     * @param callback\n     * @returns {*}\n     */\n    function loadNodesAtCommitHash(project, core, commitHash, logger, options, callback) {\n        var result = {\n            commitHash: commitHash,\n            rootHash: null,\n            rootNode: null,\n            activeNode: null,\n            activeSelection: null,\n            META: {}\n        };\n\n        return Q.ninvoke(project, 'loadObject', commitHash)\n            .then(function (commitObject) {\n                result.rootHash = commitObject.root;\n                logger.debug('commitObject loaded');\n\n                // Load root node.\n                return core.loadRoot(result.rootHash);\n            })\n            .then(function (rootNode) {\n                result.rootNode = rootNode;\n                logger.debug('rootNode loaded');\n\n                // Load active node.\n                return core.loadByPath(result.rootNode, options.activeNode || '');\n            })\n            .then(function (activeNode) {\n                result.activeNode = activeNode;\n                logger.debug('activeNode loaded');\n\n                // Load active selection.\n                options.activeSelection = options.activeSelection || [];\n\n                return Q.all(options.activeSelection.map(function (nodePath) {\n                    return core.loadByPath(result.rootNode, nodePath);\n                }));\n            })\n            .then(function (activeSelection) {\n                var paths2MetaNodes = core.getAllMetaNodes(result.rootNode),\n                    libraryNames = core.getLibraryNames(result.rootNode),\n                    metaNodeName,\n                    nodeNamespace,\n                    fullName,\n                    path;\n\n                result.activeSelection = activeSelection;\n                logger.debug('activeSelection loaded');\n\n                // Gather the META nodes and \"sort\" based on given namespace.\n                function startsWith(str, pattern) {\n                    return str.indexOf(pattern) === 0;\n                }\n\n                if (options.namespace) {\n                    if (libraryNames.indexOf(options.namespace) === -1) {\n                        throw new Error('Given namespace does not exist among the available: \"' +\n                            libraryNames + '\".');\n                    }\n\n                    for (path in paths2MetaNodes) {\n                        nodeNamespace = core.getNamespace(paths2MetaNodes[path]);\n                        metaNodeName = core.getAttribute(paths2MetaNodes[path], 'name');\n\n                        if (startsWith(nodeNamespace, options.namespace)) {\n                            // Trim the based on the chosen namespace (+1 is to remove any dot).\n                            nodeNamespace = nodeNamespace.substring(options.namespace.length + 1);\n                            if (nodeNamespace) {\n                                result.META[nodeNamespace + '.' + metaNodeName] = paths2MetaNodes[path];\n                            } else {\n                                result.META[metaNodeName] = paths2MetaNodes[path];\n                            }\n                        } else {\n                            // Meta node is not within the given namespace and will not be added to META.\n                        }\n                    }\n                } else {\n                    for (path in paths2MetaNodes) {\n                        fullName = core.getFullyQualifiedName(paths2MetaNodes[path]);\n                        if (result.META[fullName]) {\n                            logger.error('Meta-nodes share the same full name. Will still proceed..', fullName);\n                        }\n\n                        result.META[fullName] = paths2MetaNodes[path];\n                    }\n                }\n\n                return result;\n            })\n            .nodeify(callback);\n    }\n\n    return {\n        loadNodesAtCommitHash: loadNodesAtCommitHash\n    };\n});\n",
    "/*globals requirejs, define*/\n/*jshint node:true, newcap:false, browser: true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('plugin/managerbase',[\n    'common/core/coreQ',\n    'plugin/PluginResult',\n    'plugin/PluginMessage',\n    'plugin/util',\n    'common/storage/project/interface',\n    'common/storage/util',\n    'q',\n], function (Core,\n             PluginResult,\n             PluginMessage,\n             pluginUtil,\n             ProjectInterface,\n             storageUtil,\n             Q) {\n\n    'use strict';\n\n    /**\n     *\n     * @param blobClient\n     * @param [project]\n     * @param mainLogger\n     * @param gmeConfig\n     * @constructor\n     */\n    function PluginManagerBase(blobClient, project, mainLogger, gmeConfig) {\n        var self = this;\n\n        this.logger = mainLogger.fork('PluginManagerBase');\n        this.notificationHandlers = [];\n\n        /**\n         * These are used to determine if the user is allowed to execute a plugin based on\n         * the project access level. It also determines if the user is allowed to modify certain config\n         * parameters of the plugin.\n         * N.B. When reading or writing to the project from the plugin the access level is always checked\n         * by the storage.\n         * @type {{read: boolean, write: boolean, delete: boolean}}\n         */\n        this.projectAccess = {\n            read: true,\n            write: true,\n            delete: true\n        };\n\n        /**\n         *\n         */\n        this.blobClient = blobClient;\n\n        /**\n         *\n         * @param {string} pluginId\n         * @param {object} pluginConfig - configuration for the plugin.\n         * @param {object} context\n         * @param {string} [context.branchName] - name of branch that should be updated\n         * @param {string} [context.commitHash=<%brashHash%>] - commit from which to start the plugin.\n         * @param {ProjectInterface} [context.project=project] - project instance if different from the one passed in.\n         * @param {string} [context.activeNode=''] - path to active node\n         * @param {string[]} [context.activeSelection=[]] - paths to selected nodes.\n         * @param {string} [context.namespace=''] - used namespace during execution ('' represents all namespaces).\n         * @param {function} callback\n         */\n        this.executePlugin = function (pluginId, pluginConfig, context, callback) {\n            var plugin;\n            self.initializePlugin(pluginId)\n                .then(function (plugin_) {\n                    plugin = plugin_;\n                    return self.configurePlugin(plugin, pluginConfig, context);\n                })\n                .then(function () {\n                    self.runPluginMain(plugin, callback);\n                })\n                .catch(function (err) {\n                    var pluginResult = self.getPluginErrorResult(pluginId, 'Exception was raised, err: ' + err.stack,\n                        plugin && plugin.projectId);\n                    self.logger.error(err.stack);\n                    callback(err.message, pluginResult);\n                });\n        };\n\n        /**\n         * Retrieves plugin script files and creates instance.\n         * @param {string} - pluginId\n         * @param {function} callback\n         * @returns {promise}\n         */\n        this.initializePlugin = function (pluginId, callback) {\n            return getPlugin(pluginId)\n                .then(function (PluginClass) {\n                    var pluginLogger = self.logger.fork('plugin:' + pluginId),\n                        plugin;\n\n                    plugin = new PluginClass();\n                    plugin.initialize(pluginLogger, self.blobClient, gmeConfig);\n\n                    return plugin;\n                })\n                .nodeify(callback);\n        };\n\n        /**\n         *\n         * @param {object} plugin\n         * @param {object} pluginConfig - configuration for the plugin.\n         * @param {object} context\n         * @param {string} context.branchName - name of branch that should be updated\n         * @param {string} [context.commitHash=<%brashHash%>] - commit from which to start the plugin.\n         * @param {ProjectInterface} [context.project=project] - project instance if different from the one passed in.\n         * @param {string} [context.activeNode=''] - path to active node\n         * @param {string[]} [context.activeSelection=[]] - paths to selected nodes.\n         * @param {string} [context.namespace=''] - used namespace during execution ('' represents all namespaces).\n         * @param {function} callback\n         * @returns {promise}\n         */\n        this.configurePlugin = function (plugin, pluginConfig, context, callback) {\n            var deferred = Q.defer(),\n                self = this,\n                defaultConfig = plugin.getDefaultConfig(),\n                writeAccessKeys = {},\n                readOnlyKeys = {},\n                faultyKeys = [],\n                key;\n\n            context.project = context.project || project;\n\n            if (context.project instanceof ProjectInterface === false) {\n                deferred.reject(new Error('project is not an instance of ProjectInterface, ' +\n                    'pass it via context or set it in the constructor of PluginManagerBase.'));\n            } else if (plugin.pluginMetadata.writeAccessRequired === true && self.projectAccess.write === false) {\n                deferred.reject(new Error('Plugin requires write access to the project for execution!'));\n            } else {\n                plugin.pluginMetadata.configStructure.forEach(function (configStructure) {\n                    if (configStructure.writeAccessRequired === true && self.projectAccess.write === false) {\n                        writeAccessKeys[configStructure.name] = true;\n                    }\n                    if (configStructure.readOnly === true) {\n                        readOnlyKeys[configStructure.name] = true;\n                    }\n                });\n\n                pluginConfig = pluginConfig || {};\n\n                for (key in pluginConfig) {\n\n                    if (readOnlyKeys[key] || writeAccessKeys[key]) {\n                        // Parameter is not allowed to be modified, check if it was.\n                        if (pluginConfig.hasOwnProperty(key) &&\n                            pluginConfig[key] !== defaultConfig[key]) {\n                            faultyKeys.push(key);\n                        }\n                    }\n\n                    // We do allow extra config-parameters that aren't specified in the default config.\n                    defaultConfig[key] = pluginConfig[key];\n                }\n\n                if (faultyKeys.length > 0) {\n                    deferred.reject(new Error('User not allowed to modify configuration parameter(s): \"' +\n                        faultyKeys + '\".'));\n                } else {\n\n                    plugin.setCurrentConfig(defaultConfig);\n\n                    self.loadContext(context)\n                        .then(function (pluginContext) {\n                            plugin.configure(pluginContext);\n                            deferred.resolve();\n                        })\n                        .catch(deferred.reject);\n                }\n            }\n\n            return deferred.promise.nodeify(callback);\n        };\n\n        /**\n         *\n         * @param plugin\n         * @param callback\n         */\n        this.runPluginMain = function (plugin, callback) {\n            var startTime = (new Date()).toISOString(),\n                mainCallbackCalls = 0,\n                multiCallbackHandled = false;\n\n            self.logger.debug('plugin configured, invoking main');\n\n            if (plugin.isConfigured === false) {\n                callback('Plugin is not configured.', self.getPluginErrorResult(plugin.getName(),\n                    'Plugin is not configured.', project && project.projectId));\n                return;\n            }\n\n            plugin.notificationHandlers = self.notificationHandlers;\n\n            plugin.main(function (err, result) {\n                var stackTrace;\n                if (result) {\n                    self.logger.debug('plugin main callback called', {result: result.serialize()});\n                }\n                mainCallbackCalls += 1;\n                // set common information (meta info) about the plugin and measured execution times\n                result.setFinishTime((new Date()).toISOString());\n                result.setStartTime(startTime);\n\n                result.setPluginName(plugin.getName());\n\n                if (mainCallbackCalls > 1) {\n                    stackTrace = new Error().stack;\n                    self.logger.error('The main callback is being called more than once!', {metadata: stackTrace});\n                    result.setError('The main callback is being called more than once!');\n                    if (multiCallbackHandled === true) {\n                        plugin.createMessage(null, stackTrace);\n                        return;\n                    }\n                    multiCallbackHandled = true;\n                    result.setSuccess(false);\n                    plugin.createMessage(null, 'The main callback is being called more than once.');\n                    plugin.createMessage(null, stackTrace);\n                    callback('The main callback is being called more than once!', result);\n                } else {\n                    result.setError(err);\n                    plugin.notificationHandlers = [];\n                    callback(err, result);\n                }\n            });\n        };\n\n        function getPlugin(pluginId, callback) {\n            var deferred = Q.defer(),\n                rejected = false,\n                pluginPath = 'plugin/' + pluginId + '/' + pluginId + '/' + pluginId;\n\n            if (self.serverSide && !gmeConfig.plugin.allowServerExecution) {\n                deferred.reject(new Error('Plugin execution on server side is disabled from gmeConfig.'));\n                rejected = true;\n            } else if (self.browserSide && !gmeConfig.plugin.allowBrowserExecution) {\n                deferred.reject(new Error('Plugin execution in browser is disabled from gmeConfig.'));\n                rejected = true;\n            } else {\n                self.logger.debug('Running as CLI - does not respect gmeConfig.plugin.allowServerExecution..');\n            }\n\n            if (rejected === false) {\n                requirejs([pluginPath],\n                    function (PluginClass) {\n                        self.logger.debug('requirejs plugin from path: ' + pluginPath);\n                        deferred.resolve(PluginClass);\n                    },\n                    function (err) {\n                        deferred.reject(err);\n                    }\n                );\n            }\n\n            return deferred.promise.nodeify(callback);\n        }\n\n        this.getPluginErrorResult = function (pluginName, message, projectId) {\n            var pluginResult = new PluginResult(),\n                pluginMessage = new PluginMessage();\n            pluginMessage.severity = 'error';\n            pluginMessage.message = message;\n            pluginResult.setSuccess(false);\n            pluginResult.setPluginName(pluginName);\n            pluginResult.setProjectId(projectId || 'N/A');\n            pluginResult.addMessage(pluginMessage);\n            pluginResult.setStartTime((new Date()).toISOString());\n            pluginResult.setFinishTime((new Date()).toISOString());\n            pluginResult.setError(pluginMessage.message);\n\n            return pluginResult;\n        };\n\n        function getBranchHash(project, branchName) {\n            if (branchName) {\n                return project.getBranchHash(branchName);\n            } else {\n                return Q(null);\n            }\n        }\n\n        /**\n         *\n         * @param {object} context\n         * @param {object} context.project - project form where to load the context.\n         * @param {string} [context.branchName] - name of branch that should be updated\n         * @param {string} [context.commitHash=<%branchHash%>] - commit from which to start the plugin.\n         * @param {string} [context.activeNode=''] - path to active node\n         * @param {string[]} [context.activeSelection=[]] - paths to selected nodes.\n         * @param {string} [context.namespace=''] - used namespace during execution ('' represents all namespaces).\n         * @param {object} pluginLogger - logger for the plugin.\n         */\n        this.loadContext = function (context) {\n            var deferred = Q.defer(),\n                pluginContext = {\n                    branchName: context.branchName,\n                    commitHash: context.commitHash || context.commit,\n\n                    rootNode: null,\n                    activeNode: null,\n                    activeSelection: null,\n                    META: {},\n                    namespace: context.namespace || '',\n\n                    project: context.project,\n                    projectId: context.project.projectId,\n                    projectName: storageUtil.getProjectNameFromProjectId(context.project.projectId),\n                    core: new Core(context.project, {\n                        globConf: gmeConfig,\n                        logger: self.logger.fork('core')\n                    })\n                };\n\n            self.logger.debug('loading context');\n            getBranchHash(pluginContext.project, pluginContext.branchName)\n                .then(function (branchHash) {\n                    pluginContext.commitHash = context.commitHash || branchHash;\n                    if (!pluginContext.commitHash) {\n                        throw new Error('Neither commitHash nor branchHash from branch was obtained, branchName: [' +\n                            context.branchName + ']');\n                    }\n\n                    return pluginUtil.loadNodesAtCommitHash(\n                        pluginContext.project,\n                        pluginContext.core,\n                        pluginContext.commitHash,\n                        self.logger,\n                        context);\n                })\n                .then(function (result) {\n                    pluginContext.rootNode = result.rootNode;\n                    pluginContext.activeNode = result.activeNode;\n                    pluginContext.activeSelection = result.activeSelection;\n                    pluginContext.META = result.META;\n\n                    deferred.resolve(pluginContext);\n                })\n                .catch(function (err) {\n                    deferred.reject(err);\n                });\n\n            return deferred.promise;\n        };\n    }\n\n    return PluginManagerBase;\n});\n",
    "/*globals define*/\n/*jshint browser: true*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\n\ndefine('js/client/pluginmanager',[\n    'plugin/managerbase',\n    'blob/BlobClient',\n    'common/storage/project/project',\n    'js/RegistryKeys'\n], function (PluginManagerBase, BlobClient, Project, REG_KEYS) {\n    'use strict';\n\n    var ROOT_PATH = '';\n\n    /**\n     *\n     * @param client\n     * @param storage\n     * @param state\n     * @param mainLogger\n     * @param gmeConfig\n     * @constructor\n     */\n    function PluginManager(client, storage, state, mainLogger, gmeConfig) {\n\n        var self = this,\n            logger = mainLogger.fork('PluginManager');\n\n        this.getCurrentPluginContext = function (pluginId, activeNodeId) {\n            var activeNode,\n                validPlugins,\n                context =  {\n                managerConfig: {\n                    project: client.getProjectObject(),\n                    branchName: client.getActiveBranchName(),\n                    commitHash: client.getActiveCommitHash(),\n                    activeNode: ROOT_PATH,\n                    activeSelection: [],\n                    namespace: ''\n                },\n                pluginConfig: null\n            };\n\n            // If executed from the Generic UI we can access the active- and selected-nodes.\n            if (typeof WebGMEGlobal !== 'undefined') {\n                /* jshint -W117 */\n                activeNodeId = typeof activeNodeId === 'string' ? activeNodeId : WebGMEGlobal.State.getActiveObject();\n                context.managerConfig.activeSelection = WebGMEGlobal.State.getActiveSelection();\n                context.managerConfig.activeNode = activeNodeId;\n                /* jshint +W117 */\n            }\n\n            // Given the active-node we infer the namespace (user may still select another one).\n            if (activeNodeId && pluginId) {\n                activeNode = client.getNode(activeNodeId);\n                do {\n                    validPlugins = activeNode.getOwnRegistry(REG_KEYS.VALID_PLUGINS);\n                    if (validPlugins && validPlugins.indexOf(pluginId) > -1) {\n                        // The plugin was defined at this particular node, we use the namespace of it.\n                        context.managerConfig.namespace = activeNode.getNamespace();\n                        break;\n                    }\n\n                    activeNode = activeNode.getBaseId() ? client.getNode(activeNode.getBaseId()) : null;\n                } while (activeNode);\n            }\n\n            return context;\n        };\n\n        /**\n         * Run the plugin in the browser.\n         * @param {string} pluginId - id of plugin.\n         * @param {object} context\n         * @param {object} context.managerConfig - where the plugin should execute.\n         * @param {Project} context.managerConfig.project - project (e.g. client.getProjectObject()).\n         * @param {string} [context.managerConfig.activeNode=''] - path to activeNode.\n         * @param {string} [context.managerConfig.activeSelection=[]] - paths to selected nodes.\n         * @param {string} context.managerConfig.commitHash - commit hash to start the plugin from.\n         * @param {string} [context.managerConfig.branchName] - branch which to save to.\n         * @param {string} [context.managerConfig.namespace=''] - used namespace during execution ('' represents all namespaces).\n         * @param {object} [context.pluginConfig=%defaultForPlugin%] - specific configuration for the plugin.\n         * @param {function(err, PluginResult)} callback\n         */\n        this.runBrowserPlugin = function (pluginId, context, callback) {\n            var blobClient = new BlobClient({logger: logger.fork('BlobClient')}),\n                pluginManager = new PluginManagerBase(blobClient, null, mainLogger, gmeConfig);\n\n            pluginManager.browserSide = true;\n\n            pluginManager.notificationHandlers = [function (data, callback) {\n                self.dispatchPluginNotification(data);\n                callback(null);\n            }];\n\n            pluginManager.projectAccess = client.getProjectAccess();\n\n            pluginManager.executePlugin(pluginId, context.pluginConfig, context.managerConfig, callback);\n        };\n\n        /**\n         * Run the plugin on the server inside a worker process.\n         * @param {string} pluginId - id of plugin.\n         * @param {object} context\n         * @param {object} context.managerConfig - where the plugin should execute.\n         * @param {Project|string} context.managerConfig.project - id of project.\n         * @param {string} [context.managerConfig.activeNode=''] - path to activeNode.\n         * @param {string} [context.managerConfig.activeSelection=[]] - paths to selected nodes.\n         * @param {string} context.managerConfig.commitHash - commit hash to start the plugin from.\n         * @param {string} [context.managerConfig.branchName] - branch which to save to.\n         * @param {string} [context.managerConfig.namespace=''] - used namespace during execution ('' represents all namespaces).\n         * @param {object} [context.pluginConfig=%defaultForPlugin%] - specific configuration for the plugin.\n         * @param {function} callback\n         */\n        this.runServerPlugin = function (pluginId, context, callback) {\n\n            if (context.managerConfig.project instanceof Project) {\n                context.managerConfig.project = context.managerConfig.project.projectId;\n            }\n\n            storage.simpleRequest({command: 'executePlugin', name: pluginId, context: context}, callback);\n        };\n\n        /**\n         * @param {string[]} pluginIds - All available plugins on the server.\n         * @param {string} [nodePath=''] - Node to get the validPlugins from.\n         * @returns {string[]} - Filtered plugin ids.\n         */\n        this.filterPlugins = function (pluginIds, nodePath) {\n            var filteredIds = [],\n                validPlugins,\n                i,\n                node;\n\n            logger.debug('filterPluginsBasedOnNode allPlugins, given nodePath', pluginIds, nodePath);\n            if (!nodePath) {\n                logger.debug('filterPluginsBasedOnNode nodePath not given - will fall back on root-node.');\n                nodePath = ROOT_PATH;\n            }\n\n            node = state.nodes[nodePath];\n\n            if (!node) {\n                logger.warn('filterPluginsBasedOnNode node not loaded - will fall back on root-node.', nodePath);\n                nodePath = ROOT_PATH;\n                node = state.nodes[nodePath];\n            }\n\n            if (!node) {\n                logger.warn('filterPluginsBasedOnNode root node not loaded - will return full list.');\n                return pluginIds;\n            }\n\n            validPlugins = (state.core.getRegistry(node.node, 'validPlugins') || '').split(' ');\n            for (i = 0; i < validPlugins.length; i += 1) {\n                if (pluginIds.indexOf(validPlugins[i]) > -1) {\n                    filteredIds.push(validPlugins[i]);\n                } else if (validPlugins[i] === '') {\n                    // Skip empty strings..\n                } else {\n                    logger.warn('Registered plugin for node at path \"' + nodePath +\n                        '\" is not amongst available plugins', pluginIds);\n                }\n            }\n\n            return filteredIds;\n        };\n\n        this.dispatchPluginNotification = function (data) {\n            var notification = {\n                severity: data.notification.severity || 'info',\n                message: '[Plugin] ' + data.pluginName + ' - ' + data.notification.message\n            };\n\n            if (typeof data.notification.progress === 'number') {\n                notification.message += ' [' + data.notification.progress + '%]';\n            }\n\n            logger.debug('plugin notification', data);\n            client.dispatchEvent(client.CONSTANTS.NOTIFICATION, notification);\n            client.dispatchEvent(client.CONSTANTS.PLUGIN_NOTIFICATION, data);\n        };\n    }\n\n    return PluginManager;\n\n});\n",
    "/*globals define, console*/\r\n/*jshint browser: true*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\ndefine('client/js/client',[\r\n    'js/logger',\r\n    'common/storage/browserstorage',\r\n    'common/EventDispatcher',\r\n    'common/core/coreQ',\r\n    'js/client/constants',\r\n    'common/util/assert',\r\n    'common/core/tasync',\r\n    'common/util/guid',\r\n    'common/util/url',\r\n    'js/client/gmeNodeGetter',\r\n    'js/client/gmeNodeSetter',\r\n    'js/client/libraries',\r\n    'blob/BlobClient',\r\n    'js/client/stateloghelpers',\r\n    'js/client/pluginmanager',\r\n    'superagent'\r\n], function (Logger,\r\n             Storage,\r\n             EventDispatcher,\r\n             Core,\r\n             CONSTANTS,\r\n             ASSERT,\r\n             TASYNC,\r\n             GUID,\r\n             URL,\r\n             getNode,\r\n             getNodeSetters,\r\n             getLibraryFunctions,\r\n             BlobClient,\r\n             stateLogHelpers,\r\n             PluginManager,\r\n             superagent) {\r\n    'use strict';\r\n\r\n    function Client(gmeConfig) {\r\n        var self = this,\r\n            logger = Logger.create('gme:client', gmeConfig.client.log),\r\n            storage = Storage.getStorage(logger, gmeConfig, true),\r\n            state = {\r\n                connection: null, // CONSTANTS.STORAGE. CONNECTED/DISCONNECTED/RECONNECTED/INCOMPATIBLE_CONNECTION/CONNECTION_ERROR\r\n                renewingToken: false,\r\n                exception: null,\r\n                project: null,\r\n                projectAccess: null,\r\n                core: null,\r\n                branchName: null,\r\n                branchStatus: null, //CONSTANTS.BRANCH_STATUS. SYNC/AHEAD_SYNC/AHEAD_FORKED/PULLING/ERROR or null\r\n                readOnlyProject: false,\r\n                viewer: false, // This means that a specific commit is selected w/o regards to any branch.\r\n\r\n                users: {},\r\n                nodes: {},\r\n                loadNodes: {},\r\n\r\n                rootHash: null,\r\n                rootObject: null,\r\n                commitHash: null,\r\n\r\n                undoRedoChain: null, //{commitHash: '#hash', rootHash: '#hash', previous: object, next: object}\r\n\r\n                inTransaction: false,\r\n                msg: '',\r\n                gHash: 0,\r\n                loadError: null,\r\n                ongoingTerritoryUpdateCounter: 0,\r\n                ongoingLoadPatternsCounter: 0,\r\n                pendingTerritoryUpdatePatterns: {},\r\n                loadingStatus: null,\r\n                inLoading: false,\r\n                loading: {\r\n                    rootHash: null,\r\n                    commitHash: null,\r\n                    changedNodes: null,\r\n                    next: null\r\n                }\r\n\r\n            },\r\n            blobClient,\r\n            monkeyPatchKey,\r\n            pluginManager,\r\n            nodeSetterFunctions,\r\n            coreLibraryFunctions,\r\n            ROOT_PATH = '',\r\n            //addOnFunctions = new AddOn(state, storage, logger, gmeConfig),\r\n            loadPatternThrottled = TASYNC.throttle(loadPattern, 1); //magic number could be fine-tuned\r\n        //loadPatternThrottled = loadPattern; //magic number could be fine-tuned\r\n\r\n        blobClient = new BlobClient({logger: logger.fork('BlobClient')});\r\n        EventDispatcher.call(this);\r\n\r\n        this.CONSTANTS = CONSTANTS;\r\n\r\n        function logState(level, msg) {\r\n            var indent = gmeConfig.debug ? 2 : 0;\r\n\r\n            if (level === 'console') {\r\n                console.log('state at ' + msg,\r\n                    stateLogHelpers.getStateLogString(self, state, gmeConfig.debug, indent));\r\n            } else {\r\n                logger[level]('state at ' + msg,\r\n                    stateLogHelpers.getStateLogString(self, state, gmeConfig.debug, indent));\r\n            }\r\n        }\r\n\r\n        function renewTokenCookie(callback) {\r\n            callback = callback || function (err, res) {\r\n                    state.renewingToken = false;\r\n                    if (err) {\r\n                        logger.error('Failed to renew token cookie', err);\r\n                    } else {\r\n                        logger.debug('Token cookie renewed');\r\n                    }\r\n                };\r\n\r\n            if (state.renewingToken === false) {\r\n                state.renewingToken = true;\r\n                (new superagent.Request('GET', 'api/user/token'))\r\n                    .end(callback);\r\n            } else {\r\n                logger.debug('Awaiting token renewal..');\r\n            }\r\n        }\r\n\r\n        // Forwarded functions\r\n        function saveRoot(msg, callback) {\r\n            var persisted,\r\n                numberOfPersistedObjects,\r\n                wrappedCallback,\r\n                newCommitObject;\r\n\r\n            logger.debug('saveRoot msg', msg);\r\n            if (callback) {\r\n                wrappedCallback = function (err, result) {\r\n                    if (err) {\r\n                        logger.error('saveRoot failure', err);\r\n                    } else {\r\n                        logger.debug('saveRoot', result);\r\n                    }\r\n                    callback(err, result);\r\n                };\r\n            } else {\r\n                wrappedCallback = function (err, result) {\r\n                    if (err) {\r\n                        logger.error('saveRoot failure', err);\r\n                    } else {\r\n                        logger.debug('saveRoot', result);\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (!state.viewer && !state.readOnlyProject) {\r\n                if (state.msg) {\r\n                    state.msg += '\\n' + msg;\r\n                } else {\r\n                    state.msg += msg;\r\n                }\r\n                if (!state.inTransaction) {\r\n                    ASSERT(state.project && state.core && state.branchName);\r\n\r\n                    logger.debug('is NOT in transaction - will persist.');\r\n                    persisted = state.core.persist(state.nodes[ROOT_PATH].node);\r\n                    logger.debug('persisted', persisted);\r\n                    numberOfPersistedObjects = Object.keys(persisted.objects).length;\r\n                    if (numberOfPersistedObjects === 0) {\r\n                        logger.warn('No changes after persist will return from saveRoot.');\r\n                        wrappedCallback(null);\r\n                        return;\r\n                    } else if (numberOfPersistedObjects > 200) {\r\n                        //This is just for debugging\r\n                        logger.warn('Lots of persisted objects', numberOfPersistedObjects);\r\n                    }\r\n\r\n                    // Make the commit on the storage (will emit hashUpdated)\r\n                    newCommitObject = storage.makeCommit(\r\n                        state.project.projectId,\r\n                        state.branchName,\r\n                        [state.commitHash],\r\n                        persisted.rootHash,\r\n                        persisted.objects,\r\n                        state.msg,\r\n                        wrappedCallback\r\n                    );\r\n\r\n                    state.msg = '';\r\n                } else {\r\n                    logger.debug('is in transaction - will NOT persist.');\r\n                }\r\n            } else {\r\n                //TODO: Why is this set to empty here?\r\n                state.msg = '';\r\n                wrappedCallback(null);\r\n            }\r\n        }\r\n\r\n        function storeNode(node /*, basic */) {\r\n            var path;\r\n            //basic = basic || true;\r\n            if (node) {\r\n                path = state.core.getPath(node);\r\n                //state.metaNodes[path] = node;\r\n                if (state.nodes[path]) {\r\n                    //TODO we try to avoid this\r\n                } else {\r\n                    state.nodes[path] = {\r\n                        node: node\r\n                    };\r\n                    //TODO this only needed when real eventing will be reintroduced\r\n                    //_inheritanceHash[path] = getInheritanceChain(node);\r\n                }\r\n                return path;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // Plugin Manager\r\n        pluginManager = new PluginManager(self, storage, state, logger, gmeConfig);\r\n        this.getCurrentPluginContext = pluginManager.getCurrentPluginContext;\r\n        this.runBrowserPlugin = pluginManager.runBrowserPlugin;\r\n        this.runServerPlugin = pluginManager.runServerPlugin;\r\n        this.filterPlugins = pluginManager.filterPlugins;\r\n        this.dispatchPluginNotification = pluginManager.dispatchPluginNotification;\r\n\r\n        function checkMetaNameCollision(core, rootNode) {\r\n            var names = [],\r\n                nodes = core.getAllMetaNodes(rootNode),\r\n                i,\r\n                keys = Object.keys(nodes || {}),\r\n                name;\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                //name = core.getAttribute(nodes[keys[i]], 'name');\r\n                name = core.getFullyQualifiedName(nodes[keys[i]]);\r\n                if (names.indexOf(name) === -1) {\r\n                    names.push(name);\r\n                } else {\r\n                    self.dispatchEvent(CONSTANTS.NOTIFICATION, {\r\n                        type: 'META',\r\n                        severity: 'error',\r\n                        message: 'Duplicate name on META level: \\'' + name + '\\'',\r\n                        hint: 'Rename one of the objects'\r\n                    });\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        function checkMixinErrors(core, rootNode) {\r\n            var metaNodes = core.getAllMetaNodes(rootNode),\r\n                i, key,\r\n                notifications = {},\r\n                notificationKeys = [],\r\n                errors;\r\n\r\n            for (key in metaNodes) {\r\n                errors = core.getMixinErrors(metaNodes[key]);\r\n\r\n                for (i = 0; i < errors.length; i += 1) {\r\n                    notifications[errors[i].message] = {\r\n                        type: 'META',\r\n                        severity: errors[i].severity,\r\n                        message: errors[i].message,\r\n                        hint: errors[i].hint\r\n                    };\r\n                    notificationKeys.push(errors[i].message);\r\n                }\r\n            }\r\n\r\n            //now sort simply by the messages\r\n            notificationKeys.sort();\r\n            for (i = 0; i < notificationKeys.length; i += 1) {\r\n                self.dispatchEvent(CONSTANTS.NOTIFICATION, notifications[notificationKeys[i]]);\r\n            }\r\n        }\r\n\r\n        function printCoreError(error) {\r\n            logger.error('Faulty core usage raised an error', error);\r\n            self.dispatchEvent(CONSTANTS.NOTIFICATION, {\r\n                type: 'CORE',\r\n                severity: 'error',\r\n                message: error.message\r\n            });\r\n        }\r\n\r\n        // Node setters and getters.\r\n\r\n        nodeSetterFunctions = getNodeSetters(logger, state, saveRoot, storeNode, printCoreError);\r\n\r\n        for (monkeyPatchKey in nodeSetterFunctions) {\r\n            if (nodeSetterFunctions.hasOwnProperty(monkeyPatchKey)) {\r\n                self[monkeyPatchKey] = nodeSetterFunctions[monkeyPatchKey];\r\n            }\r\n        }\r\n\r\n        coreLibraryFunctions = getLibraryFunctions(logger, state, storage, saveRoot);\r\n\r\n        for (monkeyPatchKey in coreLibraryFunctions) {\r\n            if (coreLibraryFunctions.hasOwnProperty(monkeyPatchKey)) {\r\n                self[monkeyPatchKey] = coreLibraryFunctions[monkeyPatchKey];\r\n            }\r\n        }\r\n\r\n        // Main API functions (with helpers) for connecting, selecting project and branches etc.\r\n        this.connectToDatabase = function (callback) {\r\n            if (self.isConnected()) {\r\n                logger.warn('connectToDatabase - already connected');\r\n                callback(null);\r\n                return;\r\n            }\r\n            storage.open(function (connectionState) {\r\n                state.connection = connectionState;\r\n                if (connectionState === CONSTANTS.STORAGE.CONNECTED) {\r\n                    //N.B. this event will only be triggered once.\r\n                    self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                    storage.webSocket.addEventListener(CONSTANTS.STORAGE.NOTIFICATION,\r\n                        function (emitter, eventData) {\r\n                            logger.info('recieved notification', eventData);\r\n                            if (eventData.type === CONSTANTS.STORAGE.BRANCH_ROOM_SOCKETS) {\r\n                                self.dispatchConnectedUsersChanged(eventData);\r\n                                // If a new socket joined our branch -> emit to the branch room letting\r\n                                // any newly connected users know that we are in this branch too.\r\n                                // If a socket with the same userId as us disconnected -> emit to\r\n                                // make sure we're not deleted from the other users.\r\n                                self.emitStateNotification();\r\n\r\n                            } else if (eventData.type === CONSTANTS.STORAGE.PLUGIN_NOTIFICATION) {\r\n                                self.dispatchPluginNotification(eventData);\r\n                            } else if (eventData.type === CONSTANTS.STORAGE.ADD_ON_NOTIFICATION) {\r\n                                self.dispatchAddOnNotification(eventData);\r\n                            } else if (eventData.type === CONSTANTS.STORAGE.CLIENT_STATE_NOTIFICATION) {\r\n                                self.dispatchConnectedUsersChanged(eventData);\r\n                            } else {\r\n                                logger.error('Unknown notification type', eventData.type, eventData);\r\n                            }\r\n                        }\r\n                    );\r\n                    reLaunchUsers();\r\n                    callback(null);\r\n                } else if (connectionState === CONSTANTS.STORAGE.DISCONNECTED) {\r\n                    if (state.connection !== CONSTANTS.STORAGE.INCOMPATIBLE_CONNECTION) {\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                    }\r\n                } else if (connectionState === CONSTANTS.STORAGE.RECONNECTED) {\r\n                    self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                } else if (connectionState === CONSTANTS.STORAGE.INCOMPATIBLE_CONNECTION) {\r\n                    self.disconnectFromDatabase(function (err) {\r\n                        if (err) {\r\n                            logger.error(err);\r\n                        }\r\n\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                    });\r\n                } else if (connectionState === CONSTANTS.STORAGE.JWT_ABOUT_TO_EXPIRE) {\r\n                    logger.warn('Token about is about to expire');\r\n                    renewTokenCookie();\r\n                } else if (connectionState === CONSTANTS.STORAGE.JWT_EXPIRED) {\r\n                    self.disconnectFromDatabase(function (err) {\r\n                        if (err) {\r\n                            logger.error(err);\r\n                        }\r\n\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, CONSTANTS.STORAGE.JWT_EXPIRED);\r\n                    });\r\n                } else {\r\n                    logger.error(new Error('Connection failed error ' + connectionState));\r\n                    self.disconnectFromDatabase(function (err) {\r\n                        if (err) {\r\n                            logger.error(err);\r\n                        }\r\n\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, CONSTANTS.STORAGE.CONNECTION_ERROR);\r\n                        callback(new Error('Connection failed! ' + connectionState));\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        this.disconnectFromDatabase = function (callback) {\r\n\r\n            function closeStorage(err) {\r\n                storage.close(function (err2) {\r\n                    if (state.connection !== CONSTANTS.STORAGE.INCOMPATIBLE_CONNECTION &&\r\n                        state.connection !== CONSTANTS.STORAGE.CONNECTION_ERROR) {\r\n                        state.connection = CONSTANTS.STORAGE.DISCONNECTED;\r\n                    }\r\n\r\n                    callback(err || err2);\r\n                });\r\n            }\r\n\r\n            if (state.project) {\r\n                closeProject(state.project.projectId, closeStorage);\r\n            } else {\r\n                closeStorage(null);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * If branchName is given and it does not exist, the project will be closed and callback resolved with an error.\r\n         * If branchName NOT given it will attempt the following in order and break if successful at any step:\r\n         *  1) Select the master if available.\r\n         *  2) Select any available branch.\r\n         *  3) Select the latest commit.\r\n         *  4) Close the project and resolve with error.\r\n         * @param {string} projectId\r\n         * @param {string} [branchName='master']\r\n         * @param {function} callback\r\n         */\r\n        this.selectProject = function (projectId, branchName, callback) {\r\n            if (callback === undefined && typeof branchName === 'function') {\r\n                callback = branchName;\r\n                branchName = undefined;\r\n            }\r\n            if (self.isConnected() === false) {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n            var prevProjectId,\r\n                branchToOpen = branchName || 'master';\r\n\r\n            logger.debug('selectProject', projectId, branchToOpen);\r\n\r\n            function projectOpened(err, project, branches, access) {\r\n                if (err) {\r\n                    callback(new Error(err));\r\n                    return;\r\n                }\r\n                state.project = project;\r\n                state.readOnlyProject = access.write === false;\r\n                state.core = new Core(project, {\r\n                    globConf: gmeConfig,\r\n                    logger: logger.fork('core')\r\n                });\r\n                state.projectAccess = access;\r\n\r\n                logState('info', 'projectOpened');\r\n                logger.debug('projectOpened, branches: ', branches);\r\n                self.dispatchEvent(CONSTANTS.PROJECT_OPENED, projectId);\r\n\r\n                if (branches.hasOwnProperty(branchToOpen) === false) {\r\n                    if (branchName) {\r\n                        logger.error('Given branch does not exist \"' + branchName + '\"');\r\n                        closeProject(projectId, function (err) {\r\n                            if (err) {\r\n                                logger.error('closeProject after missing branch failed with err', err);\r\n                            }\r\n                            callback(new Error('Given branch does not exist \"' + branchName + '\"'));\r\n                        });\r\n                        return;\r\n                    }\r\n                    logger.warn('Project \"' + projectId + '\" did not have branch', branchToOpen);\r\n                    branchToOpen = Object.keys(branches)[0] || null;\r\n                    logger.debug('Picked \"' + branchToOpen + '\".');\r\n                }\r\n\r\n                if (branchToOpen) {\r\n                    self.selectBranch(branchToOpen, null, function (err) {\r\n                        if (err) {\r\n                            callback(err);\r\n                            return;\r\n                        }\r\n                        logState('info', 'selectBranch');\r\n                        reLaunchUsers();\r\n                        callback(null);\r\n                    });\r\n                } else {\r\n                    logger.warn('No branches available in project, will attempt to select latest commit.');\r\n                    self.getCommits(projectId, (new Date()).getTime(), 1, function (err, commitObjects) {\r\n                        if (err || commitObjects.length === 0) {\r\n                            logger.error(err);\r\n                            closeProject(projectId, function (err) {\r\n                                if (err) {\r\n                                    logger.error('closeProject after missing any commits failed with err', err);\r\n                                }\r\n                                callback(new Error('Project does not have any commits.'));\r\n                            });\r\n                            return;\r\n                        }\r\n                        self.selectCommit(commitObjects[0]._id, function (err) {\r\n                            if (err) {\r\n                                logger.error(err);\r\n                                closeProject(projectId, function (err) {\r\n                                    if (err) {\r\n                                        logger.error('closeProject after missing any commits failed with err', err);\r\n                                    }\r\n                                    callback(new Error('Failed selecting commit when opening project.'));\r\n                                });\r\n                                return;\r\n                            }\r\n                            reLaunchUsers();\r\n                            callback(null);\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (state.project) {\r\n                prevProjectId = state.project.projectId;\r\n                logger.debug('A project was open, closing it', prevProjectId);\r\n\r\n                if (prevProjectId === projectId) {\r\n                    logger.warn('projectId is already opened', projectId);\r\n                    callback(null);\r\n                    return;\r\n                }\r\n                closeProject(prevProjectId, function (err) {\r\n                    if (err) {\r\n                        logger.error('problems closing previous project', err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    storage.openProject(projectId, projectOpened);\r\n                });\r\n            } else {\r\n                storage.openProject(projectId, projectOpened);\r\n            }\r\n        };\r\n\r\n        function closeProject(projectId, callback) {\r\n\r\n            state.project = null;\r\n            //TODO what if for some reason we are in transaction?\r\n            storage.closeProject(projectId, function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                state.core = null;\r\n                state.branchName = null;\r\n                //self.dispatchEvent(null);\r\n                state.patterns = {};\r\n                //state.gHash = 0;\r\n                state.nodes = {};\r\n                state.loadNodes = {};\r\n                state.loadError = 0;\r\n                state.rootHash = null;\r\n                //state.rootObject = null;\r\n                state.inTransaction = false;\r\n                state.msg = '';\r\n\r\n                cleanUsersTerritories();\r\n                self.dispatchEvent(CONSTANTS.PROJECT_CLOSED, projectId);\r\n\r\n                callback(null);\r\n            });\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {string} branchName - name of branch to open.\r\n         * @param {function} [branchStatusHandler=getDefaultCommitHandler()] - Handles returned statuses after commits.\r\n         * @param callback\r\n         */\r\n        this.selectBranch = function (branchName, branchStatusHandler, callback) {\r\n            var prevBranchName = state.branchName;\r\n            logger.debug('selectBranch', branchName);\r\n            if (self.isConnected() === false) {\r\n                callback(new Error('There is no open database connection!'));\r\n                return;\r\n            }\r\n            if (!state.project) {\r\n                callback(new Error('selectBranch invoked without an opened project'));\r\n                return;\r\n            }\r\n\r\n            if (branchStatusHandler) {\r\n                logger.warn('passing branchStatusHandler is deprecated, use addHashUpdateHandler or' +\r\n                    ' addBranchStatusHandler on the branch object instead (getProjectObject().branches[branchName]).');\r\n            }\r\n\r\n            function openBranch(err) {\r\n                if (err) {\r\n                    logger.error('Problems closing existing branch', err);\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                state.branchName = branchName;\r\n                logger.debug('openBranch, calling storage openBranch', state.project.projectId, branchName);\r\n                storage.openBranch(state.project.projectId, branchName,\r\n                    getHashUpdateHandler(), getBranchStatusHandler(),\r\n                    function (err /*, latestCommit*/) {\r\n                        if (err) {\r\n                            logger.error('storage.openBranch returned with error', err);\r\n                            self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                            callback(err);\r\n                            return;\r\n                        }\r\n\r\n                        state.viewer = false;\r\n                        state.branchName = branchName;\r\n                        self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, branchName);\r\n                        logState('info', 'openBranch');\r\n                        callback(null);\r\n                    }\r\n                );\r\n            }\r\n\r\n            if (prevBranchName !== null) {\r\n                logger.debug('Branch was open, closing it first', prevBranchName);\r\n                storage.closeBranch(state.project.projectId, prevBranchName, openBranch);\r\n            } else {\r\n                openBranch(null);\r\n            }\r\n        };\r\n\r\n        this.selectCommit = function (commitHash, callback) {\r\n            logger.debug('selectCommit', commitHash);\r\n            if (self.isConnected() === false) {\r\n                callback(new Error('There is no open database connection!'));\r\n                return;\r\n            }\r\n            if (!state.project) {\r\n                callback(new Error('selectCommit invoked without open project'));\r\n                return;\r\n            }\r\n            var prevBranchName;\r\n\r\n            function openCommit(err) {\r\n                if (err) {\r\n                    logger.error('Problems closing existing branch', err);\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                state.viewer = true;\r\n\r\n                state.project.loadObject(commitHash, function (err, commitObj) {\r\n                    if (!err && commitObj) {\r\n                        logState('info', 'selectCommit loaded commit');\r\n                        self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                        loading(commitObj.root, commitHash, null, function (err, aborted) {\r\n                            if (err) {\r\n                                logger.error('loading returned error', commitObj.root, err);\r\n                                logState('error', 'selectCommit loading');\r\n                                callback(err);\r\n                            } else if (aborted === true) {\r\n                                logState('warn', 'selectCommit loading');\r\n                                callback(new Error('Loading selected commit was aborted'));\r\n                            } else {\r\n                                logger.debug('loading complete for selectCommit rootHash', commitObj.root);\r\n                                logState('info', 'selectCommit loading');\r\n                                self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                                callback(null);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        logger.error('Cannot view given ' + commitHash + ' commit as it\\'s root cannot be loaded! [' +\r\n                            JSON.stringify(err) + ']');\r\n                        callback(err || new Error('commit object cannot be found!'));\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (state.branchName !== null) {\r\n                logger.debug('Branch was open, closing it first', state.branchName);\r\n                prevBranchName = state.branchName;\r\n                state.branchName = null;\r\n                storage.closeBranch(state.project.projectId, prevBranchName, openCommit);\r\n            } else {\r\n                openCommit(null);\r\n            }\r\n        };\r\n\r\n        function getBranchStatusHandler() {\r\n            return function (branchStatus, commitQueue, updateQueue) {\r\n                logger.debug('branchStatus changed', branchStatus, commitQueue, updateQueue);\r\n                logState('debug', 'branchStatus');\r\n                state.branchStatus = branchStatus;\r\n                self.dispatchEvent(CONSTANTS.BRANCH_STATUS_CHANGED, {\r\n                        status: branchStatus,\r\n                        commitQueue: commitQueue,\r\n                        updateQueue: updateQueue\r\n                    }\r\n                );\r\n            };\r\n        }\r\n\r\n        function getHashUpdateHandler() {\r\n            return function (data, commitQueue, updateQueue, callback) {\r\n                var commitData = data.commitData,\r\n                    clearUndoRedo = data.local !== true,\r\n                    commitHash = commitData.commitObject[CONSTANTS.STORAGE.MONGO_ID];\r\n                logger.debug('hashUpdateHandler invoked. project, branch, commitHash',\r\n                    commitData.projectId, commitData.branchName, commitHash);\r\n\r\n                if (state.inTransaction) {\r\n                    logger.warn('Is in transaction, will not load in changes');\r\n                    callback(null, false); // proceed: false\r\n                    return;\r\n                }\r\n\r\n                //undo-redo\r\n                addModification(commitData.commitObject, clearUndoRedo);\r\n                self.dispatchEvent(CONSTANTS.UNDO_AVAILABLE, canUndo());\r\n                self.dispatchEvent(CONSTANTS.REDO_AVAILABLE, canRedo());\r\n\r\n                logger.debug('loading commitHash, local?', commitHash, data.local);\r\n                loading(commitData.commitObject.root, commitHash, commitData.changedNodes, function (err, aborted) {\r\n                    if (err) {\r\n                        logger.error('hashUpdateHandler invoked loading and it returned error',\r\n                            commitData.commitObject.root, err);\r\n                        logState('error', 'hashUpdateHandler');\r\n                        callback(err, false); // proceed: false\r\n                    } else if (aborted === true) {\r\n                        logState('warn', 'hashUpdateHandler');\r\n                        callback(null, false); // proceed: false\r\n                    } else {\r\n                        logger.debug('loading complete for incoming rootHash', commitData.commitObject.root);\r\n                        logState('debug', 'hashUpdateHandler');\r\n                        callback(null, true); // proceed: true\r\n                    }\r\n                });\r\n            };\r\n        }\r\n\r\n        this.forkCurrentBranch = function (newName, commitHash, callback) {\r\n            var self = this,\r\n                activeBranchName = self.getActiveBranchName(),\r\n                activeProjectId = self.getActiveProjectId(),\r\n                forkName;\r\n\r\n            logger.debug('forkCurrentBranch', newName, commitHash);\r\n            if (!state.project) {\r\n                callback('Cannot fork without an open project!');\r\n                return;\r\n            }\r\n            if (activeBranchName === null) {\r\n                callback('Cannot fork without an open branch!');\r\n                return;\r\n            }\r\n            forkName = newName || activeBranchName + '_' + (new Date()).getTime();\r\n            storage.forkBranch(activeProjectId, activeBranchName, forkName, commitHash,\r\n                function (err, forkHash) {\r\n                    if (err) {\r\n                        logger.error('Could not fork branch:', newName, err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    callback(null, forkName, forkHash);\r\n                }\r\n            );\r\n        };\r\n\r\n        // State getters.\r\n        this.isConnected = function () {\r\n            return state.connection === CONSTANTS.STORAGE.CONNECTED ||\r\n                state.connection === CONSTANTS.STORAGE.RECONNECTED;\r\n        };\r\n\r\n        this.getNetworkStatus = function () {\r\n            return state.connection;\r\n        };\r\n\r\n        this.getConnectedStorageVersion = function () {\r\n            // This is the version of the server the storage is currently connected to.\r\n            return storage.serverVersion;\r\n        };\r\n\r\n        this.getBranchStatus = function () {\r\n            return state.branchStatus;\r\n        };\r\n\r\n        this.getActiveProjectId = function () {\r\n            return state.project && state.project.projectId;\r\n        };\r\n\r\n        this.getActiveProjectName = function () {\r\n            return state.project && state.project.projectName;\r\n        };\r\n\r\n        this.getActiveBranchName = function () {\r\n            return state.branchName;\r\n        };\r\n\r\n        this.getActiveCommitHash = function () {\r\n            return state.commitHash;\r\n        };\r\n\r\n        this.getActiveRootHash = function () {\r\n            return state.rootHash;\r\n        };\r\n\r\n        this.isProjectReadOnly = function () {\r\n            return state.readOnlyProject;\r\n        };\r\n\r\n        this.isCommitReadOnly = function () {\r\n            // This means that a specific commit is selected w/o regards to any branch.\r\n            return state.viewer;\r\n        };\r\n\r\n        this.isReadOnly = function () {\r\n            return state.viewer || state.readOnlyProject;\r\n        };\r\n\r\n        this.getProjectObject = function () {\r\n            return state.project;\r\n        };\r\n\r\n        this.getCommitQueue = function () {\r\n            if (state.project && state.branchName && state.project.branches.hasOwnProperty(state.branchName)) {\r\n                return state.project.branches[state.branchName].getCommitQueue();\r\n            }\r\n\r\n            return [];\r\n        };\r\n\r\n        this.downloadCommitQueue = function () {\r\n            var commitQueue = this.getCommitQueue();\r\n\r\n            if (commitQueue.length > 0) {\r\n                stateLogHelpers.downloadCommitQueue(self, commitQueue);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getProjectAccess = function () {\r\n            return state.projectAccess;\r\n        };\r\n\r\n        this.downloadError = function () {\r\n            stateLogHelpers.downloadStateDump(self, state);\r\n        };\r\n\r\n        // Undo/Redo functionality\r\n        function addModification(commitObject, clear) {\r\n            var newItem,\r\n                commitHash = commitObject[CONSTANTS.STORAGE.MONGO_ID],\r\n                currItem;\r\n            if (clear) {\r\n                logger.debug('foreign modification clearing undo-redo chain');\r\n                state.undoRedoChain = {\r\n                    commitHash: commitHash,\r\n                    rootHash: commitObject.root,\r\n                    previous: null,\r\n                    next: null\r\n                };\r\n                return;\r\n            }\r\n\r\n            // Check if the modification already exist, i.e. commit is from undoing or redoing.\r\n            currItem = state.undoRedoChain;\r\n            while (currItem) {\r\n                if (currItem.commitHash === commitHash) {\r\n                    return;\r\n                }\r\n                currItem = currItem.previous;\r\n            }\r\n\r\n            currItem = state.undoRedoChain;\r\n            while (currItem) {\r\n                if (currItem.commitHash === commitHash) {\r\n                    return;\r\n                }\r\n                currItem = currItem.next;\r\n            }\r\n\r\n            newItem = {\r\n                commitHash: commitHash,\r\n                rootHash: commitObject.root,\r\n                previous: state.undoRedoChain,\r\n                next: null\r\n            };\r\n            state.undoRedoChain.next = newItem;\r\n            state.undoRedoChain = newItem;\r\n        }\r\n\r\n        function canUndo() {\r\n            var result = false;\r\n            if (state.undoRedoChain && state.undoRedoChain.previous && state.undoRedoChain.previous.commitHash) {\r\n                result = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function canRedo() {\r\n            var result = false;\r\n            if (state.undoRedoChain && state.undoRedoChain.next) {\r\n                result = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        this.undo = function (branchName, callback) {\r\n            if (canUndo() === false) {\r\n                callback(new Error('unable to make undo'));\r\n                return;\r\n            }\r\n\r\n            state.undoRedoChain = state.undoRedoChain.previous;\r\n\r\n            logState('info', 'undo [before setBranchHash]');\r\n            storage.setBranchHash(state.project.projectId, branchName, state.undoRedoChain.commitHash, state.commitHash,\r\n                function (err) {\r\n                    if (err) {\r\n                        //TODO do we need to handle this? How?\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    logState('info', 'undo [after setBranchHash]');\r\n                    callback(null);\r\n                }\r\n            );\r\n\r\n        };\r\n\r\n        this.redo = function (branchName, callback) {\r\n            if (canRedo() === false) {\r\n                callback(new Error('unable to make redo'));\r\n                return;\r\n            }\r\n\r\n            state.undoRedoChain = state.undoRedoChain.next;\r\n\r\n            logState('info', 'redo [before setBranchHash]');\r\n            storage.setBranchHash(state.project.projectId, branchName, state.undoRedoChain.commitHash, state.commitHash,\r\n                function (err) {\r\n                    if (err) {\r\n                        //TODO do we need to handle this? How?\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    logState('info', 'redo [after setBranchHash]');\r\n                    callback(null);\r\n                }\r\n            );\r\n        };\r\n\r\n        /**\r\n         * Persists all commits in commitQueue and optionally tries to fast-forward the current branch.\r\n         * If not fast-forwarding or it fails to do that - a new branch will be created.\r\n         *\r\n         * @param {commitQueue} commitQueue -\r\n         * @param {object} [options] - optional parameters\r\n         * @param {object} [options.fastForward] - If truthy will attempt to setBranchHash from current branch to last in queue.\r\n         * @param {object} [options.newBranchName=%currentBranch_time-now%] - Name of new branch if needed.\r\n         */\r\n        this.applyCommitQueue = function (commitQueue, options, callback) {\r\n            var branchName = self.getActiveBranchName(),\r\n                projectId = commitQueue[0].projectId,\r\n                firstCommitsParents = commitQueue[0].commitObject.parents,\r\n                lastCommitHash = commitQueue[commitQueue.length - 1].commitObject._id;\r\n\r\n            options = options || {};\r\n            options.newBranchName = options.newBranchName || self.getActiveBranchName() + '_' + Date.now();\r\n\r\n            function createNewBranch() {\r\n                storage.createBranch(projectId, options.newBranchName, lastCommitHash, callback);\r\n            }\r\n\r\n            storage.persistCommits(commitQueue, function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                if (options.fastForward && firstCommitsParents.indexOf(self.getActiveCommitHash()) > -1) {\r\n                    storage.setBranchHash(projectId, branchName, lastCommitHash, self.getActiveCommitHash(),\r\n                        function (err, result) {\r\n                            if (err) {\r\n                                callback(err);\r\n                            } else if (result.status !== CONSTANTS.STORAGE.SYNCED) {\r\n                                createNewBranch();\r\n                            } else {\r\n                                callback();\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    createNewBranch();\r\n                }\r\n            });\r\n        };\r\n\r\n        // REST-like functions and forwarded to storage TODO: add these to separate base class\r\n\r\n        //  Getters\r\n        this.getProjects = function (options, callback) {\r\n            var asObject;\r\n            if (self.isConnected()) {\r\n                if (options.asObject) {\r\n                    asObject = true;\r\n                    delete options.asObject;\r\n                }\r\n                storage.getProjects(options, function (err, result) {\r\n                    var i,\r\n                        resultObj = {};\r\n                    if (err) {\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    if (asObject === true) {\r\n                        for (i = 0; i < result.length; i += 1) {\r\n                            resultObj[result[i]._id] = result[i];\r\n                        }\r\n                        callback(null, resultObj);\r\n                    } else {\r\n                        callback(null, result);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getProjectsAndBranches = function (asObject, callback) {\r\n            //This is kept for the tests.\r\n            self.getProjects({rights: true, branches: true, asObject: asObject}, callback);\r\n        };\r\n\r\n        this.getBranches = function (projectId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getBranches(projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getTags = function (projectId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getTags(projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getCommits = function (projectId, before, number, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getCommits(projectId, before, number, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getHistory = function (projectId, start, number, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getHistory(projectId, start, number, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getLatestCommitData = function (projectId, branchName, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getLatestCommitData(projectId, branchName, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        //  Setters\r\n        this.createProject = function (projectName, parameters, callback) {\r\n            if (self.isConnected()) {\r\n                storage.createProject(projectName, parameters, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.deleteProject = function (projectId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.deleteProject(projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.transferProject = function (projectId, newOwnerId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.transferProject(projectId, newOwnerId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.duplicateProject = function (projectId, projectName, newOwnerId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.duplicateProject(projectId, projectName, newOwnerId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.createBranch = function (projectId, branchName, newHash, callback) {\r\n            if (self.isConnected()) {\r\n                storage.createBranch(projectId, branchName, newHash, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.deleteBranch = function (projectId, branchName, oldHash, callback) {\r\n            if (self.isConnected()) {\r\n                storage.deleteBranch(projectId, branchName, oldHash, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.createTag = function (projectId, tagName, commitHash, callback) {\r\n            if (self.isConnected()) {\r\n                storage.createTag(projectId, tagName, commitHash, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.deleteTag = function (projectId, tagName, callback) {\r\n            if (self.isConnected()) {\r\n                storage.deleteTag(projectId, tagName, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        // Watchers (used in e.g. ProjectNavigator).\r\n        /**\r\n         * Triggers eventHandler(storage, eventData) on PROJECT_CREATED and PROJECT_DELETED.\r\n         *\r\n         * eventData = {\r\n         *    etype: PROJECT_CREATED||DELETED,\r\n         *    projectId: %id of project%\r\n         * }\r\n         *\r\n         * @param {function} eventHandler\r\n         * @param {function} [callback]\r\n         */\r\n        this.watchDatabase = function (eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                    if (err) {\r\n                        logger.error('Problems watching database room');\r\n                    }\r\n                };\r\n            storage.watchDatabase(eventHandler, callback);\r\n        };\r\n\r\n        this.unwatchDatabase = function (eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                    if (err) {\r\n                        logger.error('Problems unwatching database room');\r\n                    }\r\n                };\r\n            storage.unwatchDatabase(eventHandler, callback);\r\n        };\r\n\r\n        /**\r\n         * Triggers eventHandler(storage, eventData) on BRANCH_CREATED, BRANCH_DELETED and BRANCH_HASH_UPDATED\r\n         * for the given projectId.\r\n         *\r\n         *\r\n         * eventData = {\r\n         *    etype: BRANCH_CREATED||DELETED||HASH_UPDATED,\r\n         *    projectId: %id of project%,\r\n         *    branchName: %name of branch%,\r\n         *    newHash: %new commitHash (='' when DELETED)%\r\n         *    oldHash: %previous commitHash (='' when CREATED)%\r\n         * }\r\n         *\r\n         * @param {string} projectId\r\n         * @param {function} eventHandler\r\n         * @param {function} [callback]\r\n         */\r\n        this.watchProject = function (projectId, eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                    if (err) {\r\n                        logger.error('Problems watching project room', projectId);\r\n                    }\r\n                };\r\n            storage.watchProject(projectId, eventHandler, callback);\r\n        };\r\n\r\n        this.unwatchProject = function (projectId, eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                    if (err) {\r\n                        logger.error('Problems unwatching project room', projectId);\r\n                    }\r\n                };\r\n            storage.unwatchProject(projectId, eventHandler, callback);\r\n        };\r\n\r\n        // Internal functions\r\n\r\n        function COPY(object) {\r\n            if (object) {\r\n                return JSON.parse(JSON.stringify(object));\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // Node handling\r\n        this.getNode = function (nodePath) {\r\n            return getNode(nodePath, logger, state, storeNode);\r\n        };\r\n\r\n        this.getAllMetaNodes = function () {\r\n            if (state && state.core && state.nodes && state.nodes[ROOT_PATH]) {\r\n                var metaNodes = state.core.getAllMetaNodes(state.nodes[ROOT_PATH].node),\r\n                    gmeNodes = [],\r\n                    keys = Object.keys(metaNodes || {}),\r\n                    i;\r\n\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    gmeNodes.push(this.getNode(storeNode(metaNodes[keys[i]]), logger, state, storeNode));\r\n                }\r\n\r\n                return gmeNodes;\r\n            }\r\n\r\n            return [];\r\n        };\r\n\r\n        function addLoadUnloadPathToUpdates(paths) {\r\n            var i,\r\n                pathPieces;\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                pathPieces = paths[i].split(CONSTANTS.CORE.PATH_SEP);\r\n                while (pathPieces.length > 1) {\r\n                    state.loading.changedNodes.update[pathPieces.join(CONSTANTS.CORE.PATH_SEP)] = true;\r\n                    pathPieces.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        function getModifiedNodes(newerNodes) {\r\n            var modifiedNodes = [],\r\n                updatedMetaPaths = [],\r\n                metaNodes,\r\n                metaPath,\r\n                updatePath,\r\n                nodePath,\r\n                i;\r\n\r\n            // For the client these rules apply for finding the affected nodes.\r\n            // 1. Updates should be triggered to any node that core.isTypeOf (i.e. mixins accounted for).\r\n            // 2. Root node should always be triggered.\r\n            // 3. loads/unloads should trigger updates for the parent chain.\r\n\r\n            if (state.loading.changedNodes) {\r\n                // 1. Account for mixins - i.e resolve isTypeOf.\r\n                // Gather all meta-nodes that had an update.\r\n                metaNodes = state.core.getAllMetaNodes(newerNodes[ROOT_PATH].node);\r\n                for (updatePath in state.loading.changedNodes.update) {\r\n                    if (metaNodes.hasOwnProperty(updatePath)) {\r\n                        updatedMetaPaths.push(updatePath);\r\n                    }\r\n                }\r\n\r\n                if (updatedMetaPaths.length > 0) {\r\n                    // There are meta-nodes with updates.\r\n                    for (metaPath in metaNodes) {\r\n                        // For all meta nodes..\r\n                        if (metaNodes.hasOwnProperty(metaPath)) {\r\n                            for (i = 0; i < updatedMetaPaths.length; i += 1) {\r\n                                // check if it is a typeOf (includes mixins) any of the updated meta-nodes\r\n                                if (state.core.isTypeOf(metaNodes[metaPath],\r\n                                        metaNodes[updatedMetaPaths[i]]) === true) {\r\n                                    // if so add its path to the update nodes.\r\n                                    state.loading.changedNodes.update[metaPath] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //console.log('Update after meta considered', Object.keys(state.loading.changedNodes.update));\r\n\r\n                // 2. Add Root node\r\n                state.loading.changedNodes.update[ROOT_PATH] = true;\r\n\r\n                // 3. Account for loads and unloads.\r\n                addLoadUnloadPathToUpdates(Object.keys(state.loading.changedNodes.load));\r\n                addLoadUnloadPathToUpdates(Object.keys(state.loading.changedNodes.unload));\r\n\r\n                //console.log('Update after loads and unloads considered',\r\n                //    Object.keys(state.loading.changedNodes.update));\r\n            }\r\n\r\n            for (nodePath in state.nodes) {\r\n                if (state.nodes.hasOwnProperty(nodePath) && newerNodes.hasOwnProperty(nodePath) &&\r\n                    wasNodeUpdated(state.loading.changedNodes, newerNodes[nodePath].node)) {\r\n\r\n                    modifiedNodes.push(nodePath);\r\n                }\r\n            }\r\n            //console.log('NewerNodes, modifiedNodes', Object.keys(newerNodes).length, modifiedNodes.length);\r\n            return modifiedNodes;\r\n        }\r\n\r\n        //this is just a first brute implementation it needs serious optimization!!!\r\n        function fitsInPatternTypes(path, pattern) {\r\n            var i;\r\n\r\n            if (pattern.items && pattern.items.length > 0) {\r\n                for (i = 0; i < pattern.items.length; i += 1) {\r\n                    if (self.isTypeOf(path, pattern.items[i])) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function patternToPaths(patternId, pattern, pathsSoFar) {\r\n            var children,\r\n                subPattern,\r\n                i;\r\n\r\n            if (state.nodes[patternId]) {\r\n                pathsSoFar[patternId] = true;\r\n                if (pattern.children && pattern.children > 0) {\r\n                    children = state.core.getChildrenPaths(state.nodes[patternId].node);\r\n                    subPattern = COPY(pattern);\r\n                    subPattern.children -= 1;\r\n                    for (i = 0; i < children.length; i += 1) {\r\n                        if (fitsInPatternTypes(children[i], pattern)) {\r\n                            patternToPaths(children[i], subPattern, pathsSoFar);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                state.loadError++;\r\n            }\r\n        }\r\n\r\n        function userEvents(userId, modifiedNodes) {\r\n            var newPaths = {},\r\n                startErrorLevel = state.loadError,\r\n                loadedOrUnloaded = {},\r\n                i,\r\n                events = [];\r\n\r\n            for (i in state.users[userId].PATTERNS) {\r\n                if (state.users[userId].PATTERNS.hasOwnProperty(i)) {\r\n                    if (state.nodes[i]) { //TODO we only check pattern if its root is there...\r\n                        patternToPaths(i, state.users[userId].PATTERNS[i], newPaths);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (startErrorLevel !== state.loadError) {\r\n                return; //we send events only when everything is there correctly\r\n            }\r\n\r\n            //deleted items\r\n            for (i in state.users[userId].PATHS) {\r\n                if (!newPaths[i]) {\r\n                    events.push({etype: 'unload', eid: i});\r\n                    loadedOrUnloaded[i] = true;\r\n                }\r\n            }\r\n\r\n            //added items\r\n            for (i in newPaths) {\r\n                if (!state.users[userId].PATHS[i]) {\r\n                    events.push({etype: 'load', eid: i});\r\n                    loadedOrUnloaded[i] = true;\r\n                }\r\n            }\r\n\r\n            //updated items\r\n            for (i = 0; i < modifiedNodes.length; i++) {\r\n                // Check that there wasn't a load or unload event for the node\r\n                if (newPaths[modifiedNodes[i]] && !loadedOrUnloaded[modifiedNodes[i]]) {\r\n                    events.push({etype: 'update', eid: modifiedNodes[i]});\r\n                }\r\n            }\r\n\r\n            state.users[userId].PATHS = newPaths;\r\n\r\n            //this is how the events should go\r\n            if (events.length > 0) {\r\n                if (state.loadError > startErrorLevel) {\r\n                    events.unshift({etype: 'incomplete', eid: null});\r\n                } else {\r\n                    events.unshift({etype: 'complete', eid: null});\r\n                }\r\n            } else {\r\n                events.unshift({etype: 'complete', eid: null});\r\n            }\r\n\r\n            state.users[userId].FN(events);\r\n        }\r\n\r\n        function loadChildrenPattern(core, nodesSoFar, node, level, callback) {\r\n            var path = core.getPath(node),\r\n                childrenPaths = core.getChildrenPaths(node),\r\n                childrenRelids = core.getChildrenRelids(node),\r\n                missing = childrenPaths.length,\r\n                error = null,\r\n                i,\r\n                childLoaded = function (err, child) {\r\n                    if (err || child === null) {\r\n                        error = error || err;\r\n                        missing -= 1;\r\n                        if (missing === 0) {\r\n                            callback(error);\r\n                        }\r\n                    } else {\r\n                        loadChildrenPattern(core, nodesSoFar, child, level - 1, childrenPatternLoaded);\r\n                    }\r\n                },\r\n                childrenPatternLoaded = function (err) {\r\n                    error = error || err;\r\n                    missing -= 1;\r\n                    if (missing === 0) {\r\n                        callback(error);\r\n                    }\r\n                };\r\n\r\n            if (!nodesSoFar[path]) {\r\n                nodesSoFar[path] = {\r\n                    node: node\r\n                };\r\n            }\r\n            if (level > 0) {\r\n                if (missing > 0) {\r\n                    for (i = 0; i < childrenPaths.length; i++) {\r\n                        if (nodesSoFar[childrenPaths[i]]) {\r\n                            loadChildrenPattern(core,\r\n                                nodesSoFar,\r\n                                nodesSoFar[childrenPaths[i]].node,\r\n                                level - 1, childrenPatternLoaded);\r\n                        } else {\r\n                            core.loadChild(node, childrenRelids[i], childLoaded);\r\n                        }\r\n                    }\r\n                } else {\r\n                    callback(error);\r\n                }\r\n            } else {\r\n                callback(error);\r\n            }\r\n        }\r\n\r\n        function loadPattern(core, id, pattern, nodesSoFar, callback) {\r\n            //console.log('LP',id,pattern);\r\n            //var _callback = callback;\r\n            //callback = function(error){\r\n            //    console.log('LPF',id,pattern);\r\n            //    _callback(error);\r\n            //};\r\n\r\n            var base = null,\r\n                baseLoaded = function () {\r\n                    if (pattern.children && pattern.children > 0) {\r\n                        var level = pattern.children;\r\n                        loadChildrenPattern(core, nodesSoFar, base, level, callback);\r\n                    } else {\r\n                        callback(null);\r\n                    }\r\n                };\r\n\r\n            if (nodesSoFar[id]) {\r\n                base = nodesSoFar[id].node;\r\n                baseLoaded();\r\n            } else {\r\n                if (!nodesSoFar[ROOT_PATH]) {\r\n                    logger.error('pattern cannot be loaded if there is no root!!!');\r\n                }\r\n                base = nodesSoFar[ROOT_PATH].node;\r\n\r\n                core.loadByPath(base, id, function (err, node) {\r\n                    var path;\r\n                    if (!err && node && !core.isEmpty(node)) {\r\n                        path = core.getPath(node);\r\n                        if (!nodesSoFar[path]) {\r\n                            nodesSoFar[path] = {\r\n                                node: node\r\n                            };\r\n                        }\r\n                        base = node;\r\n                        baseLoaded();\r\n                    } else {\r\n                        callback(err);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        this.startTransaction = function (msg) {\r\n            if (state.inTransaction) {\r\n                logger.error('Already in transaction, will proceed though..');\r\n            }\r\n            if (state.core) {\r\n                state.inTransaction = true;\r\n                msg = msg || '[';\r\n                saveRoot(msg);\r\n            } else {\r\n                logger.error('Can not start transaction with no core avaliable.');\r\n            }\r\n        };\r\n\r\n        this.completeTransaction = function (msg, callback) {\r\n            state.inTransaction = false;\r\n            if (state.core) {\r\n                msg = msg || ']';\r\n                saveRoot(msg, callback);\r\n            }\r\n        };\r\n\r\n        //territory functions\r\n        this.addUI = function (ui, fn, guid) {\r\n            ASSERT(fn);\r\n            ASSERT(typeof fn === 'function');\r\n            guid = guid || GUID();\r\n            state.users[guid] = {type: 'notused', UI: ui, PATTERNS: {}, PATHS: {}, SENDEVENTS: true, FN: fn};\r\n            return guid;\r\n        };\r\n\r\n        this.removeUI = function (guid) {\r\n            logger.debug('removeUI', guid);\r\n            delete state.users[guid];\r\n        };\r\n\r\n        this._removeAllUIs = function () {\r\n            // This is mainly intended for clean up during testing.\r\n            logger.debug('_removeAllUIs called');\r\n            state.users = {};\r\n        };\r\n\r\n        function reLaunchUsers() {\r\n            var i;\r\n            for (i in state.users) {\r\n                if (state.users.hasOwnProperty(i)) {\r\n                    if (state.users[i].UI.reLaunch) {\r\n                        state.users[i].UI.reLaunch();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function _updateTerritoryAllDone(guid, patterns, error) {\r\n\r\n            logger.debug('updateTerritory related loads finished', {\r\n                metadata: {\r\n                    userId: guid, patterns: patterns, error: error\r\n                }\r\n            });\r\n\r\n            if (state.users[guid]) {\r\n                state.users[guid].PATTERNS = COPY(patterns);\r\n                if (!error) {\r\n                    userEvents(guid, []);\r\n                }\r\n            }\r\n        }\r\n\r\n        function canSwitchStates() {\r\n            if (state.inLoading && state.ongoingTerritoryUpdateCounter === 0 &&\r\n                state.ongoingLoadPatternsCounter === 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function loadingPatternFinished(err) {\r\n            state.loadingStatus = state.loadingStatus || err;\r\n            state.ongoingLoadPatternsCounter -= 1;\r\n\r\n            if (canSwitchStates()) {\r\n                switchStates();\r\n            }\r\n        }\r\n\r\n        this.updateTerritory = function (guid, patterns) {\r\n            var loadRequestCounter = 0,\r\n                updateRequestId = GUID(),\r\n                error = null,\r\n                keys = Object.keys(patterns || {}),\r\n                i,\r\n                patternLoaded = function (err) {\r\n                    error = error || err;\r\n                    if (--loadRequestCounter === 0) {\r\n                        delete state.pendingTerritoryUpdatePatterns[updateRequestId];\r\n                        _updateTerritoryAllDone(guid, patterns, error);\r\n                        state.ongoingTerritoryUpdateCounter -= 1;\r\n                        if (state.ongoingTerritoryUpdateCounter < 0) {\r\n                            logger.error('patternLoaded callback have been called multiple times!!');\r\n                            state.ongoingTerritoryUpdateCounter = 0; //FIXME\r\n                        }\r\n                        if (canSwitchStates()) {\r\n                            switchStates();\r\n                        }\r\n                    }\r\n                };\r\n\r\n            logger.debug('updatingTerritory', {\r\n                metadata: {\r\n                    userId: guid,\r\n                    patterns: patterns\r\n                }\r\n            });\r\n\r\n            if (!state.nodes[ROOT_PATH]) {\r\n                if (state.users[guid]) {\r\n                    logger.debug('early updateTerritory for user[' + guid + ']. No loaded project state yet.');\r\n                    state.users[guid].PATTERNS = COPY(patterns);\r\n                }\r\n                return;\r\n            }\r\n\r\n            //empty territory check\r\n            if (keys.length === 0) {\r\n                _updateTerritoryAllDone(guid, patterns, null);\r\n                return;\r\n            }\r\n\r\n            state.ongoingTerritoryUpdateCounter += 1;\r\n\r\n            //first we have to set the internal counter as the actual load can get synchronous :(\r\n            loadRequestCounter = keys.length;\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (state.inLoading) {\r\n                    state.ongoingLoadPatternsCounter += 1;\r\n                    loadPatternThrottled(state.core,\r\n                        keys[i], patterns[keys[i]], state.loadNodes, loadingPatternFinished);\r\n                } else {\r\n                    //we should save the patterns to a pending directory\r\n                    state.pendingTerritoryUpdatePatterns[updateRequestId] = patterns;\r\n                }\r\n                loadPatternThrottled(state.core, keys[i], patterns[keys[i]], state.nodes, patternLoaded);\r\n            }\r\n\r\n        };\r\n\r\n        function switchStates() {\r\n            //it is safe now to move the loadNodes into nodes,\r\n            // refresh the metaNodes and generate events - all in a synchronous manner!!!\r\n            var modifiedPaths,\r\n                i;\r\n\r\n            //console.time('switchStates');\r\n\r\n            logger.debug('switching project state [C#' +\r\n                state.commitHash + ']->[C#' + state.loading.commitHash + '] : [R#' +\r\n                state.rootHash + ']->[R#' + state.loading.rootHash + ']');\r\n\r\n            //console.time('getModifiedNodes');\r\n            modifiedPaths = getModifiedNodes(state.loadNodes);\r\n            //console.timeEnd('getModifiedNodes');\r\n            state.nodes = state.loadNodes;\r\n            state.loadNodes = {};\r\n            self.getAllMetaNodes(); //This ensures that all language elements can be accessed with getNode\r\n\r\n            state.inLoading = false;\r\n            state.rootHash = state.loading.rootHash;\r\n            state.loading.rootHash = null;\r\n            state.commitHash = state.loading.commitHash;\r\n            state.loading.commitHash = null;\r\n\r\n            checkMetaNameCollision(state.core, state.nodes[ROOT_PATH].node);\r\n            checkMixinErrors(state.core, state.nodes[ROOT_PATH].node);\r\n\r\n            for (i in state.users) {\r\n                if (state.users.hasOwnProperty(i)) {\r\n                    userEvents(i, modifiedPaths);\r\n                }\r\n            }\r\n\r\n            if (state.loadingStatus) {\r\n                state.loading.next(state.loadingStatus);\r\n            } else {\r\n                state.loading.next(null);\r\n            }\r\n\r\n            //console.timeEnd('switchStates');\r\n        }\r\n\r\n        function loading(newRootHash, newCommitHash, changedNodes, callback) {\r\n            var i, j,\r\n                userIds,\r\n                patternPaths,\r\n                patternsToLoad = [];\r\n\r\n            if (state.ongoingLoadPatternsCounter !== 0) {\r\n                callback(new Error('at the start of loading counter should bee zero!!! [' +\r\n                    state.ongoingLoadPatternsCounter + ']'));\r\n                return;\r\n            }\r\n\r\n            state.loadingStatus = null;\r\n            state.loadNodes = {};\r\n            state.loading.rootHash = newRootHash;\r\n            state.loading.commitHash = newCommitHash;\r\n            state.loading.next = callback;\r\n            state.loading.changedNodes = changedNodes;\r\n\r\n            state.core.loadRoot(state.loading.rootHash, function (err, root) {\r\n                if (err) {\r\n                    state.loading.next(err);\r\n                    return;\r\n                }\r\n\r\n                state.inLoading = true;\r\n                state.loadNodes[state.core.getPath(root)] = {\r\n                    node: root\r\n                };\r\n\r\n                //we first only set the counter of patterns but we also generate a completely separate pattern queue\r\n                //as we cannot be sure if all the users will remain at the point of giving the actual load command!\r\n                userIds = Object.keys(state.users);\r\n                for (i = 0; i < userIds.length; i += 1) {\r\n                    state.ongoingLoadPatternsCounter += Object.keys(state.users[userIds[i]].PATTERNS || {}).length;\r\n                    patternPaths = Object.keys(state.users[userIds[i]].PATTERNS || {});\r\n                    for (j = 0; j < patternPaths.length; j += 1) {\r\n                        patternsToLoad.push({\r\n                            id: patternPaths[j],\r\n                            pattern: COPY(state.users[userIds[i]].PATTERNS[patternPaths[j]])\r\n                        });\r\n                    }\r\n                }\r\n                userIds = Object.keys(state.pendingTerritoryUpdatePatterns);\r\n                for (i = 0; i < userIds.length; i += 1) {\r\n                    state.ongoingLoadPatternsCounter +=\r\n                        Object.keys(state.pendingTerritoryUpdatePatterns[userIds[i]] || {}).length;\r\n                    patternPaths = Object.keys(state.pendingTerritoryUpdatePatterns[userIds[i]] || {});\r\n                    for (j = 0; j < patternPaths.length; j += 1) {\r\n                        patternsToLoad.push({\r\n                            id: patternPaths[j],\r\n                            pattern: COPY(state.pendingTerritoryUpdatePatterns[userIds[i]][patternPaths[j]])\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //empty load check\r\n                if (state.ongoingLoadPatternsCounter === 0) {\r\n                    if (canSwitchStates()) {\r\n                        switchStates();\r\n                        reLaunchUsers();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                for (i = 0; i < patternsToLoad.length; i += 1) {\r\n                    loadPatternThrottled(state.core,\r\n                        patternsToLoad[i].id, patternsToLoad[i].pattern, state.loadNodes, loadingPatternFinished);\r\n                }\r\n            });\r\n        }\r\n\r\n        function wasNodeUpdated(changedNodes, node) {\r\n            // Is changedNodes available at all?  If not (undo/redo) emit for all nodes...\r\n            if (!changedNodes) {\r\n                return true;\r\n            }\r\n\r\n            // Did the node have a collection update?\r\n            if (changedNodes.partialUpdate[state.core.getPath(node)] === true) {\r\n                return true;\r\n            }\r\n\r\n            // Did any of the base classes have a non-collection update?\r\n            while (node) {\r\n                if (changedNodes.update[state.core.getPath(node)] === true) {\r\n                    return true;\r\n                }\r\n\r\n                node = state.core.getBase(node);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function cleanUsersTerritories() {\r\n            //look out as the user can remove itself at any time!!!\r\n            var userIds = Object.keys(state.users),\r\n                i,\r\n                j,\r\n                events;\r\n\r\n            for (i = 0; i < userIds.length; i++) {\r\n                if (state.users[userIds[i]]) {\r\n                    events = [{eid: null, etype: 'complete'}];\r\n                    for (j in state.users[userIds[i]].PATHS\r\n                        ) {\r\n                        events.push({etype: 'unload', eid: j});\r\n                    }\r\n                    state.users[userIds[i]].PATTERNS = {};\r\n                    state.users[userIds[i]].PATHS = {};\r\n                    state.users[userIds[i]].SENDEVENTS = true;\r\n                    state.users[userIds[i]].FN(events);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.getUserId = function () {\r\n            throw new Error('Deprecated! Username is not stored in a cookie anymore. If available, use ' +\r\n                'WebGMEGlobal.userInfo, if not the user info is available at GET /api/user');\r\n        };\r\n\r\n        this.importProjectFromFile = function (projectName, branchName, blobHash, ownerId, url, callback) {\r\n            var parameters = {\r\n                command: 'importProjectFromFile',\r\n                projectName: projectName,\r\n                blobHash: blobHash,\r\n                branchName: branchName,\r\n                ownerId: ownerId,\r\n                url: url\r\n            };\r\n\r\n            logger.debug('creating project from package', parameters);\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        };\r\n\r\n        //meta rules checking\r\n        /**\r\n         *\r\n         * @param {string[]} nodePaths - Paths to nodes of which to check.\r\n         * @param includeChildren\r\n         * @param callback\r\n         */\r\n        this.checkMetaRules = function (nodePaths, includeChildren, callback) {\r\n            var parameters = {\r\n                command: 'checkConstraints',\r\n                checkType: 'META', //TODO this should come from a constant\r\n                includeChildren: includeChildren,\r\n                nodePaths: nodePaths,\r\n                commitHash: state.commitHash,\r\n                projectId: state.project.projectId\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n\r\n                self.dispatchEvent(CONSTANTS.META_RULES_RESULT, result);\r\n\r\n                if (callback) {\r\n                    callback(err, result);\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @param {string[]} nodePaths - Paths to nodes of which to check.\r\n         * @param includeChildren\r\n         * @param callback\r\n         */\r\n        this.checkCustomConstraints = function (nodePaths, includeChildren, callback) {\r\n            var parameters = {\r\n                command: 'checkConstraints',\r\n                checkType: 'CUSTOM', //TODO this should come from a constant\r\n                includeChildren: includeChildren,\r\n                nodePaths: nodePaths,\r\n                commitHash: state.commitHash,\r\n                projectId: state.project.projectId\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n\r\n                self.dispatchEvent(CONSTANTS.CONSTRAINT_RESULT, result);\r\n\r\n                if (callback) {\r\n                    callback(err, result);\r\n                }\r\n            });\r\n        };\r\n\r\n        //seed\r\n        this.seedProject = function (parameters, callback) {\r\n            logger.debug('seeding project', parameters);\r\n            parameters.command = 'seedProject';\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        };\r\n\r\n        this.dispatchAddOnNotification = function (data) {\r\n            var notification = {\r\n                severity: data.notification.severity || 'info',\r\n                message: '[AddOn] ' + data.addOnName + ' - ' + data.notification.message\r\n            };\r\n\r\n            logger.debug('addOn notification', data);\r\n            self.dispatchEvent(self.CONSTANTS.NOTIFICATION, notification);\r\n            self.dispatchEvent(self.CONSTANTS.ADD_ON_NOTIFICATION, data);\r\n        };\r\n\r\n        // Constraints\r\n        this.setConstraint = function (path, name, constraintObj) {\r\n            if (state.core && state.nodes[path] && typeof state.nodes[path].node === 'object') {\r\n                state.core.setConstraint(state.nodes[path].node, name, constraintObj);\r\n                saveRoot('setConstraint(' + path + ',' + name + ')');\r\n            }\r\n        };\r\n\r\n        this.delConstraint = function (path, name) {\r\n            if (state.core && state.nodes[path] && typeof state.nodes[path].node === 'object') {\r\n                state.core.delConstraint(state.nodes[path].node, name);\r\n                saveRoot('delConstraint(' + path + 'name' + ')');\r\n            }\r\n        };\r\n\r\n        //automerge\r\n        this.autoMerge = function (projectId, mine, theirs, callback) {\r\n            var command = {\r\n                command: 'autoMerge',\r\n                projectId: projectId,\r\n                mine: mine,\r\n                theirs: theirs\r\n            };\r\n            storage.simpleRequest(command, function (err, result) {\r\n                if (err) {\r\n                    logger.error('autoMerge failed with error', err);\r\n                    callback(err);\r\n                } else {\r\n                    callback(null, result);\r\n                }\r\n            });\r\n        };\r\n\r\n        this.resolve = function (mergeResult, callback) {\r\n            var command = {\r\n                command: 'resolve',\r\n                partial: mergeResult\r\n            };\r\n            storage.simpleRequest(command, function (err, result) {\r\n                if (err) {\r\n                    logger.error('resolve failed with error', err);\r\n                    callback(err);\r\n                } else {\r\n                    callback(null, result);\r\n                }\r\n            });\r\n        };\r\n\r\n        //package save\r\n        this.exportProjectToFile = function (projectId, branchName, commitHash, withAssets, callback) {\r\n            var command = {};\r\n            command.command = 'exportProjectToFile';\r\n            command.projectId = projectId;\r\n            command.branchName = branchName;\r\n            command.commitHash = commitHash;\r\n            command.withAssets = withAssets;\r\n            logger.debug('exportProjectToFile, command', command);\r\n            if (command.projectId && (command.branchName || commitHash)) {\r\n                storage.simpleRequest(command, function (err, result) {\r\n                    if (err && !result) {\r\n                        logger.error('exportProjectToFile failed with error', err);\r\n                        callback(err);\r\n                    } else {\r\n                        callback(err, result);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(new Error('invalid parameters!'));\r\n            }\r\n        };\r\n\r\n        this.exportSelectionToFile = function (projectId, commitHash, selectedIds, withAssets, callback) {\r\n            var command = {};\r\n            command.command = 'exportSelectionToFile';\r\n            command.projectId = projectId;\r\n            command.commitHash = commitHash;\r\n            command.withAssets = withAssets;\r\n            command.paths = selectedIds;\r\n\r\n            logger.debug('exportSelectionToFile, command', command);\r\n            if (command.projectId && commitHash && selectedIds && selectedIds.length > 0) {\r\n                storage.simpleRequest(command, function (err, result) {\r\n                    if (err && !result) {\r\n                        logger.error('exportSelectionToFile failed with error', err);\r\n                        callback(err);\r\n                    } else {\r\n                        callback(err, result);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(new Error('invalid parameters!'));\r\n            }\r\n        };\r\n\r\n        this.importSelectionFromFile = function (projectId, branchName, parentId, blobHash, callback) {\r\n            var parameters = {\r\n                command: 'importSelectionFromFile',\r\n                projectId: projectId,\r\n                blobHash: blobHash,\r\n                parentPath: parentId,\r\n                branchName: branchName\r\n            };\r\n\r\n            logger.debug('import selection from package', parameters);\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        };\r\n\r\n        this.emitStateNotification = function () {\r\n            var data = {\r\n                type: CONSTANTS.STORAGE.CLIENT_STATE_NOTIFICATION,\r\n                state: null,\r\n                projectId: self.getActiveProjectId(),\r\n                branchName: self.getActiveBranchName()\r\n            };\r\n\r\n            if (!data.projectId || !data.branchName) {\r\n                // No need to send event if we're not a branch.\r\n                return;\r\n            }\r\n\r\n            if (typeof self.uiStateGetter === 'function') {\r\n                data.state = self.uiStateGetter();\r\n            }\r\n            logger.info('Sending state notification...');\r\n            storage.sendNotification(data, function (err) {\r\n                if (err) {\r\n                    logger.error('Sending state notification failed', data, err);\r\n                }\r\n\r\n                logger.info('Sending state notification succeeded');\r\n            });\r\n        };\r\n\r\n        this.dispatchConnectedUsersChanged = function (eventData) {\r\n            self.dispatchEvent(CONSTANTS.CONNECTED_USERS_CHANGED, eventData);\r\n        };\r\n\r\n        this.registerUIStateGetter = function (uiStateGetter) {\r\n            self.uiStateGetter = uiStateGetter;\r\n        };\r\n\r\n        this.gmeConfig = gmeConfig;\r\n\r\n        window.addEventListener('error', function (evt) {\r\n            state.exception = {};\r\n            if (evt.error) {\r\n                state.exception.message = evt.error.message;\r\n                state.exception.stack = evt.error.stack;\r\n            } else {\r\n                state.exception = 'No error on event - check browser';\r\n            }\r\n\r\n            self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, CONSTANTS.UNCAUGHT_EXCEPTION);\r\n        });\r\n    }\r\n\r\n    // Inherit from the EventDispatcher\r\n    Client.prototype = Object.create(EventDispatcher.prototype);\r\n    Client.prototype.constructor = Client;\r\n\r\n    return Client;\r\n});\n",
    "/*globals define*/\n/*jshint browser: true, node:true*/\n\n/**\n * Client module for creating, monitoring executor jobs.\n *\n * @author lattmann / https://github.com/lattmann\n * @author ksmyth / https://github.com/ksmyth\n * @author pmeijer / https://github.com/pmeijer\n */\n\n\ndefine('executor/ExecutorClient',['superagent', 'q'], function (superagent, Q) {\n    'use strict';\n\n    /**\n     * Client for creating, monitoring, and receiving output executor jobs.\n     * This client is used by the Executor Workers and some of the API calls are not\n     * meant to be used by \"end users\".\n     *\n     * @param {object} parameters\n     * @param {object} parameters.logger\n     * @constructor\n     * @alias ExecutorClient\n     */\n    var ExecutorClient = function (parameters) {\n        parameters = parameters || {};\n        if (parameters.logger) {\n            this.logger = parameters.logger;\n        } else {\n            var doLog = function () {\n                console.log.apply(console, arguments);\n            };\n            this.logger = {\n                debug: doLog,\n                log: doLog,\n                info: doLog,\n                warn: doLog,\n                error: doLog\n            };\n            console.warn('Since v1.3.0 ExecutorClient requires a logger, falling back on console.log.');\n        }\n\n        this.logger.debug('ctor', {metadata: parameters});\n\n        this.isNodeJS = (typeof window === 'undefined') && (typeof process === 'object');\n        this.isNodeWebkit = (typeof window === 'object') && (typeof process === 'object');\n        //console.log(isNode);\n        if (this.isNodeJS) {\n            this.logger.debug('Running under node');\n            this.server = '127.0.0.1';\n            this.httpsecure = false;\n        }\n\n        this.server = parameters.server || this.server;\n        this.serverPort = parameters.serverPort || this.serverPort;\n        this.httpsecure = (parameters.httpsecure !== undefined) ? parameters.httpsecure : this.httpsecure;\n        if (this.isNodeJS) {\n            this.http = this.httpsecure ? require('https') : require('http');\n        }\n\n        this.origin = '';\n        if (this.httpsecure !== undefined && this.server && this.serverPort) {\n            this.origin = (this.httpsecure ? 'https://' : 'http://') + this.server + ':' + this.serverPort;\n        }\n        this.relativeUrl = '/rest/executor/';\n        this.executorUrl = this.origin + this.relativeUrl;\n\n        // TODO: TOKEN???\n        // TODO: any ways to ask for this or get it from the configuration?\n        if (parameters.executorNonce) {\n            this.executorNonce = parameters.executorNonce;\n        }\n\n        this.logger.debug('origin', this.origin);\n        this.logger.debug('executorUrl', this.executorUrl);\n    };\n\n    /**\n     * Creates a new configuration object for the job execution.\n     *\n     * To make the worker post output either the outputInterval and/or outputSegmentSize must be specified.\n     * <br> - If both are negative (or falsy) no output will be given.\n     * <br> - When both are specified a timeout will be set at start (and after each posted output). If the number of lines\n     *  exceeds outputSegmentSize during that timeout, the output will be posted and a new timeout will be triggered.\n     * <br>\n     * N.B. even though a short outputInterval is set, the worker won't post new output until the responses from\n     * previous posts have returned. Before the job returns with a \"completed\" status code, all queued outputs will be\n     * posted (and the responses will be ensured to have returned).\n     *\n     * @param {string} cmd - command to execute.\n     * @param {string[]} [args] - command arguments.\n     * @param {number} [outputInterval=-1] - max time [ms] between (non-empty) output posts from worker.\n     * @param {number} [outputSegmentSize=-1] - number of lines before new output is posted from worker. (N.B. posted\n     * segments can still contain more number of lines).\n     * @return {object}\n     */\n    ExecutorClient.prototype.getNewExecutorConfig = function (cmd, args, outputInterval, outputSegmentSize) {\n        var config = {\n            cmd: cmd,\n            resultArtifacts: [],\n            outputSegmentSize: typeof outputSegmentSize === 'number' ? outputSegmentSize : -1,\n            outputInterval: typeof outputInterval === 'number' ? outputInterval : -1\n        };\n\n        if (args) {\n            config.args = args;\n        }\n\n        /**\n         *\n         * @param {string} name - name of the artifact.\n         * @param {string[]} [patterns=[]] - inclusive pattern for files to be returned in this artifact.\n         */\n        config.defineResultArtifact = function (name, patterns) {\n            this.resultArtifacts.push({\n                name: name,\n                resultPatterns: patterns || []\n            });\n        };\n\n        return config;\n    };\n\n    /**\n     * Creates a new job.\n     *\n     * @param {object} jobInfo - initial information about the job must contain the hash.\n     * @param {object} jobInfo.hash - a unique id for the job (e.g. the hash of the artifact containing the executor_config.json).\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {@link JobInfo} <b>result</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    ExecutorClient.prototype.createJob = function (jobInfo, callback) {\n        var deferred = Q.defer(),\n            self = this;\n        if (typeof jobInfo === 'string') {\n            jobInfo = { hash: jobInfo }; // old API\n        }\n\n        this.logger.debug('createJob', {metadata: jobInfo});\n        this.sendHttpRequestWithData('POST', this.getCreateURL(jobInfo.hash), jobInfo, function (err, response) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n\n            self.logger.debug('createJob - result', response);\n\n            deferred.resolve(JSON.parse(response));\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    ExecutorClient.prototype.cancelJob = function (jobInfoOrHash, secret, callback) {\n        var deferred = Q.defer(),\n            hash = typeof jobInfoOrHash === 'string' ? jobInfoOrHash : jobInfoOrHash.hash,\n\n            self = this;\n\n        this.logger.debug('cancel', hash);\n        this.sendHttpRequestWithData('POST', this.executorUrl + 'cancel/' + hash, {secret: secret},\n            function (err, response) {\n                if (err) {\n                    deferred.reject(err);\n                    return;\n                }\n\n                self.logger.debug('cancel - result', response);\n                deferred.resolve(response);\n            }\n        );\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    ExecutorClient.prototype.updateJob = function (jobInfo, callback) {\n        var deferred = Q.defer(),\n            self = this;\n        this.logger.debug('updateJob', {metadata: jobInfo});\n        this.sendHttpRequestWithData('POST', this.executorUrl + 'update/' + jobInfo.hash, jobInfo,\n            function (err, response) {\n                if (err) {\n                    deferred.reject(err);\n                    return;\n                }\n\n                self.logger.debug('updateJob - result', response);\n                deferred.resolve(response);\n            }\n        );\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Retrieves the current state of the job in form of a {@link JobInfo}\n     * @param {string} hash - unique id for the job (e.g. the hash of the artifact containing the executor_config.json).\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {@link JobInfo} <b>jobInfo</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    ExecutorClient.prototype.getInfo = function (hash, callback) {\n        var deferred = Q.defer(),\n            self = this;\n        this.logger.debug('getInfo', hash);\n        this.sendHttpRequest('GET', this.getInfoURL(hash), function (err, response) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n\n            self.logger.debug('getInfo - result', response);\n            deferred.resolve(JSON.parse(response));\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    ExecutorClient.prototype.getAllInfo = function (callback) {\n        var deferred = Q.defer(),\n            self = this;\n        this.logger.debug('getAllInfo');\n        this.sendHttpRequest('GET', this.executorUrl, function (err, response) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n\n            self.logger.debug('getAllInfo - result', response);\n            deferred.resolve(JSON.parse(response));\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    ExecutorClient.prototype.getInfoByStatus = function (status, callback) {\n        var deferred = Q.defer(),\n            self = this;\n        this.logger.debug('getInfoByStatus', status);\n        this.sendHttpRequest('GET', this.executorUrl + '?status=' + status, function (err, response) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n            self.logger.debug('getInfoByStatus - result', response);\n            deferred.resolve(JSON.parse(response));\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    ExecutorClient.prototype.getWorkersInfo = function (callback) {\n        var deferred = Q.defer(),\n            self = this;\n        this.logger.debug('getWorkersInfo');\n        this.sendHttpRequest('GET', this.executorUrl + 'worker', function (err, response) {\n            if (err) {\n                deferred.reject(err);\n                return;\n            }\n            self.logger.debug('getWorkersInfo - result', response);\n            deferred.resolve(JSON.parse(response));\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    /**\n     * Retrieves the output associated with jobHash, to limit the output pass start and/or end.\n     * The outputs are identified by 0, 1, 2, ...\n     * @param {string} hash - hash of job related to output.\n     * @param {number} [start] - number/id of the output segment to start from (inclusive).\n     * @param {number} [end] - number/id of segment to end at (exclusive).\n     * @param {function} [callback] - if provided no promise will be returned.\n     *\n     * @return {external:Promise}  On success the promise will be resolved with {@link OutputInfo} <b>result</b>.<br>\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\n     */\n    ExecutorClient.prototype.getOutput = function (hash, start, end, callback) {\n        var deferred = Q.defer(),\n            url = this.executorUrl + 'output/' + hash,\n            query = '';\n\n        if (typeof start === 'number') {\n            query += '?start=' + start;\n        }\n\n        if (typeof end === 'number') {\n            if (query) {\n                query += '&end=' + end;\n            } else {\n                query += '?end=' + end;\n            }\n        }\n\n        url += query;\n\n        this.logger.debug('getOutput, url=', url);\n\n        this.sendHttpRequest('GET', url, function (err, response) {\n            if (err) {\n                deferred.reject(err);\n            } else {\n                deferred.resolve(JSON.parse(response));\n            }\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    ExecutorClient.prototype.sendOutput = function (outputInfo, callback) {\n        var deferred = Q.defer(),\n            url = this.executorUrl + 'output/' + outputInfo.hash;\n\n        this.logger.debug('sendOutput', outputInfo._id);\n\n        this.sendHttpRequestWithData('POST', url, outputInfo, function (err) {\n            if (err) {\n                deferred.reject(err);\n            } else {\n                deferred.resolve();\n            }\n        });\n\n        return deferred.promise.nodeify(callback);\n    };\n\n    //<editor-fold desc=\"Helper methods\">\n    ExecutorClient.prototype.getInfoURL = function (hash) {\n        return this.origin + this.getRelativeInfoURL(hash);\n    };\n\n    ExecutorClient.prototype.getRelativeInfoURL = function (hash) {\n        var metadataBase = this.relativeUrl + 'info';\n        if (hash) {\n            return metadataBase + '/' + hash;\n        } else {\n            return metadataBase;\n        }\n    };\n\n    ExecutorClient.prototype.getCreateURL = function (hash) {\n        return this.origin + this.getRelativeCreateURL(hash);\n    };\n\n    ExecutorClient.prototype.getRelativeCreateURL = function (hash) {\n        var metadataBase = this.relativeUrl + 'create';\n        if (hash) {\n            return metadataBase + '/' + hash;\n        } else {\n            return metadataBase;\n        }\n    };\n\n    ExecutorClient.prototype.sendHttpRequest = function (method, url, callback) {\n        return this.sendHttpRequestWithData(method, url, null, callback);\n    };\n\n    ExecutorClient.prototype.sendHttpRequestWithData = function (method, url, data, callback) {\n        var req = new superagent.Request(method, url);\n        if (this.executorNonce) {\n            req.set('x-executor-nonce', this.executorNonce);\n        }\n        if (data) {\n            req.send(data);\n        }\n        req.end(function (err, res) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            if (res.status > 399) {\n                callback(res.status, res.text);\n            } else {\n                callback(null, res.text);\n            }\n        });\n    };\n\n    ExecutorClient.prototype._ensureAuthenticated = function (options, callback) {\n        //this function enables the session of the client to be authenticated\n        //TODO currently this user does not have a session, so it has to upgrade the options always!!!\n//        if (options.headers) {\n//            options.headers.webgmeclientsession = this._clientSession;\n//        } else {\n//            options.headers = {\n//                'webgmeclientsession': this._clientSession\n//            }\n//        }\n        callback(null, options);\n    };\n    //</editor-fold>\n\n    return ExecutorClient;\n});\n\n",
    "/*globals define*/\ndefine('js/Dialogs/PluginConfig/PluginConfigDialog',[], function () {\n    'use strict';\n});\n\n",
    "/*globals define*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('common/util/util',[], function () {\n    'use strict';\n\n    function isTrueObject(value) {\n        return typeof value === 'object' && value !== null && value instanceof Array === false;\n    }\n\n    /**\n     * Overwrites/augments values in toData with values from fromData.\n     *\n     * @param {object} toData - Object that will be updated with matched keys from toData.\n     * @param {object} fromData - Object that will overwrite the keys of toData.\n     */\n    function updateFieldsRec(toData, fromData) {\n        var keys = Object.keys(fromData),\n            i;\n\n        for (i = 0; i < keys.length; i += 1) {\n            if (isTrueObject(fromData[keys[i]]) && isTrueObject(toData[keys[i]])) {\n                updateFieldsRec(toData[keys[i]], fromData[keys[i]]);\n            } else {\n                toData[keys[i]] = fromData[keys[i]];\n            }\n        }\n    }\n\n    function orderStringArrayByElementLength(strArray) {\n        var ordered = [],\n            i, j, index;\n\n        for (i = 0; i < strArray.length; i += 1) {\n            index = -1;\n            j = 0;\n            while (index === -1 && j < ordered.length) {\n                if (ordered[j].length > strArray[i].length) {\n                    index = j;\n                }\n\n                j += 1;\n            }\n\n            if (index === -1) {\n                ordered.push(strArray[i]);\n            } else {\n                ordered.splice(index, 0, strArray[i]);\n            }\n        }\n\n        return ordered;\n    }\n\n    function indexOfUntil(items, item, maxIndex) {\n        var len = items.length > maxIndex ? maxIndex : items.length;\n        while (len--) {\n            if (items[len] === item) {\n                return len;\n            }\n        }\n\n        return -1;\n    }\n\n    function indexOfUntilInObjectArray(items, item, maxIndex, key) {\n        var len = items.length > maxIndex ? maxIndex : items.length;\n        while (len--) {\n            if (items[len][key] === item[key]) {\n                return len;\n            }\n        }\n\n        return -1;\n    }\n\n    function extendArrayUnique(base, extension) {\n        var originalLength = base.length,\n            extensionLen = extension.length,\n            item;\n\n        while (extensionLen--) {\n            item = extension[extensionLen];\n            if (indexOfUntil(base, item, originalLength) === -1) {\n                base.push(item);\n            }\n        }\n\n    }\n\n    function extendObjectArrayUnique(base, extension, key) {\n        var originalLength = base.length,\n            extensionLen = extension.length,\n            item;\n\n        while (extensionLen--) {\n            item = extension[extensionLen];\n            if (indexOfUntilInObjectArray(base, item, originalLength, key) === -1) {\n                base.push(item);\n            }\n        }\n\n    }\n\n    return {\n        isTrueObject: isTrueObject,\n        updateFieldsRec: updateFieldsRec,\n        orderStringArrayByElementLength: orderStringArrayByElementLength,\n        extendArrayUnique: extendArrayUnique,\n        extendObjectArrayUnique: extendObjectArrayUnique\n    };\n});\n",
    "/*globals define, WebGMEGlobal*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('js/Utils/ComponentSettings',['common/util/util', 'superagent'], function (UTIL, superagent) {\n\n    'use strict';\n\n    /**\n     * Updates the defaultSettings based on passed settings.\n     *\n     * @param {object} defaultSettings - hardcoded in the component.\n     * @param {object} [deploymentSettings] - defined on the server at config/components.json.\n     * @param {object} [userSettings] - defined for the specific user.\n     */\n    function resolveSettings(defaultSettings, deploymentSettings, userSettings) {\n        if (deploymentSettings && typeof deploymentSettings === 'object') {\n            UTIL.updateFieldsRec(defaultSettings, deploymentSettings);\n        }\n\n        if (userSettings && typeof userSettings === 'object') {\n            UTIL.updateFieldsRec(defaultSettings, userSettings);\n        }\n\n        return defaultSettings;\n    }\n\n    /**\n     * Updates the defaultSettings trying ot extract values from WebGMEGlobal.\n     *\n     * @param {object} defaultSettings - hardcoded in the component.\n     * @param {string} componentID - UniqueId for component.\n     */\n    function resolveWithWebGMEGlobal(defaultSettings, componentId) {\n        var deploymentSettings,\n            userSettings;\n\n        if (typeof WebGMEGlobal === 'undefined') {\n            throw new Error('WebGMEGlobal must be defined for this function, use resolveSettings');\n        }\n\n        deploymentSettings = WebGMEGlobal.componentSettings && WebGMEGlobal.componentSettings[componentId];\n        userSettings = WebGMEGlobal.userInfo && WebGMEGlobal.userInfo.settings &&\n            WebGMEGlobal.userInfo.settings[componentId];\n\n        return resolveSettings(defaultSettings, deploymentSettings, userSettings);\n    }\n\n\n    function updateComponentSettings(componentId, newSettings, callback) {\n        superagent.patch('api/user/settings/' + componentId)\n            .send(newSettings)\n            .end(function (err, res) {\n                if (err || res.status !== 200) {\n                    callback(err || new Error('Did not return status 200: ' + res.status));\n                    return;\n                }\n\n                callback(null, res.body);\n            });\n    }\n\n    function overwriteComponentSettings(componentId, newSettings, callback) {\n        superagent.put('api/user/settings/' + componentId)\n            .send(newSettings)\n            .end(function (err, res) {\n                if (err || res.status !== 200) {\n                    callback(err || new Error('Did not return status 200: ' + res.status));\n                    return;\n                }\n\n                callback(null, res.body);\n            });\n    }\n\n    return {\n        resolveSettings: resolveSettings,\n        resolveWithWebGMEGlobal: resolveWithWebGMEGlobal,\n        updateComponentSettings: updateComponentSettings,\n        overwriteComponentSettings: overwriteComponentSettings\n    };\n});\n",
    "/*globals define, WebGMEGlobal*/\n/*jshint browser: true*/\n\n/**\n * @author rkereskenyi / https://github.com/rkereskenyi\n * @author lattmann / https://github.com/lattmann\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('js/Utils/InterpreterManager',[\n    'plugin/PluginResult',\n    'plugin/PluginMessage',\n    'js/Dialogs/PluginConfig/PluginConfigDialog',\n    'js/logger',\n    'js/Utils/ComponentSettings'\n], function (PluginResult, PluginMessage, PluginConfigDialog, Logger, ComponentSettings) {\n\n    'use strict';\n\n    var InterpreterManager = function (client, gmeConfig) {\n        this._client = client;\n        //this._manager = new PluginManagerBase();\n        this.gmeConfig = gmeConfig;\n        this._savedConfigs = {};\n        this.logger = Logger.create('gme:InterpreterManager', gmeConfig.client.log);\n        this.logger.debug('InterpreterManager ctor');\n    };\n\n    InterpreterManager.prototype.GLOBAL_OPTIONS = 'Global Options';\n\n    InterpreterManager.prototype.getPluginErrorResult = function (pluginName, message, startTime, projectId) {\n        var pluginResult = new PluginResult(),\n            pluginMessage = new PluginMessage();\n        pluginMessage.severity = 'error';\n        pluginMessage.message = message;\n        pluginResult.setSuccess(false);\n        pluginResult.setPluginName(pluginName);\n        pluginResult.setProjectId(projectId || this._client.getActiveProjectId() || 'N/A');\n        pluginResult.addMessage(pluginMessage);\n        pluginResult.setStartTime(startTime);\n        pluginResult.setFinishTime((new Date()).toISOString());\n        pluginResult.setError(pluginMessage.message);\n\n        return pluginResult;\n    }\n\n    /**\n     *\n     * @param {object} metadata - metadata of plugin to be executed.\n     * @param {function(PluginResult|boolean)} callback - If canceled from dialog returns with false.\n     */\n    InterpreterManager.prototype.configureAndRun = function (metadata, callback) {\n        var self = this,\n            configDialog = new PluginConfigDialog({client: this._client}),\n            context = self._client.getCurrentPluginContext(metadata.id),\n            globalOptions = this.getGlobalOptions(metadata, {namespace: context.managerConfig.namespace});\n\n        if (globalOptions instanceof PluginResult) {\n            callback(globalOptions);\n            return;\n        }\n\n        configDialog.show(globalOptions, metadata, this.getStoredConfiguration(metadata),\n            function (globalConfig, pluginConfig, storeInUser) {\n                var startTime = (new Date()).toISOString();\n\n                function execCallback(err, result) {\n                    if (err) {\n                        self.logger.error(err);\n                        if (result) {\n                            callback(new PluginResult(result));\n                        } else {\n                            callback(self.getPluginErrorResult(metadata.id, err.message, startTime,\n                                context.managerConfig.project.projectId));\n                        }\n                    } else {\n                        callback(new PluginResult(result));\n                    }\n                }\n\n                if (globalConfig === false) {\n                    // Canceled from dialog..\n                    callback(false);\n                    return;\n                }\n\n                // Store the config in memory for this session.\n                self._savedConfigs[metadata.id] = pluginConfig;\n\n                if (storeInUser === true) {\n                    self.saveSettingsInUser(metadata, pluginConfig);\n                }\n\n                context.pluginConfig = pluginConfig;\n                context.managerConfig.namespace = globalConfig.namespace;\n\n                // Before executing the plugin - make sure the client is in SYNC.\n                // This can be skipped if the plugin is read-only and executed on\n                // the client.\n                var readOnlyClient = !globalConfig.runOnServer && !metadata.writeAccessRequired,\n                    isOutOfSync = self._client.getBranchStatus() &&\n                        self._client.getBranchStatus() !== self._client.CONSTANTS.BRANCH_STATUS.SYNC;\n\n                if (!readOnlyClient && isOutOfSync) {\n                    callback(self.getPluginErrorResult(metadata.id, 'Not allowed ' +\n                        'to invoke server plugin while local branch is AHEAD or ' +\n                        'PULLING changes from server.', startTime));\n                    return;\n                }\n\n                if (globalConfig.runOnServer === true) {\n                    self._client.runServerPlugin(metadata.id, context, execCallback);\n                } else {\n                    self._client.runBrowserPlugin(metadata.id, context, execCallback);\n                }\n            }\n        );\n    };\n\n    InterpreterManager.prototype.getGlobalOptions = function (pluginMetadata, defaults) {\n        var runOption = {\n                name: 'runOnServer',\n                displayName: 'Execute on Server',\n                description: '',\n                value: defaults.hasOwnProperty('runOnServer') ? defaults.runOnServer : false,\n                valueType: 'boolean',\n                readOnly: false\n            },\n            namespace = {\n                name: 'namespace',\n                displayName: 'Used Namespace',\n                description: 'The namespace the plugin should run under.',\n                value: defaults.hasOwnProperty('namespace') ? defaults.namespace : '',\n                valueType: 'string',\n                valueItems: [],\n                readOnly: false\n            },\n            result = [],\n            serverAllowedGlobal = this.gmeConfig.plugin.allowServerExecution === true,\n            serverAllowedPlugin = !(pluginMetadata.disableServerSideExecution),\n            browserAllowedGlobal = this.gmeConfig.plugin.allowBrowserExecution === true,\n            browserAllowedPlugin = !(pluginMetadata.disableBrowserSideExecution),\n            errorMessage;\n\n        if (serverAllowedGlobal === false && browserAllowedGlobal === false) {\n            errorMessage = 'Plugin execution is disabled!';\n        } else if (serverAllowedPlugin === false && browserAllowedPlugin === false) {\n            errorMessage = 'This plugin cannot run on the server nor in the browser!?';\n        } else if (browserAllowedGlobal) {\n            if (serverAllowedGlobal) {\n                if (browserAllowedPlugin) {\n                    if (serverAllowedPlugin) {\n                        // This is the default\n                    } else {\n                        runOption.readOnly = true;\n                        runOption.description = 'This plugin can not run on the server.';\n                    }\n                } else {\n                    runOption.readOnly = true;\n                    runOption.value = true;\n                    runOption.description = 'This plugin can not run in the browser.';\n                }\n            } else {\n                if (browserAllowedPlugin) {\n                    runOption.readOnly = true;\n                    runOption.description = 'Server execution is disabled.';\n                } else {\n                    errorMessage = 'This plugin can only run on the server which is disabled!';\n                }\n            }\n        } else {\n            if (browserAllowedPlugin) {\n                runOption.readOnly = true;\n                runOption.value = true;\n                runOption.description = 'Browser execution is disabled.';\n            } else {\n                errorMessage = 'This plugin can only run on the server which is disabled!';\n            }\n        }\n\n        if (errorMessage) {\n            return this.getPluginErrorResult(pluginMetadata.id, errorMessage, (new Date()).toISOString());\n        } else {\n            result.push(runOption);\n            namespace.valueItems = this._client.getLibraryNames();\n\n            if (namespace.valueItems.length > 0) {\n                namespace.valueItems.unshift('');\n                result.push(namespace);\n            }\n\n            return result;\n        }\n    };\n\n    InterpreterManager.prototype.getStoredConfiguration = function (pluginMetadata) {\n        var config,\n            componentId = this.getPluginComponentId(pluginMetadata);\n\n        // Always use the configuration stored from a previous run if it's available.\n        if (this._savedConfigs.hasOwnProperty(pluginMetadata.id)) {\n            config = this._savedConfigs[pluginMetadata.id];\n        } else if (typeof WebGMEGlobal !== 'undefined') {\n            config = {};\n            ComponentSettings.resolveWithWebGMEGlobal(config, componentId);\n        }\n\n        return config;\n    };\n\n    InterpreterManager.prototype.saveSettingsInUser = function (pluginMetadata, pluginConfig, callback) {\n        var self = this,\n            componentId = this.getPluginComponentId(pluginMetadata.id);\n\n        this.logger.debug('Saving plugin config in user', componentId, pluginConfig);\n\n        ComponentSettings.overwriteComponentSettings(componentId, pluginConfig, function (err, newSettings) {\n            if (callback) {\n                if (err) {\n                    callback(err);\n                } else {\n                    callback(null, newSettings);\n                }\n            } else {\n                if (err) {\n                    self.logger.error(new Error('Failed storing settings for user'), err);\n                } else {\n                    self.logger.debug('Stored new settings for plugin at', componentId, newSettings);\n                }\n            }\n        });\n    };\n\n    InterpreterManager.prototype.getPluginComponentId = function (pluginMetadata) {\n        var componentId = 'Plugin_' + pluginMetadata.id + '__' + pluginMetadata.version.split('.').join('_');\n        this.logger.debug('Resolved componentId for plugin \"' + componentId + '\"');\n        return componentId;\n    };\n\n    //TODO: Somehow it would feel more right if we do run in async mode, but if not then we should provide getState and\n    //TODO: getResult synchronous functions as well.\n\n    return InterpreterManager;\n});\n\n",
    "/*globals define*/\n/*jshint browser: true*/\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\nvar CREATE_BRANCH = false;\n//PROJECT_NAME = 'IBug',\n//BRANCH_NAME = 'master',\n//NEW_BRANCH_HASH = '#d2d00cdd50a1ca144666a52a471af59d280ac751';\n\ndefine('teststorage/teststorage',[\n    'js/logger',\n    'common/storage/browserstorage',\n    'common/core/core',\n    'common/storage/constants'\n], function (Logger, Storage, Core, CONSTANTS) {\n    'use strict';\n    function Client(gmeConfig, projectName, branchName) {\n        var logger = Logger.create('gme:client', gmeConfig.client.log),\n            storage = Storage.getStorage(logger, gmeConfig),\n            currRootNode,\n            currCommitObject,\n            intervalId,\n            core,\n            PROJECT_NAME = projectName,\n            BRANCH_NAME = branchName;\n\n        logger.debug('ctor');\n        function loadChildrenAndSetAttribute(rootNode, commitObject) {\n            core.loadChildren(rootNode, function (err, children) {\n                if (err) {\n                    throw new Error(err);\n                }\n                logger.debug('children loaded', children);\n                //children.map(function (child) {\n                var newPos;\n                logger.debug('child name', core.getAttribute(children[0], 'name'));\n                //if (core.getAttribute(children[0], 'name') === 'newName') {\n                newPos = {x: 70 + getRandomInt(0, 100), y: 70 + getRandomInt(0, 100)};\n                core.setRegistry(children[0], 'position', newPos);\n                logger.debug('setting new position', newPos);\n                //}\n                //});\n                currRootNode = rootNode;\n                core.persist(rootNode, function (err, persisted) {\n                    if (err) {\n                        throw new Error(err);\n                    }\n                    logger.debug('cb persist data', persisted);\n                    currCommitObject = storage.makeCommit(PROJECT_NAME, BRANCH_NAME,\n                        [commitObject._id],\n                        persisted.rootHash,\n                        persisted.objects,\n                        'First commit from new storage'\n                    );\n\n                });\n                //logger.debug('persistData', persistData);\n                //core.loadChildren(rootNode, function (err, children) {\n                //    if (err) {\n                //        throw new Error(err);\n                //    }\n                //    logger.debug('children loaded again (should come from cache)', children);\n                //});\n            });\n        }\n\n        storage.open(function (status) {\n            logger.debug('storage is open');\n            if (status === CONSTANTS.CONNECTED) {\n                storage.getProjectNames({}, function (err, projectNames) {\n                    if (err) {\n                        throw new Error(err);\n                    }\n                    if (projectNames.indexOf(projectName) < 0) {\n                        throw new Error('Project does not exist');\n                    }\n                    logger.debug(projectNames);\n                    storage.watchProject(PROJECT_NAME, function (_ws, data) {\n                        logger.debug('watchProject event', data);\n                    });\n                    storage.openProject(PROJECT_NAME, function (err, project, branches) {\n                        if (err) {\n                            throw new Error(err);\n                        }\n                        var updateHandler = function (newCommitData) {\n                            logger.debug('updateHandler invoked', newCommitData);\n                            logger.debug('would call loadNodes...');\n                            currCommitObject = newCommitData.commitObject;\n                            core.loadRoot(newCommitData.commitObject.root, function (err, rootNode) {\n                                if (err) {\n                                    throw new Error(err);\n                                }\n                                logger.debug('rootNode loaded', rootNode);\n                                currRootNode = rootNode;\n                                core.loadChildren(rootNode, function (err, children) {\n                                    if (err) {\n                                        throw new Error(err);\n                                    }\n                                    logger.debug('children loaded', children);\n                                    children.map(function (child) {\n                                        logger.debug('child name', core.getAttribute(child, 'name'));\n                                        if (core.getAttribute(child, 'name') === 'newName') {\n                                            logger.debug('Got new position', core.getRegistry(child, 'position'));\n                                        }\n                                    });\n                                });\n                            });\n                        };\n                        var commitHandler = function (commitQueue, result, callback) {\n                            logger.debug('commitHandler', result);\n                            if (result.status === CONSTANTS.SYNCH) {\n                                callback(true); // All is fine, continue with the commitQueue..\n                            } else if (result.status === CONSTANTS.FORKED) {\n                                logger.debug('You got forked, queued commits', commitQueue);\n                                callback(false);\n                            } else {\n                                throw new Error('Unexpected result', result);\n                            }\n                        };\n                        logger.debug('openProject project', project);\n                        logger.debug('openProject returned branches', branches);\n                        storage.openBranch(PROJECT_NAME, BRANCH_NAME, updateHandler, commitHandler,\n                            function (err, latestCommit) {\n                                if (err) {\n                                    throw new Error(err);\n                                }\n                                logger.debug('latestCommit', latestCommit);\n                                currCommitObject = latestCommit.commitObject;\n                                core = new Core(project, {\n                                    globConf: gmeConfig,\n                                    logger: logger.fork('core')\n                                });\n                                logger.debug('core instantiated');\n                                core.loadRoot(latestCommit.commitObject.root, function (err, rootNode) {\n                                    if (err) {\n                                        throw new Error(err);\n                                    }\n                                    logger.debug('rootNode loaded', rootNode);\n                                    loadChildrenAndSetAttribute(rootNode, latestCommit.commitObject);\n                                });\n                            }\n                        );\n                        //storage.deleteBranch(PROJECT_NAME, 'b535', branches['b535'], function () {\n                        //    logger.debug('branch deleted', arguments);\n                        //});\n                    });\n                    if (CREATE_BRANCH) {\n                        storage.getBranches(PROJECT_NAME, {}, function (err, data) {\n                            if (err) {\n                                throw new Error(err);\n                            }\n                            logger.debug('getBranches return', data);\n                        });\n                        var newBranchName = 'br' + getRandomInt(2, 9999);\n                        logger.debug('will create', newBranchName);\n                        setTimeout(function () {\n                            storage.createBranch(PROJECT_NAME,\n                                newBranchName,\n                                NEW_BRANCH_HASH,\n                                function (err) {\n                                    if (err) {\n                                        throw new Error(err);\n                                    }\n                                    storage.getBranches(PROJECT_NAME, {}, function (err, data) {\n                                        if (err) {\n                                            throw new Error(err);\n                                        }\n                                        logger.debug('getBranches after create returned', data);\n                                    });\n                                });\n                        }, 2000);\n                    }\n                });\n            } else if (status === CONSTANTS.RECONNECTED) {\n                logger.debug('Reconnected!');\n                clearInterval(intervalId);\n            } else if (status === CONSTANTS.DISCONNECTED) {\n                logger.debug('Got disconnect, waiting for reconnect...');\n                intervalId = setInterval(function () {\n                    loadChildrenAndSetAttribute(currRootNode, currCommitObject);\n                }, 2000);\n            } else if (status === CONSTANTS.ERROR) {\n                throw new Error('Could not connect');\n            }\n        });\n\n        function getRandomInt(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n    }\n\n    return Client;\n});\n",
    "/*globals define, document, console, window, GME, docReady, setTimeout*/\n/*jshint browser:true, evil:true*/\n\n/**\n * @author kecso / https://github.com/kecso\n * @author lattmann / https://github.com/lattmann\n * @author nabana / https://github.com/nabana\n * @author ksmyth / https://github.com/ksmyth\n * @author pmeijer / https://github.com/pmeijer\n */\n\ndefine('webgme.classes', [\n    'client/js/client',\n    'blob/BlobClient',\n    'executor/ExecutorClient',\n    'js/Utils/InterpreterManager',\n    'common/core/core',\n    'common/storage/browserstorage',\n    'js/logger',\n    'lib/superagent/superagent',\n    'teststorage/teststorage'\n], function (Client,\n             BlobClient,\n             ExecutorClient,\n             InterpreterManager,\n             Core,\n             Storage,\n             Logger,\n             superagent,\n             TestStorage) {\n\n    'use strict';\n    // Setting global classes\n\n    GME.classes.Client = Client;\n    GME.classes.BlobClient = BlobClient;\n    GME.classes.ExecutorClient = ExecutorClient;\n    GME.classes.InterpreterManager = InterpreterManager;\n    GME.classes.Core = Core;\n    GME.classes.Storage = Storage;\n    GME.classes.Logger = Logger;\n    GME.classes.TestStorage = TestStorage;\n\n    // Exposing built in libraries\n    GME.utils.superagent = superagent;\n\n    // Pure JavaScript equivalent to jQuery's $.ready() from https://github.com/jfriend00/docReady\n\n    (function (funcName, baseObj) {\n        // The public function name defaults to window.docReady\n        // but you can pass in your own object and own function name and those will be used\n        // if you want to put them in a different namespace\n        funcName = funcName || 'docReady';\n        baseObj = baseObj || window;\n        var readyList = [];\n        var readyFired = false;\n        var readyEventHandlersInstalled = false;\n\n        // call this when the document is ready\n        // this function protects itself against being called more than once\n        function ready() {\n            if (!readyFired) {\n                // this must be set to true before we start calling callbacks\n                readyFired = true;\n                for (var i = 0; i < readyList.length; i++) {\n                    // if a callback here happens to add new ready handlers,\n                    // the docReady() function will see that it already fired\n                    // and will schedule the callback to run right after\n                    // this event loop finishes so all handlers will still execute\n                    // in order and no new ones will be added to the readyList\n                    // while we are processing the list\n                    readyList[i].fn.call(window, readyList[i].ctx);\n                }\n                // allow any closures held by these functions to free\n                readyList = [];\n            }\n        }\n\n        function readyStateChange() {\n            if (document.readyState === 'complete') {\n                ready();\n            }\n        }\n\n        // This is the one public interface\n        // docReady(fn, context);\n        // the context argument is optional - if present, it will be passed\n        // as an argument to the callback\n        baseObj[funcName] = function (callback, context) {\n            // if ready has already fired, then just schedule the callback\n            // to fire asynchronously, but right away\n            if (readyFired) {\n                setTimeout(function () {\n                    callback(context);\n                }, 1);\n                return;\n            } else {\n                // add the function and context to the list\n                readyList.push({fn: callback, ctx: context});\n            }\n            // if document already ready to go, schedule the ready function to run\n            if (document.readyState === 'complete') {\n                setTimeout(ready, 1);\n            } else if (!readyEventHandlersInstalled) {\n                // otherwise if we don't have event handlers installed, install them\n                if (document.addEventListener) {\n                    // first choice is DOMContentLoaded event\n                    document.addEventListener('DOMContentLoaded', ready, false);\n                    // backup is window load event\n                    window.addEventListener('load', ready, false);\n                } else {\n                    // must be IE\n                    document.attachEvent('onreadystatechange', readyStateChange);\n                    window.attachEvent('onload', ready);\n                }\n                readyEventHandlersInstalled = true;\n            }\n        };\n    })('docReady', window);\n\n    // See if there is handler attached to body tag when ready\n\n    var evalOnGmeInit = function () {\n        if (document.body.getAttribute('on-gme-init')) {\n            eval(document.body.getAttribute('on-gme-init'));\n        } else {\n            console.warn('To use GME, define a javascript function and set the body ' +\n            'element\\'s on-gme-init property.');\n        }\n    };\n\n    // wait for document.readyState !== 'loading' and getGmeConfig\n    var stillLoading = 2;\n    var somethingFinishedLoading = function () {\n        if (--stillLoading === 0) {\n            evalOnGmeInit();\n        }\n    };\n\n    if (document.readyState === 'loading') {\n        docReady(function () {\n            somethingFinishedLoading();\n        });\n    } else {\n        somethingFinishedLoading();\n    }\n\n\n    (function getGmeConfig() {\n        var http = new XMLHttpRequest(),\n            configUrl = window.location.origin + '/gmeConfig.json';\n        http.onreadystatechange = function () {\n            if (http.readyState === 4 && http.status === 200) {\n                GME.gmeConfig = JSON.parse(http.responseText);\n                somethingFinishedLoading();\n            } else if (http.readyState === 4 && http.status !== 200) {\n                console.warn('Could not load gmeConfig at', configUrl);\n                somethingFinishedLoading();\n            }\n        };\n        http.open('GET', configUrl, true);\n        http.send();\n    })();\n});\n\n"
  ]
}