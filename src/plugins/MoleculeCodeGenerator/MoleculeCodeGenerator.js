/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Nov 15 2016 18:47:55 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'text!./Templates/index.html',
    'common/util/ejs',
    'text!./Templates/methanepy.ejs',
    'text!./Templates/ch3py.ejs',
    'text!./Templates/ch2py.ejs',
    'text!./Templates/ethanepy.ejs',
    'text!./Templates/polymerpy.ejs',
    'text!./Templates/copolymerpy.ejs'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    indexHtmlContent,
    ejs,
    methanePyTemplate,
    ch3PyTemplate,
    ch2PyTemplate,
    ethanePyTemplate,
    polymerPyTemplate,
    copolymerPyTemplate) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);
    /**
     * Initializes a new instance of MoleculeCodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MoleculeCodeGenerator.
     * @constructor
     */
    var MoleculeCodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    var PYTHON_EXE = "E:\\Users\\TengyuMa\\Anaconda3\\envs\\iModels\\python.exe";

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MoleculeCodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MoleculeCodeGenerator.prototype = Object.create(PluginBase.prototype);
    MoleculeCodeGenerator.prototype.constructor = MoleculeCodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MoleculeCodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        self.metaMoleculeInfo = {};
        var fs = require('fs');
        var path = require('path');
        var express = require('express');
        var app = express();
        app.locals.path = path;
        var artifact,
            molecule = {},
            iter; // iteration number of
        var example_dir;

        var metaNodeInfoJson;
        var metaMoleculeInfoJson;
        var metaNodesJson;
        var examplePY;
        var example_py;
        var example;
        var example_node;
        var example_type;
        var python_template;

        self.loadNodeMap(self.rootNode)
            .then(function (nodes) {
                iter = 1;
                // self.getMoleculeInfo(self.rootNode, nodes, iter);
                molecule['molecule'] = self.getMoleculeInfo(nodeObject, nodes, iter);  // only return the example json

                metaMoleculeInfoJson = JSON.stringify(self.metaMoleculeInfo, null, 4);
                artifact = self.blobClient.createArtifact('project-data');
                example = self.core.getAttribute(nodeObject,'name');
                example_node = self.core.getMetaType(nodeObject);
                example_type = self.core.getAttribute(example_node, 'name');
                // example = 'Methane';
                self.logger.info('example name is: ', example);
                self.logger.info('example meta type is: ', example_type);

                // molecule['molecule'] = self.findWeWant(self.metaMoleculeInfo, example, 'null');  // no need nay more

                switch(example_type) {
                    case 'Atom': {
                        switch (example) {
                            case 'H':
                                self.logger.info('no template for H now');
                                break;
                            default:
                                self.logger.info('no template for this Atom now');
                                break;
                        }
                        break;
                    }
                    case 'Molecule': {
                        switch(example) {
                            case 'Methane':
                                python_template = methanePyTemplate;
                                break;
                            case '-CH3':
                                python_template = ch3PyTemplate;
                                break;
                            case '-CH2-':
                                python_template = ch2PyTemplate;
                                break;
                            default:
                                self.logger.info('no template for this Molecule now');
                                break;
                        }
                        break;
                    }
                    case 'Polymer': {
                        switch (example) {
                            case 'Ethane':
                                python_template = ethanePyTemplate;
                                break;
                            case 'CH3-CH2-CH3':
                                python_template = polymerPyTemplate;
                                break;
                            default:
                                python_template = polymerPyTemplate;
                                self.logger.info('use general template for this Polymer');
                                break;
                        }
                        break;
                    }
                    case 'Copolymer': {
                        switch (example) {
                            case 'CH3-CH2-Silane-CH3':
                                python_template = copolymerPyTemplate;
                                break;
                            default:
                                python_template = copolymerPyTemplate;
                                self.logger.info('use general template for this Copolymer');
                                break;
                        }
                        break;
                    }
                    default: {
                        self.logger.error('#############################didn\'t find: ', example_type);
                    }// self.logger.error('didn\'t find: ', example);
                }

                examplePY = ejs.render(python_template, molecule);

                example_dir = self.makeid();

                example_py = example+'.py';
                var example_path = path.join(example_dir, example_py);
                fs.writeFileSync(example_path, examplePY);
                var childprocess = require("child-process-promise");
                self.logger.info(path.join(process.cwd(), example_path));
                return childprocess.exec(PYTHON_EXE + ' ' + path.join(process.cwd(), example_path));
            })
            .then(function (output) {
                var stdout = output.stdout;
                console.log(stdout);
                stdout = stdout.slice(0, -2);
                var source = stdout;
                var destination = example_dir;
                var ncp = require('ncp').ncp;
                ncp.limit = 16;
                ncp(source, destination, function (err){
                if (err) {
                    return console.error(err);
                }
                    console.log('done!');
                });
               
                var chosen_css = fs.readFileSync(path.join(source, 'chosen.css'));
                var chosen_jquery_min_js = fs.readFileSync(path.join(source, 'chosen.jquery.min.js'));
                var imolecule_min_js = fs.readFileSync(path.join(source, 'imolecule.min.js'));
                var index_html = fs.readFileSync(path.join(source, 'index.html'));
                var jquery_1_11_1_min_js = fs.readFileSync(path.join(source, 'jquery-1.11.1.min.js'));
                var Methane_py = fs.readFileSync(path.join(example_dir, example_py));
                var server_css = fs.readFileSync(path.join(source, 'server.css'));
                // }
                return artifact.addFilesAsSoftLinks({
                    'metaMoleculeInfo.json': metaMoleculeInfoJson,
                    'chosen.css': chosen_css,
                    'chosen.jquery.min.js': chosen_jquery_min_js,
                    'imolecule.min.js': imolecule_min_js,
                    'index.html': index_html,
                    'jquery-1.11.1.min.js': jquery_1_11_1_min_js,
                    'Methane.py': Methane_py,
                    'server.css': server_css
                    });
            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                return artifact.save()
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.createMessage(null, `<iframe src="/rest/blob/view/${artifactHash}/index.html" style="width: 100%; height: 100%; min-height: 400px"></iframe>`);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // (3)
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });
    };

    MoleculeCodeGenerator.prototype.loadNodeMap = function (node) {
        var self = this; 
        return self.core.loadSubTree(node)
           .then(function (nodeArr) {
               var nodes = {},
                   i;
               for (i = 0; i < nodeArr.length; i += 1) {
                   nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
               }

               return nodes;
           });
    };

    MoleculeCodeGenerator.prototype.printRandomly = function (nodes) {
        var self = this,
            path,
            name,
            attr,
            metaNode,
            node;

        for (path in nodes) {
            node = nodes[path];
            name = self.core.getAttribute(node, 'name');
            if (self.isMetaTypeOf(node, self.META.Transition)) {
                attr = self.core.getAttribute(node, 'guard');
                self.logger.info(name, 'has event', attr);
            } else {
                if (self.core.getParent(node)) {
                    metaNode = self.getMetaType(node);
                    self.logger.info(name, 'is of meta-type', self.core.getAttribute(metaNode, 'name'));
                } else {
                    
                }
            }
        }
    };

    MoleculeCodeGenerator.prototype.printChildrenRec = function (root, nodes, indent) {
        var self = this,
            childrenPaths,
            childNode,
            i;

        indent = indent || '';

        childrenPaths = self.core.getChildrenPaths(root);
        self.logger.info(indent, self.core.getAttribute(root, 'name'), 'has', childrenPaths.length, 'children.');

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            self.printChildrenRec(childNode, nodes, indent + '  ');           
        }
        // if (root === self.getMetaType(root)) {
        //     self.metaNodeInfo.push({name: <nameOfMetaNode>, path: <pathOfMetaNode>, numberOfChildren: <numberOfChildrenOfMetaNode>});
        // }
    };

    MoleculeCodeGenerator.prototype.findWeWant = function (root, want, found) {
        var self = this,
            i;
        // self.logger.info('======', root);
        // self.logger.info('======', root.name, 'vs', want)
        if (root.name == want) {
                found = root;
                // self.logger.info('==#########in the if===###########', found.name)
                return found;
            }
        for (i in root.children) {
            var child = self.findWeWant(root.children[i], want, found);
            if (child.name == want) {
                found = child;
                return found;
            }
            // if (i == self.metaMoleculeInfo.length) {
            //     return
            // }
        }
        return found
    };

    MoleculeCodeGenerator.prototype.makeid = function (){
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var path = require('path');
    var fs = require('fs');
    for( var i=0; i < 5; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    var mkdirSync = function (path) {
        try {
            fs.mkdirSync(path);
        } catch(e) {
            if ( e.code != 'EEXIST' ) throw e;
        }
    }
    var mkdirpSyncDir = function (dirpath) {
        var parts = dirpath.split(path.sep);
        for( var i = 1; i <= parts.length; i++ ) {
            mkdirSync( path.join.apply(null, parts.slice(0, i)) );
        }
    }
    mkdirpSyncDir(path.join('src', 'plugins', 'MoleculeCodeGenerator', 'example', text));
    return path.join('src', 'plugins', 'MoleculeCodeGenerator', 'example', text);
    }


    MoleculeCodeGenerator.prototype.getMoleculeInfo = function (root, nodes, iter, indent) {
        var self = this,
            idOfMetaNode,
            nameOfMetaNode,
            xOfMetaNode,
            yOfMetaNode,
            zOfMetaNode,
            lengthOfMetaNode,
            capOfMetaNode,
            isMeta,
            metaType,
            children = {},
            childrenPaths,
            childNode,
            child_obj,
            child_key,
            dstNode,
            srcNode,
            dstName,
            srcName,
            child={},
            i;

        indent = indent || '';

        nameOfMetaNode = self.core.getAttribute(root, 'name');
        xOfMetaNode = self.core.getAttribute(root, 'x');
        yOfMetaNode = self.core.getAttribute(root, 'y');
        zOfMetaNode = self.core.getAttribute(root, 'z');
        lengthOfMetaNode = self.core.getAttribute(root, 'length');
        capOfMetaNode = self.core.getAttribute(root, 'cap');
        idOfMetaNode = self.core.getRelid(root);
        isMeta = self.core.isMetaNode(root);

        childrenPaths = self.core.getChildrenPaths(root);
        // self.logger.info(indent, nameOfMetaNode, 'has', childrenPaths.length, 'children.');

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            // self.logger.info('**********', childNode)
            child_obj = self.getMoleculeInfo(childNode, nodes, iter + 1, indent + '  ')
            // children.push(
            // self.logger.info('**********', child_obj)

            for (child_key in child_obj) {
                children[child_key] = child_obj[child_key];
                // self.logger.info('***afsadf*******', child_key)
                // self.logger.info('***asdfasdf*******', child_obj[child_key])
            }
            // );
        }

        if(iter == 1) {
            if (self.core.getAttribute(root, 'name') == 'ROOT') {
                child = {name: nameOfMetaNode, children: children};
                self.metaMoleculeInfo = child;
            }
            else {
                child = {name: nameOfMetaNode, children: children, length: lengthOfMetaNode};
                self.metaMoleculeInfo = child;
            }
            // self.logger.info('******metaNodeInfo******', self.metaNodeInfo)
        } 
        else {
            if(!isMeta) {
                metaType = self.core.getAttribute(self.core.getBase(root), 'name');
                if(self.core.isConnection(root)) {
                    dstNode = self.core.getPointerPath(root, 'dst');
                    dstName = self.core.getAttribute(nodes[dstNode], 'name');
                    srcNode = self.core.getPointerPath(root, 'src');
                    srcName = self.core.getAttribute(nodes[srcNode], 'name');
                    // self.logger.info('**********', idOfMetaNode)
                    child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, src: srcName, dst: dstName});
                } 
                else if(metaType == 'Atom') {
                    child[idOfMetaNode] = ({name: nameOfMetaNode,
                                            pos: [xOfMetaNode, yOfMetaNode, zOfMetaNode],
                                            isMeta: isMeta,
                                            metaType: metaType,
                                            cap: capOfMetaNode,
                                            children: children
                                            });
                }
                else if(metaType == 'Port') {
                    child[idOfMetaNode] = ({name: nameOfMetaNode,
                                            pos: [xOfMetaNode, yOfMetaNode, zOfMetaNode],
                                            isMeta: isMeta,
                                            metaType: metaType
                                            });
                }
                else if(metaType == 'Molecule') {
                    child[idOfMetaNode] = ({name: nameOfMetaNode,
                                            length: lengthOfMetaNode,
                                            pos: [xOfMetaNode, yOfMetaNode, zOfMetaNode],
                                            isMeta: isMeta,
                                            metaType: metaType,
                                            cap: capOfMetaNode,
                                            children: children
                                            });
                }
                else if(metaType == 'Polymer') {
                    child[idOfMetaNode] = ({name: nameOfMetaNode,
                                            length: lengthOfMetaNode,
                                            isMeta: isMeta,
                                            metaType: metaType,
                                            cap: capOfMetaNode,
                                            children: children
                                            });
                }
                else if(metaType == 'Copolymer') {
                    child[idOfMetaNode] = ({name: nameOfMetaNode,
                                            length: lengthOfMetaNode,
                                            isMeta: isMeta,
                                            metaType: metaType,
                                            cap: capOfMetaNode,
                                            children: children
                                            });
                }
                else {
                    child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, children: children});
                }
            } 
            else {
                metaType = nameOfMetaNode;
                child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, children: children});
            }
        }
 
        return child;
    };

    MoleculeCodeGenerator.prototype.getNodeInfo = function (root, nodes, iter, indent) {
        var self = this,
            idOfMetaNode,
            nameOfMetaNode,
            isMeta,
            metaType,
            children = [],
            childrenPaths,
            childNode,
            dstNode,
            srcNode,
            dstName,
            srcName,
            child={},
            i;

        indent = indent || '';

        nameOfMetaNode = self.core.getAttribute(root, 'name');
        idOfMetaNode = self.core.getRelid(root);
        isMeta = self.core.isMetaNode(root);

        childrenPaths = self.core.getChildrenPaths(root);
        self.logger.info(indent, nameOfMetaNode, 'has', childrenPaths.length, 'children.');

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            children.push(self.getNodeInfo(childNode, nodes, iter + 1, indent + '  '));
        }

        if(iter == 1) {
            child = ({name: nameOfMetaNode, children: children});
            self.metaNodeInfo.push(child);
        } 
        else {
            if(!isMeta) {
                metaType = self.core.getAttribute(self.core.getBase(root), 'name');
                if(self.core.isConnection(root)) {
                    dstNode = self.core.getPointerPath(root, 'dst');
                    dstName = self.core.getAttribute(nodes[dstNode], 'name');
                    srcNode = self.core.getPointerPath(root, 'src');
                    srcName = self.core.getAttribute(nodes[srcNode], 'name');
                    child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, src: srcName, dst: dstName});
                } 
                else {
                    child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, children: children});
                }
            } 
            else {
                metaType = nameOfMetaNode;
                child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, children: children});
            }
        }
 
        return child;
    };

    MoleculeCodeGenerator.prototype.getMetaNodes = function (root, nodes) {
        var self = this,
            childrenPaths,
            childNode,
            nameOfMetaNode,
            pathOfMetaNode,
            isMeta,
            baseNode,
            baseName,
            child,
            i;

        nameOfMetaNode = self.core.getAttribute(root, 'name');
        pathOfMetaNode = self.core.getPath(root);
        isMeta = self.core.isMetaNode(root);
        childrenPaths = self.core.getChildrenPaths(root);

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            self.getMetaNodes(childNode, nodes);
        }

        if(isMeta){
            baseNode = self.core.getPointerPath(root,'base');
            if(baseNode) {
                baseName = self.core.getAttribute(nodes[baseNode], 'name');
            }
            else {
                baseName = "null";
            }
            child = ({name: nameOfMetaNode, path:pathOfMetaNode, nbrOfChildren:childrenPaths.length, base: baseName});
            self.metaNodes.push(child);
        }

        return child;
    };

    return MoleculeCodeGenerator;
});